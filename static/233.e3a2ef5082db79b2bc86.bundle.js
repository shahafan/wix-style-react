webpackJsonp([233],{1724:function(module,exports){module.exports="import React from 'react';\nimport {mount} from 'enzyme';\nimport {isTestkitExists} from '../../testkit/test-common';\nimport notificationDriverFactory from './Notification.driver';\nimport {createDriverFactory} from '../test-common';\nimport {notificationTestkitFactory} from '../../testkit';\nimport {notificationTestkitFactory as enzymeNotificationTestkitFactory, buttonTestkitFactory as enzymeButtonTestkitFactory} from '../../testkit/enzyme';\n\nimport Notification from './Notification';\nimport Button from '../../src/Button';\n\nconst renderNotificationWithProps = (props = {}) => (\n  <Notification {...props}>\n    <Notification.TextLabel>\n      label\n    </Notification.TextLabel>\n    <Notification.CloseButton/>\n  </Notification>\n);\n\ndescribe('Notification', () => {\n  const createDriver = createDriverFactory(notificationDriverFactory);\n\n  describe('Visibility', () => {\n    it('should verify component exists', () => {\n      const driver = createDriver(renderNotificationWithProps());\n      expect(driver.exists()).toBeTruthy();\n    });\n\n    it('should be visible', () => {\n      const driver = createDriver(renderNotificationWithProps({show: true}));\n      expect(driver.visible()).toBeTruthy();\n    });\n\n    it('should not be visible', () => {\n      const driver = createDriver(renderNotificationWithProps({show: false}));\n      expect(driver.visible()).toBeFalsy();\n    });\n  });\n\n  describe('Themes', () => {\n    it('should support default theme', () => {\n      const driver = createDriver(renderNotificationWithProps({show: true}));\n      expect(driver.isStandardNotification()).toBeTruthy();\n      expect(driver.hasTheme('standard')).toBeTruthy();\n    });\n\n    it('should support standard theme', () => {\n      const driver = createDriver(renderNotificationWithProps({show: true, theme: 'standard'}));\n      expect(driver.isStandardNotification()).toBeTruthy();\n    });\n\n    it('should support error theme', () => {\n      const driver = createDriver(renderNotificationWithProps({show: true, theme: 'error'}));\n      expect(driver.isErrorNotification()).toBeTruthy();\n    });\n\n    it('should support success theme', () => {\n      const driver = createDriver(renderNotificationWithProps({show: true, theme: 'success'}));\n      expect(driver.isSuccessNotification()).toBeTruthy();\n    });\n\n    it('should support warning theme', () => {\n      const driver = createDriver(renderNotificationWithProps({show: true, theme: 'warning'}));\n      expect(driver.isWarningNotification()).toBeTruthy();\n    });\n\n    it('should support premium theme', () => {\n      const driver = createDriver(renderNotificationWithProps({show: true, theme: 'premium'}));\n      expect(driver.isPremiumNotification()).toBeTruthy();\n    });\n  });\n\n  describe('Sizes', () => {\n    it('should have a default size', () => {\n      const driver = createDriver(renderNotificationWithProps({show: true}));\n      expect(driver.isSmallSize()).toBeTruthy();\n    });\n\n    it('should support standard height', () => {\n      const driver = createDriver(renderNotificationWithProps({show: true, size: 'small'}));\n      expect(driver.isSmallSize()).toBeTruthy();\n    });\n\n    it('should support a big height', () => {\n      const driver = createDriver(renderNotificationWithProps({show: true, size: 'big'}));\n      expect(driver.isBigSize()).toBeTruthy();\n    });\n  });\n\n  describe('Content', () => {\n    describe('Label', () => {\n      it('should show have a text to show', () => {\n        const labelText = 'Label Text';\n        const driver = createDriver(\n          <Notification show>\n            <Notification.TextLabel>\n              {labelText}\n            </Notification.TextLabel>\n            <Notification.CloseButton/>\n          </Notification>\n        );\n        expect(driver.getLabelText()).toEqual(labelText);\n      });\n    });\n\n    describe('Action Button', () => {\n      it('should have an action button', () => {\n        const actionButtonText = 'Action Button Text';\n        const driver = createDriver(\n          <Notification show>\n            <Notification.TextLabel>\n              label\n            </Notification.TextLabel>\n            <Notification.ActionButton>\n              {actionButtonText}\n            </Notification.ActionButton>\n            <Notification.CloseButton/>\n          </Notification>\n        );\n        expect(driver.getActionButtonText()).toEqual(actionButtonText);\n      });\n\n      it('should not have an action button', () => {\n        const driver = createDriver(renderNotificationWithProps({show: true}));\n        expect(driver.hasActionButton()).toBeFalsy();\n      });\n\n      it('should call the supplied onClick handler when clicked', () => {\n        const onClickMock = jest.fn();\n\n        const driver = createDriver(\n          <Notification show>\n            <Notification.TextLabel>\n              label\n            </Notification.TextLabel>\n            <Notification.ActionButton onClick={onClickMock}>\n              action\n            </Notification.ActionButton>\n            <Notification.CloseButton/>\n          </Notification>\n        );\n\n        driver.clickOnActionButton();\n\n        expect(onClickMock).toBeCalled();\n      });\n    });\n\n    describe('Close Button', () => {\n      it('should have a close button (with action button)', () => {\n        const driver = createDriver(renderNotificationWithProps({show: true}));\n        expect(driver.hasCloseButton()).toBeTruthy();\n      });\n\n      it('should have a close button (without action button)', () => {\n        const driver = createDriver(renderNotificationWithProps({show: true}));\n        expect(driver.hasActionButton()).toBeFalsy();\n        expect(driver.hasCloseButton()).toBeTruthy();\n      });\n    });\n  });\n\n  describe('Type', () => {\n    it('should set default type to global and position relative', () => {\n      const driver = createDriver(renderNotificationWithProps({show: true}));\n      expect(driver.isRelativelyPositioned()).toBeTruthy();\n    });\n\n    it('should set the type to global and position relative', () => {\n      const driver = createDriver(renderNotificationWithProps({show: true, type: 'global'}));\n      expect(driver.isRelativelyPositioned()).toBeTruthy();\n    });\n\n    it('should set the type to local and position absolute', () => {\n      const driver = createDriver(renderNotificationWithProps({show: true, type: 'local'}));\n      expect(driver.isAbsolutePositioned()).toBeTruthy();\n    });\n\n    it('should set the type to sticky and position fixed', () => {\n      const driver = createDriver(renderNotificationWithProps({show: true, type: 'sticky'}));\n      expect(driver.isFixedPositioned()).toBeTruthy();\n    });\n  });\n\n  describe('Closing', () => {\n    let driver;\n\n    beforeEach(() => {\n      jest.useFakeTimers();\n    });\n\n    describe('Closing when clicking on close button', () => {\n\n      beforeEach(() => {\n        driver = createDriver(renderNotificationWithProps({show: true}));\n        driver.clickOnCloseButton();\n      });\n\n      beforeEach(() => {\n        jest.runAllTimers();\n      });\n\n      // it('should close the notification', () => {\n      //   expect(driver.visible()).toBeFalsy();\n      // });\n\n      it('should allow reopening the notification after closed by close button', () => {\n        driver.setProps({show: true});\n        expect(driver.visible()).toBeTruthy();\n      });\n    });\n\n    ['local', 'sticky'].forEach(type => {\n      describe(`Closing after timeout for ${type} Notification`, () => {\n        const defaultTimeout = 6000;\n\n        it('should close after default timeout (6s)', () => {\n          driver = createDriver(renderNotificationWithProps({show: true, type}));\n          jest.runAllTimers();\n\n          expect(driver.visible()).toBeFalsy();\n          expect(setTimeout.mock.calls.find(call => call[1] === defaultTimeout)).toBeTruthy();\n        });\n\n        it('should close after a given timeout', () => {\n          const timeout = 132;\n\n          driver = createDriver(renderNotificationWithProps({show: true, type, timeout}));\n\n          jest.runAllTimers();\n\n          expect(driver.visible()).toBeFalsy();\n          expect(setTimeout.mock.calls.find(call => call[1] === timeout)).toBeTruthy();\n        });\n\n        it('should be able to show notification again after timeout', () => {\n          driver = createDriver(renderNotificationWithProps({show: true, type}));\n\n          jest.runAllTimers();\n          expect(driver.visible()).toBeFalsy();\n          expect(setTimeout.mock.calls.find(call => call[1] === defaultTimeout)).toBeTruthy();\n          jest.clearAllTimers();\n\n          driver.setProps({show: true});\n          expect(driver.visible()).toBeTruthy();\n        });\n\n        it('should close after starting from a closed status', () => {\n          driver = createDriver(renderNotificationWithProps({show: false, type}));\n\n          jest.runAllTimers();\n          expect(driver.visible()).toBeFalsy();\n          driver.setProps({show: true});\n          expect(driver.visible()).toBeTruthy();\n          jest.runAllTimers();\n          expect(driver.visible()).toBeFalsy();\n\n          expect(setTimeout.mock.calls.find(call => call[1] === defaultTimeout)).toBeTruthy();\n        });\n      });\n    });\n\n    afterEach(() => {\n      jest.clearAllTimers();\n    });\n  });\n\n  describe('Style', () => {\n    it('should accept a z-index', () => {\n      const zIndex = 999;\n      const driver = createDriver(renderNotificationWithProps({show: true, zIndex}));\n      expect(driver.getZIndex()).toEqual(zIndex);\n    });\n  });\n\n  describe('testkit', () => {\n    it('should exist', () => {\n      const component = renderNotificationWithProps({show: true});\n      expect(isTestkitExists(component, notificationTestkitFactory)).toBeTruthy();\n    });\n  });\n\n  describe('enzyme testkit', () => {\n    it('should exist', () => {\n      const component = mount(<ControlledNotification/>);\n\n      const enzymeNotificationTestkit = enzymeNotificationTestkitFactory({wrapper: component, dataHook: 'notification_dh'});\n      const enzymeButtonTestkit = enzymeButtonTestkitFactory({wrapper: component, dataHook: 'button_dh'});\n\n      expect(enzymeNotificationTestkit.visible()).toBeFalsy();\n      expect(enzymeButtonTestkit.exists()).toBeTruthy();\n\n      enzymeButtonTestkit.click();\n\n      expect(enzymeNotificationTestkit.visible()).toBeTruthy();\n    });\n  });\n\n  describe('Notification.ActionButton', () => {\n    it('should display a Button when passing by default', () => {\n      const component = mount(\n        <Notification.ActionButton>\n          Action Button\n        </Notification.ActionButton>\n      );\n\n      expect(component.find('Button').length).toEqual(1);\n    });\n\n    it('should display a Button when explicitly required', () => {\n      const component = mount(\n        <Notification.ActionButton type=\"button\">\n          Action Button\n        </Notification.ActionButton>\n      );\n\n      expect(component.find('Button').length).toEqual(1);\n    });\n\n    it('should display a TextLink explicitly required', () => {\n      const component = mount(\n        <Notification.ActionButton type=\"textLink\" link=\"some link\">\n          Action Button\n        </Notification.ActionButton>\n      );\n\n      expect(component.find('TextLink').length).toEqual(1);\n    });\n  });\n});\n\nclass ControlledNotification extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {showNotification: false};\n  }\n\n  render() {\n    return (\n      <div>\n        <Button dataHook=\"button_dh\" onClick={() => this.setState({showNotification: !this.state.showNotification})}>\n          button\n        </Button>\n        <Notification dataHook=\"notification_dh\" show={this.state.showNotification}>\n          <Notification.TextLabel>\n            label\n          </Notification.TextLabel>\n          <Notification.CloseButton/>\n        </Notification>\n      </div>\n    );\n  }\n}\n"}});