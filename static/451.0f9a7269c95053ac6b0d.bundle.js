webpackJsonp([451],{1506:function(module,exports){module.exports="import eyes from 'eyes.it';\nimport {datePickerTestkitFactory, getStoryUrl} from '../../testkit/protractor';\nimport autoExampleTestkitFactory from '../../stories/utils/Components/AutoExample/protractor.driver';\n\ndescribe('DatePicker', () => {\n  const storyUrl = getStoryUrl('Core', 'DatePicker');\n  const autoExampleDriver = autoExampleTestkitFactory({dataHook: 'auto-example'});\n  const {inputDriver, calendarDriver} = datePickerTestkitFactory({dataHook: 'storybook-datepicker'});\n\n  beforeEach(() => {\n    browser.get(storyUrl);\n  });\n\n  eyes.it('should not open calendar when disabled', () => {\n    autoExampleDriver.get.toggle('storybook-DatePicker-disabled-toggle').click();\n    inputDriver.click();\n\n    expect(calendarDriver.exists()).toBe(false);\n  });\n\n  eyes.it('should not close calendar on selecting date with click when shouldCloseOnSelect prop set to false', () => {\n    autoExampleDriver.get.toggle('storybook-DatePicker-shouldCloseOnSelect-toggle').click();\n    inputDriver.click();\n    calendarDriver.clickOnNthAvailableDay(1);\n\n    expect(calendarDriver.exists()).toBe(true);\n    expect(calendarDriver.isVisible()).toBe(true);\n  });\n\n  describe('default', () => {\n    eyes.it('should show inputDriver', () => {\n      expect(inputDriver.isVisible()).toBe(true);\n    });\n\n    eyes.it('should open calendar when click on inputDriver', () => {\n      inputDriver.click();\n\n      expect(calendarDriver.exists()).toBe(true);\n      expect(calendarDriver.isVisible()).toBe(true);\n    });\n\n    eyes.it('should close calendar on selecting date with click', () => {\n      inputDriver.click();\n      calendarDriver.clickOnNthAvailableDay(1);\n\n      expect(calendarDriver.exists()).toBe(false);\n    });\n\n    eyes.it('should close calendar on Escape key', () => {\n      inputDriver.click();\n      expect(calendarDriver.exists()).toBe(true);\n\n      inputDriver.pressEscKey();\n      expect(calendarDriver.exists()).toBe(false);\n    });\n\n    eyes.it('should close calendar on Tab key', () => {\n      inputDriver.click();\n      expect(calendarDriver.exists()).toBe(true);\n\n      inputDriver.pressTabKey();\n      expect(calendarDriver.exists()).toBe(false);\n    });\n\n    eyes.it('should not change date', () => {\n      inputDriver.click();\n      inputDriver.pressEnterKey();\n\n      expect(inputDriver.getValue()).toBe('2017/01/01');\n    });\n\n    eyes.it('should select next day date', () => {\n      inputDriver.click();\n      inputDriver.pressArrowRightKey();\n      inputDriver.pressEnterKey();\n\n      expect(inputDriver.getValue()).toBe('2017/01/02');\n    });\n  });\n\n  describe('with year and month dropdown', () => {\n    beforeEach(() => {\n      browser.get(storyUrl);\n      autoExampleDriver.get.toggle('storybook-DatePicker-showYearDropdown-toggle').click();\n      autoExampleDriver.get.toggle('storybook-DatePicker-showMonthDropdown-toggle').click();\n    });\n\n    eyes.it('should select 2027 year', () => {\n      inputDriver.click();\n      calendarDriver.openYearDropdownOptions();\n      calendarDriver.clickOnNthYear();\n      calendarDriver.clickOnNthAvailableDay();\n\n      expect(inputDriver.getValue()).toBe('2027/01/01');\n    });\n\n    eyes.it('should select February', () => {\n      inputDriver.click();\n      calendarDriver.openMonthDropdownOptions();\n      calendarDriver.clickOnNthMonth(2);\n      calendarDriver.clickOnNthAvailableDay();\n\n      expect(inputDriver.getValue()).toBe('2017/02/01');\n    });\n\n    eyes.it('should select January and 2027 year', () => {\n      inputDriver.click();\n      calendarDriver.openYearDropdownOptions();\n      calendarDriver.clickOnNthYear();\n      calendarDriver.openMonthDropdownOptions();\n      calendarDriver.clickOnNthMonth();\n      calendarDriver.clickOnNthAvailableDay();\n\n      expect(inputDriver.getValue()).toBe('2027/01/01');\n    });\n  });\n});\n"}});