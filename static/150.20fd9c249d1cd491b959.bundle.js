webpackJsonp([150],{1807:function(module,exports){module.exports="import React from 'react';\nimport ReactTestUtils from 'react-dom/test-utils';\nimport Input from './Input';\nimport {tpaInputTestkitFactory as inputTestkitFactory} from '../../../testkit';\nimport {tpaInputTestkitFactory as enzymeInputTestkitFactory} from '../../../testkit/enzyme';\nimport {isEnzymeTestkitExists} from '../../../testkit/test-common';\n\ndescribe('Input', () => {\n  let div;\n  const dataHook = 'input-hook';\n\n  const renderToDocument = component => (\n    div.appendChild(ReactTestUtils.renderIntoDocument(<div>{component}</div>))\n  );\n\n  beforeEach(() => div = document.createElement('div'));\n\n  it('should exist', () => {\n    const wrapper = renderToDocument(<Input dataHook={dataHook}/>);\n    const inputTestkit = inputTestkitFactory({wrapper, dataHook});\n    expect(inputTestkit.exists()).toBeTruthy();\n  });\n\n  it('should contain default value', () => {\n    const wrapper = renderToDocument(\n      <Input defaultValue=\"some default value\" dataHook={dataHook}/>\n    );\n\n    const inputTestkit = inputTestkitFactory({wrapper, dataHook});\n    expect(inputTestkit.getValue()).toEqual('some default value');\n  });\n\n  it('should return passed value', () => {\n    const wrapper = renderToDocument(\n      <Input value=\"the value\" onChange={() => {}} dataHook={dataHook}/>\n    );\n\n    const inputTestkit = inputTestkitFactory({wrapper, dataHook});\n    expect(inputTestkit.getValue()).toEqual('the value');\n  });\n\n  it('should have input class', () => {\n    const wrapper = renderToDocument(\n      <Input styles={{locals: {input: 'input'}}} dataHook={dataHook}/>\n    );\n\n    const inputTestkit = inputTestkitFactory({wrapper, dataHook});\n    expect(inputTestkit.hasClass('input')).toBeTruthy();\n    expect(inputTestkit.hasClass('error')).toBeFalsy();\n  });\n\n  it('should be in error state', () => {\n    const wrapper = renderToDocument(\n      <Input error styles={{locals: {input: 'input', error: 'error'}}} dataHook={dataHook}/>\n    );\n\n    const inputTestkit = inputTestkitFactory({wrapper, dataHook});\n    expect(inputTestkit.hasClass('error')).toBeTruthy();\n  });\n\n  it('should be able to pass error class name', () => {\n    const wrapper = renderToDocument(\n      <Input error errorClassName=\"customErrorClassName\" styles={{locals: {input: 'input', error: 'error'}}} dataHook={dataHook}/>\n    );\n\n    const inputTestkit = inputTestkitFactory({wrapper, dataHook});\n    expect(inputTestkit.hasClass('customErrorClassName')).toBeTruthy();\n  });\n\n  it('should be able to pass custom input css class name', () => {\n    const wrapper = renderToDocument(\n      <Input error inputClassName=\"customInputClassName\" styles={{locals: {input: 'input', error: 'error'}}} dataHook={dataHook}/>\n    );\n\n    const inputTestkit = inputTestkitFactory({wrapper, dataHook});\n    expect(inputTestkit.hasClass('customInputClassName')).toBeTruthy();\n  });\n\n  describe('enzyme testkit', () => {\n    it('should exist', () => {\n      expect(isEnzymeTestkitExists(<Input/>, enzymeInputTestkitFactory)).toBe(true);\n    });\n  });\n});\n"}});