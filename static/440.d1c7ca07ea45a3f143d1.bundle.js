webpackJsonp([440],{1517:function(module,exports){module.exports="import styles from './DropdownLayout.scss';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport WixComponent from '../BaseComponents/WixComponent';\nimport isEqual from 'deep-eql';\nimport trim from 'lodash/trim';\n\nconst modulu = (n, m) => {\n  const remain = n % m;\n  return remain >= 0 ? remain : remain + m;\n};\n\nconst NOT_HOVERED_INDEX = -1;\n\nclass DropdownLayout extends WixComponent {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hovered: NOT_HOVERED_INDEX,\n      selectedId: props.selectedId\n    };\n\n    this._onSelect = this._onSelect.bind(this);\n    this._onMouseLeave = this._onMouseLeave.bind(this);\n    this._onMouseEnter = this._onMouseEnter.bind(this);\n    this._onKeyDown = this._onKeyDown.bind(this);\n    this._onClose = this._onClose.bind(this);\n    this.onClickOutside = this.onClickOutside.bind(this);\n  }\n\n  isLegalOption(option) {\n    return typeof option === 'object' && typeof option.id !== 'undefined' && trim(option.id).length > 0 &&\n        (typeof option.value !== 'undefined') && (React.isValidElement(option.value) || (typeof option.value === 'string' && trim(option.value).length > 0));\n  }\n\n  onClickOutside(event) {\n    const {visible, onClickOutside} = this.props;\n    if (visible && onClickOutside) {\n      onClickOutside(event);\n    }\n  }\n\n  _onSelect(index) {\n    const {options, onSelect, selectedId} = this.props;\n    this.setState({selectedId: options[index] ? options[index].id : undefined});\n    options[index] && onSelect && onSelect(options[index], options[index].id === selectedId);\n    return !!onSelect && options[index];\n  }\n\n  _onMouseEnter(index) {\n    if (this.isSelectableOption(this.props.options[index])) {\n      this.setState({hovered: index});\n    }\n  }\n\n  _onMouseLeave() {\n    this.setState({\n      hovered: NOT_HOVERED_INDEX\n    });\n  }\n\n  hoverNextStep(step) {\n    const {options} = this.props;\n\n    if (!options.some(this.isSelectableOption)) {\n      return;\n    }\n\n    let newHovered = this.state.hovered;\n    do {\n      newHovered = Math.abs(modulu(Math.max(newHovered + step, -1), options.length));\n    } while (!this.isSelectableOption(options[newHovered]));\n\n    this.setState({hovered: newHovered});\n    this.options.scrollTop = (newHovered - 2) * 35;\n  }\n\n  _onKeyDown(event) {\n    if (!this.props.visible || this.props.isComposing) {\n      return false;\n    }\n\n    switch (event.key) {\n      case 'ArrowDown': {\n        this.hoverNextStep(1);\n        break;\n      }\n\n      case 'ArrowUp': {\n        this.hoverNextStep(-1);\n        break;\n      }\n\n      case 'Enter': {\n        if (!this._onSelect(this.state.hovered)) {\n          return false;\n        }\n        break;\n      }\n\n      case 'Tab': {\n        if (this.props.closeOnSelect) {\n          return this._onSelect(this.state.hovered);\n        } else {\n          event.preventDefault();\n          if (!this._onSelect(this.state.hovered)) {\n            return false;\n          }\n        }\n        break;\n      }\n\n      case 'Escape': {\n        this._onClose();\n        break;\n      }\n\n      default: {\n        return false;\n      }\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n    return true;\n  }\n\n  _onClose() {\n    this.setState({\n      hovered: NOT_HOVERED_INDEX\n    });\n\n    if (this.props.onClose) {\n      this.props.onClose();\n    }\n  }\n\n  renderNode(node) {\n    return node ? <div className={styles.node}>{node}</div> : null;\n  }\n\n  render() {\n    const {options, visible, dropDirectionUp, tabIndex, fixedHeader, fixedFooter, withArrow, onMouseEnter, onMouseLeave} = this.props;\n    const contentContainerClassName = classNames({\n      [styles.contentContainer]: true,\n      [styles.shown]: visible,\n      [styles.up]: dropDirectionUp,\n      [styles.down]: !dropDirectionUp,\n      [styles.withArrow]: withArrow\n    });\n\n    return (\n      <div tabIndex={tabIndex} className={classNames(styles.wrapper, styles[`theme-${this.props.theme}`])} onKeyDown={this._onKeyDown} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\n        <div className={contentContainerClassName} style={{maxHeight: this.props.maxHeightPixels + 'px'}}>\n          {this.renderNode(fixedHeader)}\n          <div className={styles.options} style={{maxHeight: this.props.maxHeightPixels - 35 + 'px'}} ref={options => this.options = options} data-hook=\"dropdown-layout-options\">\n            {options.map((option, idx) => (\n              this.renderOption({option, idx})\n            ))}\n          </div>\n          {this.renderNode(fixedFooter)}\n        </div>\n        {this.renderTopArrow()}\n      </div>\n    );\n  }\n\n  renderOption({option, idx}) {\n    const {value, id, disabled, title, overrideStyle, linkTo} = option;\n    if (value === '-') {\n      return this.renderDivider(idx, `dropdown-item-${id}`);\n    }\n\n    const content = this.renderItem({\n      option,\n      idx,\n      selected: id === this.state.selectedId,\n      hovered: idx === this.state.hovered,\n      disabled: disabled || title,\n      title,\n      overrideStyle,\n      dataHook: `dropdown-item-${id}`\n    });\n\n    return linkTo ? <a key={idx} data-hook=\"link-item\" href={linkTo}>{content}</a> : content;\n  }\n\n  renderDivider(idx, dataHook) {\n    return (<div key={idx} className={styles.divider} data-hook={dataHook}/>);\n  }\n\n  renderItem({option, idx, selected, hovered, disabled, title, overrideStyle, dataHook}) {\n    const {itemHeight} = this.props;\n\n    const optionClassName = classNames({\n      [styles.option]: !overrideStyle,\n      [styles.selected]: selected && !overrideStyle,\n      wixstylereactSelected: selected && overrideStyle, //global class for items that use the overrideStyle\n      [styles.hovered]: hovered && !overrideStyle,\n      wixstylereactHovered: hovered && overrideStyle, //global class for items that use the overrideStyle\n      [styles.disabled]: disabled,\n      [styles.title]: title,\n      [styles.smallHeight]: itemHeight === 'small',\n      [styles.bigHeight]: itemHeight === 'big'\n    });\n\n    return (\n      <div\n        className={optionClassName}\n        onClick={!disabled ? () => this._onSelect(idx) : null}\n        key={idx}\n        onMouseEnter={() => this._onMouseEnter(idx)}\n        onMouseLeave={this._onMouseLeave}\n        data-hook={dataHook}\n        >\n        {option.value}\n      </div>\n    );\n  }\n\n  renderTopArrow() {\n    const {withArrow, visible, dropDirectionUp} = this.props;\n    const arrowClassName = classNames({\n      [styles.arrow]: true,\n      [styles.up]: dropDirectionUp,\n      [styles.down]: !dropDirectionUp\n    });\n    return withArrow && visible ? <div className={arrowClassName}/> : null;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.visible !== nextProps.visible) {\n      if (nextProps.visible) {\n        this.setState({hovered: this.props.options.findIndex(item => item.id === this.state.selectedId) || NOT_HOVERED_INDEX});\n      } else {\n        this.setState({hovered: NOT_HOVERED_INDEX});\n      }\n    }\n\n    if (this.props.selectedId !== nextProps.selectedId) {\n      this.setState({selectedId: nextProps.selectedId});\n    }\n\n    if (!isEqual(this.props.options, nextProps.options)) {\n      if (nextProps.options.some(option => (!this.isLegalOption(option)))) {\n        throw new Error('InputWithOptions: Invalid option provided');\n      }\n\n      if (this.state.hovered !== NOT_HOVERED_INDEX) {\n        this.setState({\n          hovered: nextProps.options.findIndex(item => item.id === this.props.options[this.state.hovered].id)\n        });\n      }\n    }\n  }\n\n  isSelectableOption(option) {\n    return option.value !== '-' && !option.disabled && !option.title;\n  }\n}\n\nDropdownLayout.propTypes = {\n  dropDirectionUp: PropTypes.bool,\n  onClose: PropTypes.func,\n  onSelect: PropTypes.func,\n  visible: PropTypes.bool,\n  options: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number\n    ]).isRequired,\n    value: PropTypes.oneOfType([\n      PropTypes.node,\n      PropTypes.string\n    ]).isRequired,\n    disabled: PropTypes.bool,\n    overrideStyle: PropTypes.bool\n  })),\n  selectedId: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number\n  ]),\n  tabIndex: PropTypes.number,\n  theme: PropTypes.string,\n  onClickOutside: PropTypes.func,\n  fixedHeader: PropTypes.node,\n  fixedFooter: PropTypes.node,\n  maxHeightPixels: PropTypes.number,\n  withArrow: PropTypes.bool,\n  closeOnSelect: PropTypes.bool,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  itemHeight: PropTypes.oneOf(['small', 'big'])\n};\n\nDropdownLayout.defaultProps = {\n  options: [],\n  tabIndex: 0,\n  selectedId: NOT_HOVERED_INDEX,\n  maxHeightPixels: 260,\n  closeOnSelect: true,\n  itemHeight: 'small'\n};\n\nDropdownLayout.NONE_SELECTED_ID = NOT_HOVERED_INDEX;\n\nexport default DropdownLayout;\n"}});