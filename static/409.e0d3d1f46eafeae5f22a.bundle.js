webpackJsonp([409],{1548:function(module,exports){module.exports="import React from 'react';\nimport PropTypes from 'prop-types';\nimport WixComponent from '../BaseComponents/WixComponent';\nimport omit from 'lodash/omit';\nimport DropdownLayout from '../DropdownLayout/DropdownLayout';\nimport styles from './IconWithOptions.scss';\nimport classNames from 'classnames';\n\nclass IconWithOptions extends WixComponent {\n  constructor(props) {\n    super(props);\n    this.state = {showOptions: false};\n    this.onSelect = this.onSelect.bind(this);\n    this.sortChildren(props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.sortChildren(nextProps);\n  }\n\n  sortChildren(props) {\n    [this.iconElement, ...this.optionsElement] = React.Children.toArray(props.children);\n  }\n\n  renderDropdownLayout() {\n    const dropdownProps = omit(this.props, ['dataHook']);\n\n    const dropdownLayoutOptions = React.Children.map(this.optionsElement, option => {\n      const {children: value, ...rest} = option.props;\n      return {value, ...rest};\n    });\n\n    const classes = classNames({\n      [styles.dropdownLayout]: true,\n      [styles.dropDirectionUp]: dropdownProps.dropDirectionUp\n    });\n\n    const style = {width: dropdownProps.dropdownWidth};\n\n    return (\n      <div className={classes} style={style} data-hook=\"iconWithOptions-dropdownLayout-wrapper\">\n        <DropdownLayout\n          {...dropdownProps}\n          dataHook=\"iconWithOptions-dropdownLayout\"\n          options={dropdownLayoutOptions}\n          visible={this.state.showOptions}\n          onSelect={(option, isSelectedOption) => this.onSelect(option, isSelectedOption)}\n          />\n      </div>\n    );\n  }\n\n  render() {\n    const {dropDirectionUp, dropdownWidth} = this.props;\n    const style = {width: dropdownWidth};\n    const classes = classNames({\n      [styles.wrapper]: true,\n      [styles.hover]: this.state.showOptions\n    });\n\n    return (\n      <div\n        className={classes}\n        style={style}\n        onMouseLeave={() => this.setState({showOptions: false})}\n        >\n        {dropDirectionUp ? this.renderDropdownLayout() : null}\n        <div\n          data-hook=\"icon-wrapper\"\n          className={styles.iconWrapper}\n          onMouseEnter={() => this.setState({showOptions: true})}\n          >\n          {this.iconElement}\n        </div>\n        {!dropDirectionUp ? this.renderDropdownLayout() : null}\n      </div>\n    );\n  }\n\n  onSelect(option, isSelectedOption) {\n    if (!isSelectedOption) {\n      this.props.onSelect(option);\n      this.setState({showOptions: false});\n    }\n  }\n}\n\nIconWithOptions.defaultProps = {\n  ...DropdownLayout.defaultProps,\n  onSelect: () => {},\n  dropdownWidth: '130px',\n  withArrow: true\n};\n\nIconWithOptions.propTypes = {\n  ...DropdownLayout.propTypes,\n  children: PropTypes.array.isRequired\n};\n\nIconWithOptions.Option = () => null;\nIconWithOptions.Option.displayName = 'IconWithOptions.Option';\n\nIconWithOptions.Icon = props => <div {...props}/>;\nIconWithOptions.Icon.displayName = 'IconWithOptions.Icon';\n\nexport default IconWithOptions;\n"}});