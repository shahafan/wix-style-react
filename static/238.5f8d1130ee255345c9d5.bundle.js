webpackJsonp([238],{1719:function(module,exports){module.exports="import React from 'react';\nimport ReactTestUtils from 'react-dom/test-utils';\nimport multiSelectDriverFactory from './MultiSelect.driver';\nimport MultiSelect from './MultiSelect';\nimport {createDriverFactory} from '../test-common';\nimport {multiSelectTestkitFactory} from '../../testkit';\nimport {multiSelectTestkitFactory as enzymeMultiSelectTestkitFactory} from '../../testkit/enzyme';\nimport {mount} from 'enzyme';\nimport {runInputWithOptionsTest} from '../InputWithOptions/InputWithOptions.spec';\n\nrunInputWithOptionsTest(multiSelectDriverFactory);\n\ndescribe('multiSelect', () => {\n\n  const createDriver = createDriverFactory(multiSelectDriverFactory);\n  const options = [\n    {value: 'Alabama', id: 'Alabama', tag: {label: 'Alabama'}},\n    {value: 'Alaska', id: 'Alaska'},\n    {value: 'Arkansas', id: 'Arkansas', tag: {label: 'Arkansas'}},\n    {value: 'Arkansas', id: 'Arkansas'},\n    {value: 'California', id: 'California'},\n    {value: 'California2', id: 'California2'},\n    {value: 'California3', id: 'California3'},\n    {value: 'California4', id: 'California4'},\n    {value: 'California5', id: 'California5'},\n    {value: 'California6', id: 'California6'},\n    {value: 'California7', id: 'California7'},\n    {value: 'Two words', id: 'Two words'}\n  ];\n\n  it('should show dropdown when autofocus is on', () => {\n    const {inputDriver, dropdownLayoutDriver} = createDriver(<MultiSelect options={options} autoFocus/>);\n    expect(inputDriver.isFocus()).toBeTruthy();\n    expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n  });\n\n  it('should remove options that were selected and became tags', () => {\n    const tags = [{id: 'Alabama', label: 'Alabama'}];\n\n    const {driver, dropdownLayoutDriver} = createDriver(<MultiSelect options={options} autoFocus/>);\n    expect(dropdownLayoutDriver.optionsLength()).toBe(options.length);\n    expect(dropdownLayoutDriver.isOptionExists('Alabama')).toBeTruthy();\n\n    driver.setProps({options, tags});\n    expect(dropdownLayoutDriver.optionsLength()).toBe(options.length - tags.length);\n    expect(dropdownLayoutDriver.isOptionExists('Alabama')).toBeFalsy();\n  });\n\n  it('should not filter anything without predicate function', () => {\n    const onSelect = jest.fn();\n    const {driver, dropdownLayoutDriver} = createDriver(<MultiSelect options={options} onSelect={onSelect}/>);\n    driver.focus();\n    expect(dropdownLayoutDriver.optionsLength()).toBe(options.length);\n  });\n\n  it('should not loose Focus or close the list on selection with a mouse click', () => {\n    const {driver, inputDriver, dropdownLayoutDriver} = createDriver(<MultiSelect options={options}/>);\n    driver.focus();\n    dropdownLayoutDriver.clickAtOption(0);\n    expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n    expect(inputDriver.isFocus());\n  });\n\n  it('should not loose Focus or close the list on selection with enter press', () => {\n    const {driver, inputDriver, dropdownLayoutDriver} = createDriver(<MultiSelect options={options}/>);\n    driver.focus();\n    driver.pressDownKey();\n    driver.pressEnterKey();\n    expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n    expect(inputDriver.isFocus()).toBeTruthy();\n  });\n\n  it('should not loose Focus or close the list on selection with tab press', () => {\n    const onSelect = jest.fn();\n    const {driver, inputDriver, dropdownLayoutDriver} = createDriver(<MultiSelect options={options} onSelect={onSelect}/>);\n    driver.focus();\n    driver.pressDownKey();\n    driver.pressTabKey();\n    expect(onSelect).toBeCalledWith([{id: options[0].id, label: options[0].value}]);\n    expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n    expect(inputDriver.isFocus()).toBeTruthy();\n  });\n\n  it('should not loose Focus or close the list on selection with comma press', () => {\n    const onSelect = jest.fn();\n    const onChange = jest.fn();\n    const {driver, inputDriver, dropdownLayoutDriver} = createDriver(\n      <MultiSelect value={options[0].value} options={options} delimiters={[',']} onSelect={onSelect} onChange={onChange}/>\n    );\n    driver.focus();\n    inputDriver.trigger('keyDown', {key: ','});\n    expect(onSelect).toBeCalledWith([{id: options[0].id, label: options[0].value}]);\n    expect(onChange).toBeCalledWith({target: {value: ''}});\n    expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n    expect(inputDriver.isFocus()).toBeTruthy();\n  });\n\n  it('should support custom delimiters', () => {\n    const onSelect = jest.fn();\n    const onChange = jest.fn();\n    const {driver, inputDriver, dropdownLayoutDriver} = createDriver(\n      <MultiSelect value={options[0].value} options={options} delimiters={[';']} onSelect={onSelect} onChange={onChange}/>\n    );\n    driver.focus();\n    inputDriver.trigger('keyDown', {key: ';'});\n    expect(onSelect).toBeCalledWith([{id: options[0].id, label: options[0].value}]);\n    expect(onChange).toBeCalledWith({target: {value: ''}});\n    expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n    expect(inputDriver.isFocus()).toBeTruthy();\n  });\n\n  it('should display a placeholder if there are no tags', () => {\n    const placeholder = 'myPlaceholder';\n    const {inputDriver} = createDriver(<MultiSelect options={options} placeholder={placeholder}/>);\n    expect(inputDriver.getPlaceholder()).toBe(placeholder);\n  });\n\n  it('should not display a placeholder if there are any tags', () => {\n    const tags = [{id: 'Alabama', label: 'Alabama'}];\n    const placeholder = 'myPlaceholder';\n    const {inputDriver} = createDriver(<MultiSelect options={options} tags={tags} placeholder={placeholder}/>);\n    expect(inputDriver.getPlaceholder()).toBe('');\n  });\n\n  it('should focus the input when clicking on the input wrapper', () => {\n    const {driver, inputDriver} = createDriver(<MultiSelect options={options}/>);\n    expect(inputDriver.isFocus()).toBeFalsy();\n    driver.clickOnInputWrapper();\n    expect(inputDriver.isFocus()).toBeTruthy();\n  });\n\n  it('should check that wrapper has focus when the input element does', () => {\n    const {driver, inputDriver} = createDriver(<MultiSelect options={options}/>);\n    driver.clickOnInputWrapper();\n    expect(inputDriver.isFocus()).toBeTruthy();\n    expect(driver.inputWrapperHasFocus()).toBeTruthy();\n  });\n\n  it('should contain specific tags', () => {\n    const tags = [{id: 'Alabama', label: 'Alabama'}, {id: 'Alaska', label: 'Alaska'}];\n\n    const {driver} = createDriver(<MultiSelect options={options} tags={tags}/>);\n    expect(driver.numberOfTags()).toBe(tags.length);\n    expect(driver.getTagLabelAt(0)).toBe('Alabama');\n    expect(driver.getTagLabelAt(1)).toBe('Alaska');\n  });\n\n  it('should support pasting legal multiple tags', () => {\n    const onSelect = jest.fn();\n    const onChange = jest.fn();\n    const {driver, inputDriver} = createDriver(\n      <MultiSelect options={options} onSelect={onSelect} onChange={onChange}/>\n    );\n    driver.focus();\n    inputDriver.trigger('paste');\n    inputDriver.enterText(`${options[0].value}, ${options[2].value}`);\n    expect(onChange).toBeCalledWith({target: {value: ''}});\n    expect(onSelect).toBeCalledWith([\n      {id: options[0].id, label: options[0].value},\n      {id: options[2].id, label: options[2].value}\n    ]);\n  });\n\n  it('should support pasting illegal multiple tags with error theme', () => {\n    const onSelect = jest.fn();\n    const onChange = jest.fn();\n    const {driver, inputDriver} = createDriver(\n      <MultiSelect options={options} onSelect={onSelect} onChange={onChange}/>\n    );\n    driver.focus();\n    inputDriver.trigger('paste');\n    inputDriver.enterText(`${options[0].value}, Arkansa`);\n    expect(onChange).toBeCalledWith({target: {value: ''}});\n    expect(onSelect).toBeCalledWith([\n      {id: options[0].id, label: options[0].value},\n      {id: 'customOption_2', label: 'Arkansa', theme: 'error'}\n    ]);\n  });\n\n  it('should call onManuallyInput after delimiter is pressed and input is not empty', () => {\n    const onManuallyInput = jest.fn();\n    const {driver, inputDriver} = createDriver(<MultiSelect options={options} onManuallyInput={onManuallyInput} value=\"custom value\"/>);\n\n    driver.focus();\n    inputDriver.enterText('custom value');\n    driver.pressCommaKey();\n\n    expect(onManuallyInput).toHaveBeenCalled();\n    expect(onManuallyInput.mock.calls[0][0]).toBe('custom value');\n  });\n\n  it('should call onRemoveTag when removing tags', () => {\n    const tagId = 'SweetHome';\n    const tags = [{id: tagId, label: 'Alabama'}];\n    const onRemoveTag = jest.fn();\n    const {driver} = createDriver(<MultiSelect autoFocus tags={tags} onRemoveTag={onRemoveTag}/>);\n\n    const tagDriver = driver.getTagDriverByTagId(tagId);\n    tagDriver.removeTag();\n\n    expect(onRemoveTag).toHaveBeenCalledWith(tagId);\n  });\n\n  it('should set maxHeight to initial when no height limit introduced', () => {\n    const {driver} = createDriver(<MultiSelect options={options}/>);\n\n    expect(driver.getMaxHeight()).toBe('initial');\n  });\n\n  it('should set maxHeight when maxNumRows defined', () => {\n    const {driver} = createDriver(<MultiSelect maxNumRows={2} options={options}/>);\n\n    expect(driver.getMaxHeight()).toBe('72px');\n  });\n\n  it('should set maxHeight when maxNumRows defined (large tags)', () => {\n    const options = [\n      {value: 'Alaska', id: 'Alaska', label: 'Alaska', size: 'large'}\n    ];\n\n    const {driver} = createDriver(<MultiSelect maxNumRows={2} tags={options} options={options}/>);\n\n    expect(driver.getMaxHeight()).toBe('96px');\n  });\n\n  describe('testkit', () => {\n    it('should exist', () => {\n      const div = document.createElement('div');\n      const dataHook = 'myDataHook';\n      const tags = [{id: 'Alabama', label: 'Alabama'}];\n      const wrapper = div.appendChild(ReactTestUtils.renderIntoDocument(<div><MultiSelect dataHook={dataHook} tags={tags}/></div>));\n      const multiSelectTestkit = multiSelectTestkitFactory({wrapper, dataHook});\n      expect(multiSelectTestkit.driver.exists()).toBeTruthy();\n      expect(multiSelectTestkit.inputDriver.exists()).toBeTruthy();\n      expect(multiSelectTestkit.dropdownLayoutDriver.exists()).toBeTruthy();\n      expect(multiSelectTestkit.driver.getTagDriverByTagId('Alabama').exists()).toBeTruthy();\n    });\n  });\n\n  describe('enzyme testkit', () => {\n    it('should exist', () => {\n      const dataHook = 'myDataHook';\n      const tags = [{id: 'Alabama', label: 'Alabama'}];\n      const wrapper = mount(<MultiSelect dataHook={dataHook} tags={tags}/>);\n      const multiSelectTestkit = enzymeMultiSelectTestkitFactory({wrapper, dataHook});\n      expect(multiSelectTestkit.driver.exists()).toBeTruthy();\n      expect(multiSelectTestkit.inputDriver.exists()).toBeTruthy();\n      expect(multiSelectTestkit.dropdownLayoutDriver.exists()).toBeTruthy();\n      expect(multiSelectTestkit.driver.getTagDriverByTagId('Alabama').exists()).toBeTruthy();\n    });\n  });\n});\n"}});