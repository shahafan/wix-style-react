webpackJsonp([503],{1454:function(module,exports){module.exports="import React from 'react';\nimport ReactTestUtils from 'react-dom/test-utils';\nimport buttonWithOptionsDriverFactory from './ButtonWithOptions.driver';\nimport ButtonWithOptions from './ButtonWithOptions';\nimport {createDriverFactory} from '../test-common';\nimport {buttonWithOptionsTestkitFactory} from '../../testkit';\nimport {buttonWithOptionsTestkitFactory as enzymeButtonWithOptionsTestkitFactory} from '../../testkit/enzyme';\nimport {mount} from 'enzyme';\n\nconst runButtonWithOptionsTest = driverFactory => {\n  describe('ButtonWithOptions', () => {\n\n    const createDriver = createDriverFactory(driverFactory);\n    const options = [\n      {id: 0, value: 'Option 1'},\n      {id: 1, value: 'Option 2'},\n      {id: 2, value: 'Option 3', disabled: true},\n      {id: 3, value: 'Option 4'},\n      {id: 'divider1', value: '-'},\n      {id: 'element1', value: <span style={{color: 'brown'}}>Option 4</span>}\n    ];\n\n    const optionsArray = options.map(option => {\n      const {value, ...props} = option;\n      return <ButtonWithOptions.Option key={option.id} {...props}>{value}</ButtonWithOptions.Option>;\n    });\n\n    const buttonWithOptions = props => (\n      <ButtonWithOptions {...props}>\n        <ButtonWithOptions.Button\n          height=\"medium\"\n          theme=\"icon-standard\"\n          />\n        {optionsArray}\n      </ButtonWithOptions>\n    );\n\n    it('should have a Button and a hidden DropdownLayout by default', () => {\n      const {buttonDriver, dropdownLayoutDriver} = createDriver(buttonWithOptions());\n      expect(buttonDriver.exists()).toBeTruthy();\n      expect(dropdownLayoutDriver.exists()).toBeTruthy();\n      expect(dropdownLayoutDriver.isShown()).toBeFalsy();\n    });\n\n    it('should show DropdownLayout when Button is clicked', () => {\n      const {buttonDriver, dropdownLayoutDriver} = createDriver(buttonWithOptions());\n      buttonDriver.click();\n      expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n    });\n\n    it('should hide options on selection', () => {\n      const {buttonDriver, dropdownLayoutDriver} = createDriver(buttonWithOptions());\n      buttonDriver.click();\n      dropdownLayoutDriver.clickAtOption(0);\n      expect(dropdownLayoutDriver.isShown()).toBeFalsy();\n    });\n\n    it('should hide options on outside click', () => {\n      const {driver, buttonDriver, dropdownLayoutDriver} = createDriver(buttonWithOptions());\n      buttonDriver.click();\n      expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n      driver.outsideClick();\n      expect(dropdownLayoutDriver.isShown()).toBeFalsy();\n    });\n\n    it('should call onSelect when an option is pressed', () => {\n      const onSelect = jest.fn();\n      const {buttonDriver, dropdownLayoutDriver} = createDriver(buttonWithOptions({onSelect}));\n      buttonDriver.click();\n      dropdownLayoutDriver.clickAtOption(0);\n      expect(onSelect).toBeCalledWith(options[0]);\n    });\n\n    it('should not call onSelect when a selected option is pressed', () => {\n      const onSelect = jest.fn();\n      const {buttonDriver, dropdownLayoutDriver} = createDriver(buttonWithOptions({onSelect, selectedId: options[0].id}));\n      buttonDriver.click();\n      dropdownLayoutDriver.clickAtOption(0);\n      expect(onSelect).not.toBeCalled();\n    });\n\n    describe('appearance', () => {\n      it('should be possible to specify the theme of underlying elements', () => {\n        const props = {theme: 'material', dataHook: 'myDataHook'};\n        const wrapper = mount(buttonWithOptions(props));\n        const testkit = enzymeButtonWithOptionsTestkitFactory({wrapper, dataHook: props.dataHook});\n        expect(testkit.dropdownLayoutDriver.hasTheme(props.theme)).toBe(true);\n      });\n    });\n\n    describe('testkit', () => {\n      it('should exist', () => {\n        const div = document.createElement('div');\n        const dataHook = 'myDataHook';\n        const wrapper = div.appendChild(ReactTestUtils.renderIntoDocument(<div>{buttonWithOptions({dataHook})}</div>));\n        const buttonWithOptionsTestkit = buttonWithOptionsTestkitFactory({wrapper, dataHook});\n        expect(buttonWithOptionsTestkit.driver.exists()).toBeTruthy();\n        expect(buttonWithOptionsTestkit.buttonDriver.exists()).toBeTruthy();\n        expect(buttonWithOptionsTestkit.dropdownLayoutDriver.exists()).toBeTruthy();\n      });\n    });\n\n    describe('enzyme testkit', () => {\n      it('should exist', () => {\n        const dataHook = 'myDataHook';\n        const wrapper = mount(buttonWithOptions({dataHook}));\n        const buttonWithOptionsTestkit = enzymeButtonWithOptionsTestkitFactory({wrapper, dataHook});\n        expect(buttonWithOptionsTestkit.driver.exists()).toBeTruthy();\n        expect(buttonWithOptionsTestkit.buttonDriver.exists()).toBeTruthy();\n        expect(buttonWithOptionsTestkit.dropdownLayoutDriver.exists()).toBeTruthy();\n      });\n    });\n  });\n};\n\nrunButtonWithOptionsTest(buttonWithOptionsDriverFactory);\n\nexport {runButtonWithOptionsTest};\n"}});