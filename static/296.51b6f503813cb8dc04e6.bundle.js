webpackJsonp([296],{1661:function(module,exports){module.exports="import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CloseThin from './../Icons/dist/components/CloseThin';\nimport ArrowDownThin from './../Icons/dist/components/ArrowDownThin';\nimport Search4 from './../Icons/dist/components/Search4';\nimport ThemedInputErrorSuffix from './ThemedInputErrorSuffix';\nimport ThemedInputHelpSuffix from './ThemedInputHelpSuffix';\n\nimport styles from './Input.scss';\n\nconst isFixVisible = fix => fix.isVisible;\n\nconst suffixRules = {\n  inputErrorSuffix: ({error, disabled}) => error && !disabled,\n  inputHelpSuffix: ({help, disabled}) => help && !disabled,\n  magnifyingGlass: ({magnifyingGlass, isClearButtonVisible, error}) => magnifyingGlass && !isClearButtonVisible && !error,\n  clearButton: ({isClearButtonVisible}) => isClearButtonVisible,\n  menuArrow: ({menuArrow, isClearButtonVisible, error, magnifyingGlass}) => menuArrow && !isClearButtonVisible && !error && !magnifyingGlass,\n  unitSeparator: ({unit}) => !!unit,\n  unit: ({unit}) => !!unit,\n  customSuffix: ({suffix}) => !!suffix\n};\n\nconst getVisibleSuffixCount = args =>\n   Object.keys(suffixRules).map(key => suffixRules[key])\n    .map(fn => fn(args))\n    .filter(x => x)\n    .length;\n\nconst InputSuffix = ({theme, errorMessage, error, disabled, help, helpMessage, onIconClicked,\n      magnifyingGlass, isClearButtonVisible, onClear, menuArrow, unit, suffix, focused,\n      tooltipPlacement, onTooltipShow\n}) => {\n\n  const suffixes = [\n    {\n      component: () => <ThemedInputErrorSuffix theme={theme} focused={focused} errorMessage={errorMessage} tooltipPlacement={tooltipPlacement} onTooltipShow={onTooltipShow}/>,\n      isVisible: suffixRules.inputErrorSuffix({error, disabled})\n    },\n    {\n      component: () => <ThemedInputHelpSuffix theme={theme} help={help} helpMessage={helpMessage} tooltipPlacement={tooltipPlacement} onTooltipShow={onTooltipShow}/>,\n      isVisible: suffixRules.inputHelpSuffix({help, disabled})\n    },\n    {\n      component: () =>\n        <div className={styles.magnifyingGlass} disabled={disabled} onClick={onIconClicked}>\n          <Search4 size={'18px'}/>\n        </div>,\n      isVisible: suffixRules.magnifyingGlass({magnifyingGlass, isClearButtonVisible, error})\n    },\n    {\n      component: () =>\n        <div onClick={onClear} className={styles.clearButton} data-hook=\"input-clear-button\">\n          <CloseThin size=\"8px\"/>\n        </div>,\n      isVisible: suffixRules.clearButton({isClearButtonVisible})\n    },\n    {\n      component: () => <div className={styles.unitSeparator}/>,\n      isVisible: suffixRules.unitSeparator({unit})\n    },\n    {\n      component: () => <div className={styles.unit} onClick={onIconClicked}>{unit}</div>,\n      isVisible: suffixRules.unit({unit})\n    },\n    {\n      component: () => suffix,\n      isVisible: suffixRules.customSuffix({suffix})\n    },\n    {\n      component: () =>\n        <div className={styles.menuArrow} disabled={disabled} onClick={onIconClicked}>\n          <ArrowDownThin size={'0.6em'}/>\n        </div>,\n      isVisible: suffixRules.menuArrow({menuArrow, isClearButtonVisible, error, magnifyingGlass})\n    }\n  ].filter(isFixVisible);\n\n\n  return (<div className={styles.suffixes}>\n    { suffixes.map((s, i) =>\n      <div key={i} className={styles.suffix}>\n        {s.component()}\n      </div>\n    )}\n  </div>);\n};\n\nInputSuffix.propTypes = {\n  suffixes: PropTypes.arrayOf(PropTypes.shape({\n    component: PropTypes.func.isRequired,\n    isVisible: PropTypes.bool.isRequired\n  })),\n  theme: PropTypes.oneOf(['normal', 'paneltitle', 'material', 'amaterial', 'flat', 'flatdark']),\n  errorMessage: PropTypes.node.isRequired,\n  error: PropTypes.bool,\n  disabled: PropTypes.bool,\n  help: PropTypes.bool,\n  helpMessage: PropTypes.node,\n  onIconClicked: PropTypes.func,\n  magnifyingGlass: PropTypes.bool,\n  isClearButtonVisible: PropTypes.bool,\n  onClear: PropTypes.func,\n  menuArrow: PropTypes.bool,\n  unit: PropTypes.string,\n  suffix: PropTypes.node,\n  focused: PropTypes.bool,\n  tooltipPlacement: PropTypes.string,\n  onTooltipShow: PropTypes.func\n};\n\nexport default InputSuffix;\nexport {getVisibleSuffixCount};\n"}});