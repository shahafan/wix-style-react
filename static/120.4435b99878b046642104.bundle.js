webpackJsonp([120],{1837:function(module,exports){module.exports="import React from 'react';\nimport TimePicker from './TimeInput';\nimport timeInputDriverFactory from './TimeInput.driver';\nimport {createDriverFactory} from '../test-common';\nimport moment from 'moment';\nimport sinon from 'sinon';\nimport {isTestkitExists, isEnzymeTestkitExists} from '../../testkit/test-common';\nimport {timeInputTestkitFactory} from '../../testkit';\nimport {timeInputTestkitFactory as enzymeTimeInputTestkitFactory} from '../../testkit/enzyme';\n\ndescribe('TimeInput', () => {\n  const createDriver = createDriverFactory(timeInputDriverFactory);\n  const format12Hours = time => time.format('hh:mm');\n  const format24Hours = time => time.format('HH:mm');\n\n  describe('Time display', () => {\n    it(`should render the given default value`, () => {\n      const props = {\n        defaultValue: moment()\n      };\n      const driver = createDriver(<TimePicker {...props}/>);\n      expect(driver.getValue()).toBe(format12Hours(props.defaultValue));\n    });\n\n    it(`should render the current time if no default value were passed `, () => {\n      const driver = createDriver(<TimePicker/>);\n      const currentTime = moment();\n      const currentTimeHours = format12Hours(currentTime).substring(0, 2);\n      const currentTimeMinutes = format12Hours(currentTime).substring(3, 5);\n      const inputTimeHours = driver.getValue().substring(0, 2);\n      const inputTimeMinutes = driver.getValue().substring(3, 5);\n      const minutesDiff = Math.abs((parseInt(inputTimeMinutes) - parseInt(currentTimeMinutes)));\n      expect(inputTimeHours).toBe(currentTimeHours);\n      expect(minutesDiff <= 1).toBeTruthy(); //ignore diff of one minute (minute can be change from the time the object was created to current time)\n    });\n\n    it(`should allow rendering time in 24 hours mode`, () => {\n      const props = {\n        defaultValue: moment(),\n        disableAmPm: true\n      };\n      const driver = createDriver(<TimePicker {...props}/>);\n      expect(driver.getValue()).toBe(format24Hours(props.defaultValue));\n    });\n\n    it(`should display am/pm indicator when in 12 hours mode`, () => {\n      const props = {\n        defaultValue: moment(),\n        disableAmPm: false\n      };\n      const driver = createDriver(<TimePicker {...props}/>);\n      expect(driver.isAmPmIndicatorExist()).toBeTruthy();\n    });\n\n    it(`should display AM indicator when in 12 hours mode and the time displayed is AM`, () => {\n      const props = {\n        defaultValue: moment('1/25/1982 9:30 AM'),\n        disableAmPm: false\n      };\n      const driver = createDriver(<TimePicker {...props}/>);\n      expect(driver.getAmPmIndicatorText()).toBe('am');\n    });\n\n    it(`should display AM indicator when in 12 hours mode and the time displayed is PM`, () => {\n      const props = {\n        defaultValue: moment('1/25/1982 9:30 PM'),\n        disableAmPm: false\n      };\n      const driver = createDriver(<TimePicker {...props}/>);\n      expect(driver.getAmPmIndicatorText()).toBe('pm');\n    });\n  });\n\n  describe('Input change', () => {\n    it(`should trigger 'onChange' callBack upon clicking input's up/down ticker`, () => {\n      const props = {\n        onChange: sinon.spy()\n      };\n      const driver = createDriver(<TimePicker {...props}/>);\n      driver.clickTickerUp();\n      driver.clickTickerDown();\n      expect(props.onChange.calledTwice).toBeTruthy();\n    });\n\n    it(`should not do anything upon clicking input's up/down ticker when disabled`, () => {\n      const props = {\n        onChange: sinon.spy(),\n        disabled: true\n      };\n      const driver = createDriver(<TimePicker {...props}/>);\n\n      driver.clickTickerUp();\n      driver.clickTickerDown();\n      expect(props.onChange.called).toBeFalsy();\n    });\n\n    it(`should increase input value by 20 minutes upon clicking the input's up ticker`, () => {\n      const props = {\n        defaultValue: moment()\n      };\n      const driver = createDriver(<TimePicker {...props}/>);\n      driver.clickTickerUp();\n      expect(driver.getValue()).toBe(format12Hours(props.defaultValue.add(20, 'minutes')));\n    });\n\n    it(`should decrease input value by 20 minutes upon clicking the input's down ticker`, () => {\n      const props = {\n        defaultValue: moment()\n      };\n      const driver = createDriver(<TimePicker {...props}/>);\n      driver.clickTickerDown();\n      expect(driver.getValue()).toBe(format12Hours(props.defaultValue.subtract(20, 'minutes')));\n    });\n\n    it(`should allow to change time using keyboard's input`, () => {\n      const props = {\n        defaultValue: moment()\n      };\n      const driver = createDriver(<TimePicker {...props}/>);\n      driver.setValue('12:00');\n      driver.blur();\n      expect(driver.getValue()).toBe('12:00');\n    });\n\n    it(`should not allow to enter non numeric charecters using keyboard's input, it should bring back the privous valid value`, () => {\n      const props = {\n        defaultValue: moment('1/25/1982 9:30 AM')\n      };\n      const driver = createDriver(<TimePicker {...props}/>);\n      driver.setValue('blabla');\n      driver.blur();\n      expect(driver.getValue()).toBe(format12Hours(props.defaultValue));\n    });\n\n    it(`should not allow to enter invalid time using keyboard's input, it should bring back the privous valid value`, () => {\n      const props = {\n        defaultValue: moment('1/25/1982 9:30 AM')\n      };\n      const driver = createDriver(<TimePicker {...props}/>);\n      driver.setValue('99:99');\n      driver.blur();\n      expect(driver.getValue()).toBe(format12Hours(props.defaultValue));\n    });\n\n    it(`should allow toggling between am/pm when in 12 hours mode`, () => {\n      const props = {\n        defaultValue: moment('1/25/1982 9:30 PM'),\n        disableAmPm: false\n      };\n      const driver = createDriver(<TimePicker {...props}/>);\n      expect(driver.getAmPmIndicatorText()).toBe('pm');\n      driver.toggleAmPmIndicator();\n      expect(driver.getAmPmIndicatorText()).toBe('am');\n    });\n  });\n\n  describe('Styling', () => {\n    it(`should not be created in rtl mode by default`, () => {\n      const props = {\n      };\n      const driver = createDriver(<TimePicker {...props}/>);\n      expect(driver.isRtl()).toBeFalsy();\n    });\n\n    it(`should allow to be created in rtl mode`, () => {\n      const props = {\n        rtl: true\n      };\n      const driver = createDriver(<TimePicker {...props}/>);\n      expect(driver.isRtl()).toBeTruthy();\n    });\n  });\n\n  describe('testkit', () => {\n    it('should exist', () => {\n      expect(isTestkitExists(<TimePicker/>, timeInputTestkitFactory)).toBe(true);\n    });\n  });\n\n  describe('enzyme testkit', () => {\n    it('should exist', () => {\n      expect(isEnzymeTestkitExists(<TimePicker/>, enzymeTimeInputTestkitFactory)).toBe(true);\n    });\n  });\n});\n"}});