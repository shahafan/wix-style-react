webpackJsonp([260],{1697:function(module,exports){module.exports="import React from 'react';\nimport MessageBoxFunctionalLayout from './MessageBoxFunctionalLayout';\nimport MessageBoxFunctionalLayoutFactory from './MessageBoxFunctionalLayout.driver';\nimport {createDriverFactory} from '../test-common';\nimport sinon from 'sinon';\nimport {isTestkitExists, isEnzymeTestkitExists} from '../../testkit/test-common';\nimport {messageBoxFunctionalLayoutTestkitFactory} from '../../testkit';\nimport {messageBoxFunctionalLayoutTestkitFactory as enzymeMessageBoxTestkitFactory} from '../../testkit/enzyme';\n\n\ndescribe('MessageBox', () => {\n  const createDriver = createDriverFactory(MessageBoxFunctionalLayoutFactory);\n  describe('action buttons', () => {\n    it('should display the confirmation text on top the confirmation button', () => {\n      const props = {\n        confirmText: 'confirmText'\n      };\n      const driver = createDriver(<MessageBoxFunctionalLayout {...props}/>);\n      expect(driver.getConfirmationButtonText()).toBe(props.confirmText);\n    });\n\n    it('should display the cancellation text on top the cancellation button', () => {\n      const props = {\n        cancelText: 'cancelText'\n      };\n      const driver = createDriver(<MessageBoxFunctionalLayout {...props}/>);\n      expect(driver.getCancellationButtonText()).toBe(props.cancelText);\n    });\n\n    it('should disable cancel button if disabled', () => {\n      const props = {\n        cancelText: 'cancelText',\n        disableCancel: true\n      };\n      const driver = createDriver(<MessageBoxFunctionalLayout {...props}/>);\n      expect(driver.isCancelEnable()).toBeFalsy();\n    });\n\n    it('should disable confirmation button if disabled', () => {\n      const props = {\n        confirmText: 'ok',\n        disableConfirmation: true\n      };\n      const driver = createDriver(<MessageBoxFunctionalLayout {...props}/>);\n      expect(driver.isConfirmationEnable()).toBeFalsy();\n    });\n\n    it('should not display the cancellation button if cancellationText is empty', () => {\n      const props = {\n      };\n      const driver = createDriver(<MessageBoxFunctionalLayout {...props}/>);\n      expect(driver.getCancellationButton()).toBeNull();\n    });\n\n    it(`should trigger the 'onOk' action upon clicking the confirmation button`, () => {\n      const props = {\n        onOk: sinon.spy()\n      };\n      const driver = createDriver(<MessageBoxFunctionalLayout {...props}/>);\n      driver.clickOnConfirmationButton();\n      expect(props.onOk.calledOnce).toBeTruthy();\n    });\n\n    it(`should trigger the 'onCancel' action upon clicking the cancellation button`, () => {\n      const props = {\n        cancelText: 'cancelText',\n        onCancel: sinon.spy()\n      };\n      const driver = createDriver(<MessageBoxFunctionalLayout {...props}/>);\n      driver.clickOnCancellationButton();\n      expect(props.onCancel.calledOnce).toBeTruthy();\n    });\n  });\n\n  describe('closeButton attribute', () => {\n    it('should appear by default', () => {\n      const props = {\n        onCancel: sinon.spy()\n      };\n      const driver = createDriver(<MessageBoxFunctionalLayout {...props}/>);\n      expect(driver.getHeaderCloseButton()).toBeTruthy();\n    });\n\n    it('should not appear', () => {\n      const props = {\n        onCancel: sinon.spy(),\n        closeButton: false\n      };\n      const driver = createDriver(<MessageBoxFunctionalLayout {...props}/>);\n      expect(driver.getHeaderCloseButton()).toBeFalsy();\n    });\n\n    it(`should trigger the 'onCancel' action upon clicking the header close button`, () => {\n      const props = {\n        onCancel: sinon.spy()\n      };\n      const driver = createDriver(<MessageBoxFunctionalLayout {...props}/>);\n      driver.clickOnHeaderCloseButton();\n      expect(props.onCancel.calledOnce).toBeTruthy();\n    });\n\n    it(`should trigger the 'onClose' action upon clicking the close button if 'onClose' prop exists`, () => {\n      const onCancelFunction = sinon.spy();\n      const onCloseFunction = sinon.spy();\n\n      const props = {\n        onCancel: onCancelFunction,\n        onClose: onCloseFunction\n      };\n\n      const driver = createDriver(<MessageBoxFunctionalLayout {...props}/>);\n      driver.clickOnHeaderCloseButton();\n      expect(props.onCancel.calledOnce).toBeFalsy();\n      expect(props.onClose.calledOnce).toBeTruthy();\n    });\n  });\n\n  describe('theme attribute', () => {\n    it('should set the theme by default to \"blue\"', () => {\n      const props = {\n      };\n      const driver = createDriver(<MessageBoxFunctionalLayout {...props}/>);\n      expect(driver.isThemeExist('blue')).toBeTruthy();\n    });\n\n    it('should allowing setting the theme', () => {\n      const props = {\n        theme: 'green'\n      };\n      const driver = createDriver(<MessageBoxFunctionalLayout {...props}/>);\n      expect(driver.isThemeExist('green')).toBeTruthy();\n      expect(driver.isThemeExist('blue')).toBeFalsy();\n    });\n  });\n\n  describe('general', () => {\n\n    it(`should hide the footer`, () => {\n      const props = {\n        hideFooter: true\n      };\n      const driver = createDriver(<MessageBoxFunctionalLayout {...props}/>);\n      expect(driver.getFooter()).toBeNull();\n    });\n\n    it(`should show footer by default`, () => {\n      const props = {\n      };\n      const driver = createDriver(<MessageBoxFunctionalLayout {...props}/>);\n      expect(driver.getFooter()).not.toBeNull();\n    });\n\n    it(`should render title`, () => {\n      const props = {\n        title: 'title'\n      };\n      const driver = createDriver(<MessageBoxFunctionalLayout {...props}/>);\n      expect(driver.getTitle()).toBe(props.title);\n    });\n\n    it(`should render the passed children in the markup`, () => {\n      const props = {\n      };\n      const driver = createDriver(<MessageBoxFunctionalLayout {...props}>\n        <div data-hook=\"inner-div\"/>\n      </MessageBoxFunctionalLayout>);\n      expect(driver.getChildBySelector('[data-hook=\"inner-div\"]')).not.toBeNull();\n    });\n\n    it('should render with zero padding when explicitly asked for', () => {\n      const normalRendering = {};\n      const zeroPaddingRendering = {noBodyPadding: true};\n      const regularDriver = createDriver(<MessageBoxFunctionalLayout {...normalRendering}>\n        <div>Content</div>\n      </MessageBoxFunctionalLayout>);\n      expect(regularDriver.toHaveBodyPadding()).toBeTruthy();\n\n      const zeroPaddingDriver = createDriver(<MessageBoxFunctionalLayout {...zeroPaddingRendering}>\n        <div>Content</div>\n      </MessageBoxFunctionalLayout>);\n      expect(zeroPaddingDriver.toHaveBodyPadding()).toBeFalsy();\n    });\n  });\n\n  describe('testkit', () => {\n    it('should exist', () => {\n      expect(isTestkitExists(<MessageBoxFunctionalLayout/>, messageBoxFunctionalLayoutTestkitFactory)).toBe(true);\n    });\n  });\n\n  describe('enzyme testkit', () => {\n    it('should exist', () => {\n      expect(isEnzymeTestkitExists(<MessageBoxFunctionalLayout/>, enzymeMessageBoxTestkitFactory)).toBe(true);\n    });\n  });\n});\n"}});