webpackJsonp([284],{1673:function(module,exports){module.exports="import React from 'react';\nimport inputAreaDriverFactory from './InputArea.driver';\nimport InputArea from './InputArea';\nimport {createDriverFactory} from '../test-common';\nimport {inputAreaTestkitFactory, tooltipTestkitFactory} from '../../testkit';\nimport {inputAreaTestkitFactory as enzymeInputAreaTestkitFactory} from '../../testkit/enzyme';\nimport sinon from 'sinon';\nimport {isTestkitExists, isEnzymeTestkitExists} from '../../testkit/test-common';\n\ndescribe('InputArea', () => {\n  const createDriver = createDriverFactory(inputAreaDriverFactory);\n\n  const InputAreaForTesting = props => (<InputArea {...props} dataHook=\"textarea-div\"/>);\n\n  describe('value attribute', () => {\n    it('should pass down to the wrapped input', () => {\n      const props = {\n        value: 'hello',\n        onChange: () => {}\n      };\n\n      const driver = createDriver(<InputAreaForTesting {...props}/>);\n      expect(driver.getValue()).toEqual(props.value);\n    });\n  });\n\n  describe('defaultValue attribute', () => {\n    it('should pass down to the wrapped input', () => {\n      const defaultValue = 'hello';\n\n      const driver = createDriver(<InputAreaForTesting defaultValue={defaultValue}/>);\n      expect(driver.getDefaultValue()).toEqual(defaultValue);\n    });\n  });\n\n  describe('rows attribute', () => {\n    it('should pass down to the wrapped input', () => {\n      const rows = 5;\n\n      const driver = createDriver(<InputAreaForTesting rows={rows}/>);\n      expect(driver.getRowsCount()).toEqual(rows);\n    });\n  });\n\n  describe('maxHeight attribute', () => {\n    it('should pass down to the wrapped input', () => {\n      const maxHeight = '50px';\n\n      const driver = createDriver(<InputAreaForTesting maxHeight={maxHeight}/>);\n      expect(driver.getStyle().maxHeight).toEqual(maxHeight);\n    });\n  });\n\n  describe('maxLength attribute', () => {\n    it('should pass down to the wrapped input - with max length', () => {\n      const maxLength = 5;\n\n      const driver = createDriver(<InputAreaForTesting maxLength={maxLength}/>);\n      expect(driver.getMaxLength()).toEqual(maxLength);\n    });\n  });\n\n\n  describe('hasCounter attribute', () => {\n    it('should pass down to the wrapped input', () => {\n      const driver = createDriver(<InputAreaForTesting hasCounter/>);\n      expect(driver.getHasCounter()).toBeTruthy();\n    });\n\n    it('should pass down to the wrapped input with default false value', () => {\n      const driver = createDriver(<InputAreaForTesting/>);\n      expect(driver.getHasCounter()).toBeFalsy();\n    });\n  });\n\n  describe('resizable attribute', () => {\n    it('should pass down to the wrapped input', () => {\n      const driver = createDriver(<InputAreaForTesting resizable/>);\n      expect(driver.getResizable()).toBeTruthy();\n    });\n\n    it('should pass down to the wrapped input with default false value', () => {\n      const driver = createDriver(<InputAreaForTesting/>);\n      expect(driver.getResizable()).toBeFalsy();\n    });\n  });\n\n  describe('rows attribute', () => {\n    it('should pass down to the wrapped input', () => {\n      const rows = 5;\n\n      const driver = createDriver(<InputAreaForTesting rows={rows}/>);\n      expect(driver.getRowsCount()).toEqual(rows);\n    });\n  });\n\n  describe('tabIndex attribute', () => {\n    it('should pass down to the wrapped input', () => {\n      const tabIndex = 1;\n\n      const driver = createDriver(<InputAreaForTesting tabIndex={tabIndex}/>);\n      expect(driver.getTabIndex()).toEqual(tabIndex);\n    });\n  });\n\n  describe('readOnly attribute', () => {\n    it('should pass down to the wrapped input', () => {\n      const driver = createDriver(<InputAreaForTesting readOnly/>);\n      expect(driver.getReadOnly()).toBeTruthy();\n    });\n\n    it('should pass down to the wrapped input with default false value', () => {\n      const driver = createDriver(<InputAreaForTesting/>);\n      expect(driver.getReadOnly()).toBeFalsy();\n    });\n  });\n\n  describe('error attribute', () => {\n    it('should display an error icon if error is true', () => {\n      const driver = createDriver(<InputAreaForTesting error/>);\n\n      expect(driver.hasError()).toBeTruthy();\n    });\n  });\n\n  describe('onChange attribute', () => {\n    it('should be called when text is entered to the input', () => {\n\n      const onChange = jest.fn();\n      const event = {target: {value: 'world'}};\n\n      const driver = createDriver(<InputAreaForTesting onChange={onChange}/>);\n\n      driver.trigger('change', event);\n\n      expect(onChange).toBeCalled();\n    });\n  });\n\n  describe('onKeyUp attribute', () => {\n    it('should be called after keybord key got pressed and then released', () => {\n      const onKeyUp = jest.fn();\n      const event = {target: {value: 'world'}};\n\n      const driver = createDriver(<InputAreaForTesting onKeyUp={onKeyUp}/>);\n\n      driver.trigger('keyUp', event);\n\n      expect(onKeyUp).toBeCalled();\n    });\n  });\n\n  describe('onFocus attribute', () => {\n    it('should be called when the input gets focused', () => {\n      const onFocus = jest.fn();\n      const driver = createDriver(<InputAreaForTesting onFocus={onFocus}/>);\n\n      driver.trigger('focus');\n\n      expect(onFocus).toBeCalled();\n    });\n  });\n\n  describe('onBlur attribute', () => {\n    it('should be called when the input gets blured', () => {\n      const onBlur = jest.fn();\n      const driver = createDriver(<InputAreaForTesting onBlur={onBlur}/>);\n\n      driver.trigger('blur');\n\n      expect(onBlur).toBeCalled();\n    });\n  });\n\n  describe('onKeyDown attribute', () => {\n    it('should be called when text is entered to the wrapped input', () => {\n      const onKeyDown = jest.fn();\n      const event = {keyCode: 40};\n\n      const driver = createDriver(<InputAreaForTesting onKeyDown={onKeyDown}/>);\n\n      driver.trigger('keyDown', event);\n\n      expect(onKeyDown).toBeCalled();\n    });\n  });\n\n  describe('onEnter attribute', () => {\n    it('should be called when text is entered to the wrapped input', () => {\n      const onEnterPressed = jest.fn();\n      const event = {key: 'Enter', keyCode: 13, which: 13};\n\n      const driver = createDriver(<InputAreaForTesting onEnterPressed={onEnterPressed}/>);\n\n      driver.trigger('keyDown', event);\n\n      expect(onEnterPressed).toBeCalled();\n    });\n  });\n\n  describe('forceFocus attribute', () => {\n    it('should have focus class on input if forceFocus is true', () => {\n      const driver = createDriver(<InputAreaForTesting forceFocus/>);\n      expect(driver.isFocusedStyle()).toBeTruthy();\n    });\n  });\n\n  describe('forceHover attribute', () => {\n    it('should have hover class on input if forceHover is true', () => {\n      const driver = createDriver(<InputAreaForTesting forceHover/>);\n      expect(driver.isHoveredStyle()).toBeTruthy();\n    });\n\n    it('should be hovered if forceFocus is false and forceHover is true', () => {\n      const driver = createDriver(<InputAreaForTesting forceHover forceFocus={false}/>);\n      expect(driver.isHoveredStyle()).toBeTruthy();\n    });\n  });\n\n  describe('autoFocus attribute', () => {\n    it('Mounting an input element with autoFocus=false, should give it the focus', () => {\n      let autoFocus = false;\n      const driver = createDriver(<InputAreaForTesting autoFocus={false}/>);\n      expect(driver.isFocus()).toBeFalsy();\n      autoFocus = true;\n      driver.setProps({autoFocus});\n      expect(driver.isFocus()).toBeFalsy();\n    });\n\n    it('Mounting an input element with autoFocus=true, gives it the focus', () => {\n      const driver = createDriver(<InputAreaForTesting autoFocus/>);\n      expect(driver.isFocus()).toBeTruthy();\n    });\n  });\n\n  describe('focus function', () => {\n    it('calling focus should give focus to the input', () => {\n      const driver = createDriver(<InputAreaForTesting autoFocus={false}/>);\n      expect(driver.isFocus()).toBeFalsy();\n      driver.focus();\n      expect(driver.isFocus()).toBeTruthy();\n    });\n  });\n\n  describe('theme attribute', () => {\n    it('should set the theme by default to \"normal\"', () => {\n      const driver = createDriver(<InputAreaForTesting/>);\n      expect(driver.isOfStyle('normal')).toBeTruthy();\n    });\n\n    it('should allowing setting the theme to \"paneltitle\"', () => {\n      const driver = createDriver(<InputAreaForTesting theme=\"paneltitle\"/>);\n      expect(driver.isOfStyle('paneltitle')).toBeTruthy();\n    });\n\n    it('should allow setting the theme to \"material\"', () => {\n      const driver = createDriver(<InputAreaForTesting theme=\"material\"/>);\n      expect(driver.isOfStyle('material')).toBeTruthy();\n    });\n  });\n\n  describe('aria attributes', () => {\n    const createDriver = createDriverFactory(inputAreaDriverFactory);\n\n    it('should allow adding a custom aria-label', () => {\n      const driver = createDriver(<InputAreaForTesting ariaLabel=\"hello\"/>);\n      expect(driver.getAriaLabel()).toBe('hello');\n    });\n\n    it('should not have any aria label buy default', () => {\n      const driver = createDriver(<InputAreaForTesting/>);\n      expect(driver.getAriaLabel()).toBeNull;\n    });\n\n    it('should allow adding aria-controls', () => {\n      const driver = createDriver(<InputAreaForTesting ariaControls=\"id\"/>);\n      expect(driver.getAriaControls()).toBe('id');\n    });\n\n    it('should not have any aria controls buy default', () => {\n      const driver = createDriver(<InputAreaForTesting/>);\n      expect(driver.getAriaControls()).toBeNull;\n    });\n\n    it('should allow adding aria-controls', () => {\n      const driver = createDriver(<InputAreaForTesting ariaDescribedby=\"blabla\"/>);\n      expect(driver.getAriaDescribedby()).toBe('blabla');\n    });\n\n    it('should not have any aria controls buy default', () => {\n      const driver = createDriver(<InputAreaForTesting/>);\n      expect(driver.getAriaDescribedby()).toBeNull;\n    });\n\n  });\n\n\n  describe('test tooltip', () => {\n\n    const resolveIn = timeout =>\n      new Promise(resolve => {\n        setTimeout(() => {\n          resolve({});\n        }, timeout);\n      });\n\n    describe('onTooltipShow attribute', () => {\n      it('should not display the tooltip by default', () => {\n        const driver = createDriver(<InputAreaForTesting error errorMessage=\"I'm the error message\"/>);\n        const dataHook = driver.getTooltipDataHook();\n        const wrapper = driver.getTooltipElement();\n        const tooltipDriver = tooltipTestkitFactory({wrapper, dataHook});\n\n        return resolveIn(500).then(() => {\n          expect(tooltipDriver.isShown()).toBe(false);\n        });\n      });\n\n      it('should display the tooltip on mouse hover', () => {\n        const driver = createDriver(<InputAreaForTesting error errorMessage=\"I'm the error message\"/>);\n        const dataHook = driver.getTooltipDataHook();\n        const wrapper = driver.getTooltipElement();\n        const tooltipDriver = tooltipTestkitFactory({wrapper, dataHook});\n        tooltipDriver.mouseEnter();\n\n        return resolveIn(500).then(() => {\n          expect(tooltipDriver.getContent()).toBe('I\\'m the error message');\n        });\n      });\n\n      it('should call onTooltipShow callback when error tooltip become active', () => {\n        const onTooltipShow = sinon.spy();\n        const driver = createDriver(<InputAreaForTesting error errorMessage=\"I'm the error message\" onTooltipShow={onTooltipShow}/>);\n        const dataHook = driver.getTooltipDataHook();\n        const wrapper = driver.getTooltipElement();\n        const tooltipDriver = tooltipTestkitFactory({wrapper, dataHook});\n        tooltipDriver.mouseEnter();\n\n        return resolveIn(500).then(() => {\n          expect(onTooltipShow.calledOnce).toBeTruthy();\n        });\n      });\n    });\n\n    describe('tooltipPlacement attribute', () => {\n      ['top', 'bottom', 'left', 'right'].forEach(placement => {\n        it(`should have a tooltip positioned to the ${placement}`, () => {\n          const driver = createDriver(<InputAreaForTesting error errorMessage=\"I'm the error message\" tooltipPlacement={placement}/>);\n          const dataHook = driver.getTooltipDataHook();\n          const wrapper = driver.getTooltipElement();\n          const tooltipDriver = tooltipTestkitFactory({wrapper, dataHook});\n          tooltipDriver.mouseEnter();\n\n          return resolveIn(500).then(() => {\n            expect(tooltipDriver.getPlacement()).toBe(placement);\n          });\n        });\n      });\n    });\n  });\n});\n\ndescribe('testkit', () => {\n  it('should exist', () => {\n    const value = 'hello';\n    const onChange = () => {};\n    expect(isTestkitExists(<InputArea dataHook=\"texarea-div\" value={value} onChange={onChange}/>, inputAreaTestkitFactory)).toBe(true);\n  });\n});\n\ndescribe('enzyme testkit', () => {\n  it('should exist', () => {\n    const value = 'hello';\n    const onChange = () => {};\n    expect(isEnzymeTestkitExists(<InputArea dataHook=\"texarea-div\" value={value} onChange={onChange}/>, enzymeInputAreaTestkitFactory)).toBe(true);\n  });\n});\n"}});