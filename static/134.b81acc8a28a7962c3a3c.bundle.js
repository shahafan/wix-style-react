webpackJsonp([134],{1823:function(module,exports){module.exports="import React from 'react';\nimport Tag from './Tag';\nimport tagDriverFactory from './Tag.driver';\nimport {createDriverFactory} from '../test-common';\nimport {tagTestkitFactory} from '../../testkit';\nimport {tagTestkitFactory as enzymeTagTestkitFactory} from '../../testkit/enzyme';\nimport {isTestkitExists, isEnzymeTestkitExists} from '../../testkit/test-common';\n\ndescribe('Tag', () => {\n\n  const createDriver = createDriverFactory(tagDriverFactory);\n  const id = 'myId', label = 'Hey', onRemove = jest.fn();\n\n  it('should have a default small size', () => {\n    const driver = createDriver(<Tag id={id}>{label}</Tag>);\n    expect(driver.isLarge()).toBeFalsy();\n  });\n\n  it('should have a large size', () => {\n    const driver = createDriver(<Tag id={id} size=\"large\">{label}</Tag>);\n    expect(driver.isLarge()).toBeTruthy();\n  });\n\n  it('should have a label', () => {\n    const driver = createDriver(<Tag id={id}>{label}</Tag>);\n    expect(driver.getLabel()).toBe(label);\n  });\n\n  it('should be removable by default', () => {\n    const driver = createDriver(<Tag id={id}>{label}</Tag>);\n    expect(driver.isRemovable()).toBeTruthy();\n  });\n\n  it('should not be removable', () => {\n    const driver = createDriver(<Tag id={id} removable={false}>{label}</Tag>);\n    expect(driver.isRemovable()).toBeFalsy();\n  });\n\n  it('should have not remove button if disabled is true', () => {\n    const driver = createDriver(<Tag id={id} disabled>{label}</Tag>);\n    expect(driver.isRemovable()).toBeFalsy();\n  });\n\n  it('should have disabled class if disabled is true', () => {\n    const driver = createDriver(<Tag id={id} disabled>{label}</Tag>);\n    expect(driver.isDisabled()).toBeTruthy();\n  });\n\n  it('should call onRemove function on remove', () => {\n    const driver = createDriver(<Tag id={id} onRemove={onRemove}>{label}</Tag>);\n\n    driver.removeTag();\n    expect(onRemove).toBeCalledWith(id);\n  });\n\n  it('should not display thumb by default', () => {\n    const driver = createDriver(<Tag id={id}>{label}</Tag>);\n    expect(driver.isThumbExists()).toBeFalsy();\n  });\n\n  it('should display thumb', () => {\n    const driver = createDriver(<Tag id={id} thumb={<span>Ho</span>}>{label}</Tag>);\n    expect(driver.isThumbExists()).toBeTruthy();\n  });\n\n  it('should wrap label text', () => {\n    const longLabel = 'Very very very very very very very very long label';\n    const driver = createDriver(<Tag id={id} wrap>{longLabel}</Tag>);\n\n    expect(driver.getTitle()).toBe(longLabel);\n    expect(driver.getLabel()).toBe(longLabel);\n    expect(driver.isWrapped()).toBe(true);\n  });\n\n  describe('theme attribute', () => {\n    it('should have standard theme by default', () => {\n      const driver = createDriver(<Tag id={id}>a</Tag>);\n      expect(driver.isStandardTheme()).toBe(true);\n    });\n\n    it('should have warning theme', () => {\n      const driver = createDriver(<Tag id={id} theme=\"warning\">a</Tag>);\n      expect(driver.isWarningTheme()).toBe(true);\n    });\n\n    it('should have error theme', () => {\n      const driver = createDriver(<Tag id={id} theme=\"error\">a</Tag>);\n      expect(driver.isErrorTheme()).toBe(true);\n    });\n  });\n\n  describe('testkit', () => {\n    it('should exist', () => {\n      const id = 'hello';\n      expect(isTestkitExists(<Tag id={id}>a</Tag>, tagTestkitFactory)).toBe(true);\n    });\n  });\n\n  describe('enzyme testkit', () => {\n    it('should exist', () => {\n      const id = 'hello';\n      expect(isEnzymeTestkitExists(<Tag id={id}>a</Tag>, enzymeTagTestkitFactory)).toBe(true);\n    });\n  });\n});\n"}});