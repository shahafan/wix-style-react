webpackJsonp([235],{1722:function(module,exports){module.exports="import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactTestUtils from 'react-dom/test-utils';\n\nconst notificationDriverFactory = ({element, wrapper, component}) => {\n  const notificationWrapperSelector = '[data-hook=\"notification-wrapper\"]';\n  const labelTextSelector = '[data-hook=\"notification-label\"]';\n  const actionButtonSelector = '[data-hook=\"notification-cta-button\"]';\n  const closeButtonSelector = '[data-hook=\"notification-close-button\"]';\n\n  const classExists = className => element.querySelector(notificationWrapperSelector).classList.contains(className);\n\n  return {\n    exists: () => !!element,\n    visible: () => !!element.querySelector(notificationWrapperSelector),\n    hasTheme: theme => classExists(`${theme}Theme`),\n    isStandardNotification: () => classExists('standardTheme'),\n    isErrorNotification: () => classExists('errorTheme'),\n    isSuccessNotification: () => classExists('successTheme'),\n    isWarningNotification: () => classExists('warningTheme'),\n    isPremiumNotification: () => classExists('premiumTheme'),\n    isSmallSize: () => classExists('smallSize'),\n    isBigSize: () => classExists('bigSize'),\n    getLabelText: () => element.querySelector(labelTextSelector).textContent,\n    hasActionButton: () => !!element.querySelector(actionButtonSelector),\n    getActionButtonText: () => element.querySelector(actionButtonSelector).textContent,\n    hasCloseButton: () => !!element.querySelector('[data-hook=\"notification-close-button\"]'),\n    isRelativelyPositioned: () => classExists('relativePosition'),\n    isFixedPositioned: () => classExists('fixedPosition'),\n    isAbsolutePositioned: () => classExists('absolutePosition'),\n    clickOnCloseButton: () => ReactTestUtils.Simulate.click(element.querySelector(closeButtonSelector)),\n    clickOnActionButton: () => ReactTestUtils.Simulate.click(element.querySelector(actionButtonSelector)),\n    getZIndex: () => Number(element.querySelector(notificationWrapperSelector).style['z-index']),\n    setProps: props => {\n      const ClonedWithProps = React.cloneElement(component, Object.assign({}, component.props, props), ...(component.props.children || []));\n      ReactDOM.render(<div ref={r => element = r}>{ClonedWithProps}</div>, wrapper);\n    }\n  };\n};\n\nexport default notificationDriverFactory;\n"}});