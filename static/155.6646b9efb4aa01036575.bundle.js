webpackJsonp([155],{1802:function(module,exports){module.exports="import React from 'react';\nimport ReactTestUtils from 'react-dom/test-utils';\nimport FloatingTabs from './FloatingTabs';\nimport FloatingTabItem from '../FloatingTabItem/FloatingTabItem';\nimport {tpaFloatingTabsTestkitFactory as floatingTabsTestkitFactory} from '../../../testkit';\n\ndescribe('FloatingTabs', () => {\n\n  it('should exist', () => {\n\n    const div = document.createElement('div');\n    const dataHook = 'myDataHook';\n    const wrapper = div.appendChild(ReactTestUtils.renderIntoDocument(\n      <div>\n        <FloatingTabs dataHook={dataHook}>\n          <FloatingTabItem id=\"first\">1</FloatingTabItem>\n          <FloatingTabItem id=\"second\">2</FloatingTabItem>\n        </FloatingTabs>\n      </div>\n    ));\n    const floatingTabsTestkit = floatingTabsTestkitFactory({wrapper, dataHook});\n    expect(floatingTabsTestkit.exists()).toBeTruthy();\n    expect(floatingTabsTestkit.activeContent()).toEqual('1');\n  });\n\n  it('should first button have proper title', () => {\n    const div = document.createElement('div');\n    const dataHook = 'myDataHook';\n    const wrapper = div.appendChild(ReactTestUtils.renderIntoDocument(\n      <div>\n        <FloatingTabs dataHook={dataHook}>\n          <FloatingTabItem id=\"first\" title=\"Tab One\">1</FloatingTabItem>\n          <FloatingTabItem id=\"second\" title=\"Tab Two\">2</FloatingTabItem>\n        </FloatingTabs>\n      </div>\n    ));\n    const floatingTabsTestkit = floatingTabsTestkitFactory({wrapper, dataHook});\n    expect(floatingTabsTestkit.isButtonByIdExists('first')).toBe(true);\n    expect(floatingTabsTestkit.isButtonByIdExists('second')).toBe(true);\n    expect(floatingTabsTestkit.getButtonTextById('first')).toBe('Tab One');\n  });\n\n  it('should have active and inactive buttons', () => {\n    const div = document.createElement('div');\n    const dataHook = 'myDataHook';\n    const wrapper = div.appendChild(ReactTestUtils.renderIntoDocument(\n      <div>\n        <FloatingTabs activeId=\"first\" dataHook={dataHook}>\n          <FloatingTabItem id=\"first\" title=\"Tab One\">1</FloatingTabItem>\n          <FloatingTabItem id=\"second\" title=\"Tab Two\">2</FloatingTabItem>\n        </FloatingTabs>\n      </div>\n    ));\n    const floatingTabsTestkit = floatingTabsTestkitFactory({wrapper, dataHook});\n    expect(floatingTabsTestkit.isButtonActive('first')).toBe(true);\n    expect(floatingTabsTestkit.isButtonActive('second')).toBe(false);\n  });\n\n  it('should have default selected tab', () => {\n    const div = document.createElement('div');\n    const dataHook = 'myDataHook';\n    const wrapper = div.appendChild(ReactTestUtils.renderIntoDocument(\n      <div>\n        <FloatingTabs dataHook={dataHook} activeTabClassName=\"activeClass\">\n          <FloatingTabItem id=\"first\" title=\"Tab One\">1</FloatingTabItem>\n          <FloatingTabItem id=\"second\" title=\"Tab Two\">2</FloatingTabItem>\n        </FloatingTabs>\n      </div>\n    ));\n    const floatingTabsTestkit = floatingTabsTestkitFactory({wrapper, dataHook});\n    expect(floatingTabsTestkit.isButtonActive('first')).toBe(true);\n    expect(floatingTabsTestkit.isButtonActive('second')).toBe(false);\n\n    expect(floatingTabsTestkit.activeContent()).toEqual('1');\n  });\n\n  it('should be able to click and select tab', () => {\n    const onChangeMock = jest.fn();\n    const div = document.createElement('div');\n    const dataHook = 'myDataHook';\n    const wrapper = div.appendChild(ReactTestUtils.renderIntoDocument(\n      <div>\n        <FloatingTabs dataHook={dataHook} onChange={onChangeMock}>\n          <FloatingTabItem id=\"first\" title=\"Tab One\">1</FloatingTabItem>\n          <FloatingTabItem id=\"second\" title=\"Tab Two\">2</FloatingTabItem>\n        </FloatingTabs>\n      </div>\n    ));\n    const floatingTabsTestkit = floatingTabsTestkitFactory({wrapper, dataHook});\n    floatingTabsTestkit.clickButtonById('second');\n    expect(onChangeMock).toHaveBeenCalledWith('second');\n  });\n\n  it('should put custom class to active tab', () => {\n    const div = document.createElement('div');\n    const dataHook = 'myDataHook';\n    const wrapper = div.appendChild(ReactTestUtils.renderIntoDocument(\n      <div>\n        <FloatingTabs dataHook={dataHook} activeTabClassName=\"activeClass\" activeId=\"second\">\n          <FloatingTabItem id=\"first\" title=\"Tab One\">1</FloatingTabItem>\n          <FloatingTabItem id=\"second\" title=\"Tab Two\">2</FloatingTabItem>\n        </FloatingTabs>\n      </div>\n    ));\n    const floatingTabsTestkit = floatingTabsTestkitFactory({wrapper, dataHook});\n\n    expect(floatingTabsTestkit.isButtonHasClass('second', 'activeClass')).toBe(true);\n    expect(floatingTabsTestkit.isButtonHasClass('first', 'activeClass')).toBe(false);\n  });\n});\n"}});