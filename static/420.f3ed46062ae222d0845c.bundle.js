webpackJsonp([420],{1537:function(module,exports){module.exports="import 'react';\nimport {componentFactory} from './GoogleAddressInput.driver';\nimport _ from 'lodash/fp';\nimport sinon from 'sinon';\nimport waitFor from 'wait-for-cond';\n\nconst GEOCODE_RESULT = JSON.parse('{\"formatted_address\":\"_formatted_address_\",\"address_components\":[{\"types\":[\"street_number\"],\"long_name\":123}]}');\nGEOCODE_RESULT.geometry = {\n  location: {\n    lat: () => 31.12,\n    lng: () => 33.34\n  }\n};\n\nconst buildResult = originValue => {\n  return {\n    originValue,\n    googleResult: GEOCODE_RESULT,\n    address: {\n      approximate: true,\n      latLng: {\n        lat: 31.12,\n        lng: 33.34\n      },\n      number: 123,\n      formatted: '_formatted_address_'\n    }\n  };\n};\n\nexport class GmapsTestClient {\n  autocomplete({request}) {\n\n    if (request.input === 'dontfind') {\n      return Promise.resolve([]);\n    }\n\n    return Promise.resolve([\n      {description: JSON.stringify(request) + ' - 1'},\n      {description: JSON.stringify(request) + ' - 2'}\n    ]);\n  }\n\n  geocode({request}) {\n    const {address, placeId} = request;\n    if (address || placeId) {\n      return Promise.resolve(\n        [_.extend({}, GEOCODE_RESULT, {__called__: JSON.stringify(request)})]\n      );\n    }\n    throw new Error('geocode() request params are malformed');\n  }\n}\n\ndescribe('GoogleAddressInput', () => {\n  const {createShallow, createMount} = componentFactory();\n\n  describe('appearance', () => {\n    it('should show magnifying glass by default', () => {\n      const component = createShallow({Client: GmapsTestClient});\n      expect(component.find('InputWithOptions').props().magnifyingGlass).toEqual(true);\n    });\n\n    it('should allow hiding magnifying glass', () => {\n      const component = createShallow({Client: GmapsTestClient, magnifyingGlass: false});\n      expect(component.find('InputWithOptions').props().magnifyingGlass).toEqual(false);\n    });\n\n    it('should allow setting theme for the nested input', () => {\n      const component = createShallow({Client: GmapsTestClient, theme: 'material'});\n      expect(component.find('InputWithOptions').props().theme).toEqual('material');\n    });\n\n    it('should allow the input to be readOnly', () => {\n      const component = createShallow({Client: GmapsTestClient, readOnly: true});\n      expect(component.find('InputWithOptions').props().readOnly).toEqual(true);\n    });\n\n    it('should show a footer', () => {\n      const component = createShallow({Client: GmapsTestClient, readOnly: true, footer: 'foo bar', footerOptions: {overrideStyle: true, disabled: true}});\n\n      expect(component.find('InputWithOptions').props().options).toEqual([{\n        id: 0,\n        value: 'foo bar',\n        overrideStyle: true,\n        disabled: true\n      }]);\n    });\n\n    it('should show the powered by google footer', () => {\n      const component = createMount({Client: GmapsTestClient, poweredByGoogle: true});\n      expect(component.find('[data-hook=\"google-footer\"]').exists()).toEqual(true);\n    });\n\n    it('should not show the powered by google footer', () => {\n      const component = createShallow({Client: GmapsTestClient});\n      expect(component.find('[data-hook=\"google-footer\"]').exists()).toEqual(false);\n    });\n  });\n\n  describe('User Interactions', () => {\n\n    it('should specify autoSelect as default option', () => {\n      const component = createMount({Client: GmapsTestClient, countryCode: 'XX'});\n      expect(component.find('InputWithOptions').props().autoSelect).toEqual(true);\n    });\n\n    it('should allow to override autoSelect option', () => {\n      const component = createMount({Client: GmapsTestClient, countryCode: 'XX', autoSelect: false});\n      expect(component.find('InputWithOptions').props().autoSelect).toEqual(false);\n    });\n\n    it('should allow focusing input', () => {\n      const component = createMount({Client: GmapsTestClient, countryCode: 'XX'});\n      const input = component.find('input').get(0);\n      sinon.spy(input, 'focus');\n      component.instance().focus();\n      expect(input.focus.calledOnce).toEqual(true);\n    });\n\n    it('should allow selecting input', () => {\n      const component = createMount({Client: GmapsTestClient, countryCode: 'XX'});\n      const input = component.find('input').get(0);\n      sinon.spy(input, 'select');\n      component.instance().select();\n      expect(input.select.calledOnce).toEqual(true);\n    });\n\n    it('If user changes the value in the autocomplete box, request suggestions from google.maps', done => {\n\n      const component = createShallow({Client: GmapsTestClient, countryCode: 'XX'});\n      const event = {target: {value: 'Hatomer 49'}};\n      component.find('InputWithOptions').props().onInput(event);\n\n      // Defer to make sure all promises run\n      _.defer(() => {\n        try {\n          component.update();\n          expect(component.find('InputWithOptions').props().options).toEqual([\n            {id: 0, value: '{\"components\":\"country:XX\",\"input\":\"Hatomer 49\"} - 1'},\n            {id: 1, value: '{\"components\":\"country:XX\",\"input\":\"Hatomer 49\"} - 2'}\n          ]);\n          done();\n        } catch (e) {\n          done.fail(e);\n        }\n      });\n    });\n\n    it('If user pressed <enter> with a suggested value, geocode the suggested value, and call the onSet callback', done => {\n\n      const onSet = sinon.spy();\n\n      const component = createShallow({Client: GmapsTestClient, countryCode: 'XX', onSet});\n      component.setState({suggestions: [JSON.parse('{\"description\": \"my address\", \"place_id\": 123}')]});\n      component.find('InputWithOptions').props().onSelect({id: 0, value: 'my address'});\n\n      // Defer to make sure all promises run\n      _.defer(() => {\n        try {\n          expect(onSet.args[0][0]).toEqual(buildResult('my address'));\n          done();\n        } catch (e) {\n          done.fail(e);\n        }\n      });\n    });\n\n    it('If user pressed <enter> with a value that is not on the suggestions list, try to suggest it and geocode if successful', done => {\n      const onSet = sinon.spy();\n\n      const component = createShallow({Client: GmapsTestClient, countryCode: 'XX', onSet});\n      component.setState({suggestions: [JSON.parse('{\"description\": \"my address\", \"place_id\": 123}')]});\n      component.find('InputWithOptions').props().onManuallyInput('my addr');\n\n      // Defer to make sure all promises run\n      _.defer(() => {\n        try {\n          expect(onSet.args[0][0]).toEqual(buildResult('{\"components\":\"country:XX\",\"input\":\"my addr\"} - 1'));\n          done();\n        } catch (e) {\n          done.fail(e);\n        }\n      });\n    });\n\n    it('If user pressed <enter> with a value that is not on the suggestions list, try to suggest it and return null if unsuccessful', done => {\n      const onSet = sinon.spy();\n      const component = createShallow({Client: GmapsTestClient, countryCode: 'YY', onSet});\n      component.setState({suggestions: [JSON.parse('{\"description\": \"my address\", \"place_id\": 123}')]});\n      component.find('InputWithOptions').props().onManuallyInput('dontfind');\n\n      // Defer to make sure all promises run\n      _.defer(() => {\n        try {\n          expect(onSet.args[0][0]).toEqual(null);\n          done();\n        } catch (e) {\n          done.fail(e);\n        }\n      });\n    });\n\n    it('If user pressed <enter> and there is no value on the suggestions list and fallbackToManual is set to true, search for the value anyway', done => {\n      const onSet = sinon.spy();\n      const component = createShallow({Client: GmapsTestClient, countryCode: 'YY', onSet, fallbackToManual: true});\n      component.setState({suggestions: []});\n      component.find('InputWithOptions').props().onManuallyInput('some address with apartment');\n\n      // Defer to make sure all promises run\n      _.defer(() => {\n        try {\n          expect(onSet.args[0][0]).toEqual(buildResult('{\"components\":\"country:YY\",\"input\":\"some address with apartment\"} - 1'));\n          done();\n        } catch (e) {\n          done.fail(e);\n        }\n      });\n    });\n\n    it('clear suggestions on blur', () => {\n      const component = createShallow({Client: GmapsTestClient, countryCode: 'XX'});\n      component.setState({suggestions: [JSON.parse('{\"description\": \"my address\", \"place_id\": 123}')]});\n      component.find('InputWithOptions').props().onBlur();\n      return waitFor(() => component.find('InputWithOptions').props().options.length === 0);\n    });\n\n    it('don\\'t clear suggestions if clearSuggestionsOnBlur === false', done => {\n      const component = createShallow({Client: GmapsTestClient, countryCode: 'XX', clearSuggestionsOnBlur: false});\n      component.setState({suggestions: [JSON.parse('{\"description\": \"my address\", \"place_id\": 123}')]});\n      component.find('InputWithOptions').props().onBlur();\n      setTimeout(() => {\n        expect(component.find('InputWithOptions').props().options.length).toEqual(1);\n        done();\n      }, 300);\n    });\n  });\n});\n"}});