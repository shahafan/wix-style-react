webpackJsonp([234],{1723:function(module,exports){module.exports="import React, {Children} from 'react';\nimport PropTypes from 'prop-types';\nimport {TransitionGroup, CSSTransition} from 'react-transition-group';\nimport classNames from 'classnames';\nimport css from './Notification.scss';\nimport WixComponent from '../BaseComponents/WixComponent';\nimport {children, once, optional, any} from '../../src/Composite';\nimport CloseButton from './CloseButton';\nimport TextLabel from './TextLabel';\nimport ActionButton from './ActionButton';\n\nexport const LOCAL_NOTIFICATION = 'local';\nexport const GLOBAL_NOTIFICATION = 'global';\nexport const STICKY_NOTIFICATION = 'sticky';\nexport const DEFAULT_TIMEOUT = 6000;\n\nexport const notificationTypeToPosition = {\n  [LOCAL_NOTIFICATION]: 'absolute',\n  [GLOBAL_NOTIFICATION]: 'relative',\n  [STICKY_NOTIFICATION]: 'fixed'\n};\n\nconst animationsTimeouts = {\n  enter: 500,\n  exit: 350\n};\n\nfunction FirstChild(props) {\n  const childrenArray = Children.toArray(props.children);\n  return childrenArray[0] || null;\n}\n\nfunction mapChildren(children) {\n  const childrenArray = Children.toArray(children);\n\n  if (childrenArray.length === 3) {\n    return {\n      label: childrenArray[0],\n      ctaButton: childrenArray[1],\n      closeButton: childrenArray[2]\n    };\n  } else {\n    return {\n      label: childrenArray[0],\n      closeButton: childrenArray[1]\n    };\n  }\n}\n\nclass Notification extends WixComponent {\n  closeTimeout;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hideByCloseClick: false,\n      hideByTimer: false\n    };\n\n    this.startCloseTimer(props);\n  }\n\n  startCloseTimer({type, timeout}) {\n    if (type !== GLOBAL_NOTIFICATION) {\n      this.closeTimeout = setTimeout(() => {\n        this.hideNotificationOnTimeout();\n      }, timeout || DEFAULT_TIMEOUT);\n    }\n  }\n\n  clearCloseTimeout() {\n    if (this.closeTimeout) {\n      clearTimeout(this.closeTimeout);\n      this.closeTimeout = null;\n    }\n  }\n\n  hideNotificationOnCloseClick() {\n    this.setState({hideByCloseClick: true});\n    setTimeout(() => {\n      this.props.onClose && this.props.onClose('hide-by-close-click');\n    }, animationsTimeouts.exit + 100);\n  }\n\n  hideNotificationOnTimeout() {\n    this.setState({hideByTimer: true});\n    setTimeout(() => {\n      this.props.onClose && this.props.onClose('hide-by-timer');\n    }, animationsTimeouts.exit + 100);\n  }\n\n  bypassCloseFlags() {\n    this.setState({\n      hideByCloseClick: false,\n      hideByTimer: false\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.show) {\n      this.bypassCloseFlags();\n      this.clearCloseTimeout();\n      this.startCloseTimer(nextProps);\n    }\n  }\n\n  componentWillUnmount() {\n    this.clearCloseTimeout();\n  }\n\n  shouldShowNotification() {\n    return this.props.show && !this.state.hideByCloseClick && !this.state.hideByTimer;\n  }\n\n  getWrapperClassNames() {\n    const {\n      type,\n      theme,\n      size\n    } = this.props;\n\n    const position = notificationTypeToPosition[type];\n\n    return classNames({\n      [css.notificationWrapper]: true,\n      [css[`${theme}Theme`]]: true,\n      [css[`${size}Size`]]: true,\n      [css[`${position}Position`]]: true\n    });\n  }\n\n  renderLabel(component) {\n    return (\n      <div key=\"label\" className={css.labelWrapper}>\n        {component}\n      </div>\n    );\n  }\n\n  renderActionButton(component) {\n    return (\n      component ?\n        <div key=\"cta\" className={css.ctaButtonWrapper}>\n          {component}\n        </div> :\n        null\n    );\n  }\n\n  renderCloseButton(component) {\n    return (\n      <div\n        data-hook=\"notification-close-button\"\n        key=\"close\"\n        className={css.closeButtonWrapper}\n        onClick={() => this.hideNotificationOnCloseClick()}\n        >\n        {component}\n      </div>\n    );\n  }\n\n  renderNotification() {\n    const {\n      zIndex,\n      children\n    } = this.props;\n\n    const childrenComponents = mapChildren(children);\n\n    return (\n      <CSSTransition\n        classNames={{\n          enter: css.notificationAnimationEnter,\n          enterActive: css.notificationAnimationEnterActive,\n          exit: css.notificationAnimationExit,\n          exitActive: css.notificationAnimationExitActive\n        }}\n        timeout={animationsTimeouts}\n        >\n        <div\n          data-hook=\"notification-wrapper\"\n          className={this.getWrapperClassNames()}\n          style={{zIndex}}\n          >\n          <div className={css.contentWrapper}>\n            {this.renderLabel(childrenComponents.label)}\n            {this.renderActionButton(childrenComponents.ctaButton)}\n          </div>\n          {this.renderCloseButton(childrenComponents.closeButton)}\n        </div>\n      </CSSTransition>\n    );\n  }\n\n  render() {\n    return (\n      <div className={css.notificationComponent}>\n        <TransitionGroup component={FirstChild}>\n          {this.shouldShowNotification() ? this.renderNotification() : null}\n        </TransitionGroup>\n      </div>\n    );\n  }\n}\n\nNotification.propTypes = {\n  show: PropTypes.bool,\n  theme: PropTypes.oneOf(['standard', 'error', 'success', 'warning', 'premium']),\n  size: PropTypes.oneOf(['small', 'big']),\n  type: PropTypes.oneOf([GLOBAL_NOTIFICATION, LOCAL_NOTIFICATION, STICKY_NOTIFICATION]),\n  timeout: PropTypes.number,\n  zIndex: PropTypes.number,\n  onClose: PropTypes.func,\n  children: children(once(TextLabel), any(/*ActionButton or CloseButton*/), optional(CloseButton))\n};\n\nNotification.defaultProps = {\n  theme: 'standard',\n  size: 'small',\n  type: GLOBAL_NOTIFICATION,\n  onClose: null\n};\n\nNotification.CloseButton = CloseButton;\nNotification.TextLabel = TextLabel;\nNotification.ActionButton = ActionButton;\n\nexport default Notification;\n"}});