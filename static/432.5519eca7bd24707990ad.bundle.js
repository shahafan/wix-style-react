webpackJsonp([432],{1525:function(module,exports){module.exports="import React from 'react';\nimport sinon from 'sinon';\nimport ReactTestUtils from 'react-dom/test-utils';\nimport editableSelectorDriverFactory from './EditableSelector.driver';\nimport {createDriverFactory} from '../test-common';\nimport {editableSelectorTestkitFactory} from '../../testkit';\nimport EditableSelector from './EditableSelector';\nimport {editableSelectorTestkitFactory as enzymeEditableSelectorTestkitFactory} from '../../testkit/enzyme';\nimport {mount} from 'enzyme';\n\ndescribe('EditableSelector', () => {\n  const createDriver = createDriverFactory(editableSelectorDriverFactory);\n  let props;\n\n  beforeEach(() => {\n    props = {};\n  });\n\n  it('should have a list of selectors', () => {\n    props.options = [{title: 'a'}, {title: 'b'}];\n    const driver = createDriver(<EditableSelector {...props}/>);\n    expect(driver.items().length).toEqual(props.options.length);\n  });\n\n  it('should have all selector data ', () => {\n    props.options = [{isSelected: true, title: 'Shir', onToggle: () => {}}];\n    const driver = createDriver(<EditableSelector {...props}/>);\n    const selector = driver.items()[0];\n    expect(selector.isChecked()).toEqual(props.options[0].isSelected);\n    expect(selector.getTitle()).toEqual(props.options[0].title);\n  });\n\n  it('should render a title', () => {\n    props.title = 'I\\'m a Title';\n    const driver = createDriver(<EditableSelector {...props}/>);\n    expect(driver.title()).toEqual(props.title);\n  });\n\n  it('should render \"add row\" button', () => {\n    props.newRowLabel = 'add new!';\n    const driver = createDriver(<EditableSelector {...props}/>);\n    expect(driver.newRowButton().text()).toEqual(props.newRowLabel);\n  });\n\n  it('should call onOptionAdded', () => {\n    props.onOptionAdded = sinon.spy();\n    const driver = createDriver(<EditableSelector {...props}/>);\n    const newTitle = 'new option';\n    driver.addNewRow(newTitle);\n    driver.clickApprove();\n    expect(props.onOptionAdded.calledWith({newTitle})).toEqual(true);\n  });\n\n  it('should exit editing mode after approve click', () => {\n    const driver = createDriver(<EditableSelector {...props}/>);\n    const label = 'new option';\n    driver.addNewRow(label);\n    driver.clickApprove();\n    expect(driver.isEditing()).toEqual(false);\n  });\n\n  it('should exit editing mode after cancel click', () => {\n    const driver = createDriver(<EditableSelector {...props}/>);\n    const label = 'new option';\n    driver.addNewRow(label);\n    driver.clickCancel();\n    expect(driver.isEditing()).toEqual(false);\n  });\n\n  it('should have edit and delete actions for each option', () => {\n    props.options = [{isSelected: false, title: 'Shir'}];\n    const driver = createDriver(<EditableSelector {...props}/>);\n    expect(driver.deleteButtonAt(0).length).toEqual(1);\n    expect(driver.editButtonAt(0).length).toEqual(1);\n  });\n\n  it('should get \"edit\" button text from props', () => {\n    props.options = [{isSelected: false, title: 'Shir'}];\n    props.editButtonText = 'Edit Label';\n    const driver = createDriver(<EditableSelector {...props}/>);\n    expect(driver.editButtonAt(0).text()).toEqual(props.editButtonText);\n  });\n\n  it('should call onOptionEdit', () => {\n    props.options = [{isSelected: false, title: 'Shir', onToggle: () => {}}];\n    props.onOptionEdit = sinon.spy();\n    const driver = createDriver(<EditableSelector {...props}/>);\n    const newTitle = 'yo';\n    driver.editRow(0, newTitle);\n    driver.clickApprove();\n    expect(props.onOptionEdit.calledWith({newTitle, index: 0})).toEqual(true);\n  });\n\n  it('should call onOptionToggle', () => {\n    props.options = [{isSelected: false, title: 'Shir'}];\n    props.onOptionToggle = sinon.spy();\n    const driver = createDriver(<EditableSelector {...props}/>);\n    driver.toggleItem(0);\n    expect(props.onOptionToggle.calledOnce).toEqual(true);\n    expect(props.onOptionToggle.calledWith(0)).toBe(true);\n  });\n\n  it('should call onOptionDelete', () => {\n    props.options = [{isSelected: false, title: 'Shir', onToggle: () => {}}];\n    props.onOptionDelete = sinon.spy();\n    const driver = createDriver(<EditableSelector {...props}/>);\n    driver.deleteRow(0);\n    expect(props.onOptionDelete.calledWith({index: 0})).toEqual(true);\n  });\n\n  it('should use checkbox toggles', () => {\n    props.toggleType = 'checkbox';\n    props.options = [{isSelected: false, title: 'Shir'}];\n    const driver = createDriver(<EditableSelector {...props}/>);\n    const selector = driver.items()[0];\n    expect(selector.toggleType()).toEqual(props.toggleType);\n  });\n\n  it('should use radio toggles', () => {\n    props.toggleType = 'radio';\n    props.options = [{isSelected: false, title: 'Shir'}];\n    const driver = createDriver(<EditableSelector {...props}/>);\n    const selector = driver.items()[0];\n    expect(selector.toggleType()).toEqual(props.toggleType);\n  });\n\n  describe('testkit', () => {\n    it('should exist', () => {\n      const div = document.createElement('div');\n      const dataHook = 'myDataHook';\n      const wrapper = div.appendChild(ReactTestUtils.renderIntoDocument(<div><EditableSelector {...props} dataHook={dataHook}/></div>));\n      const editableSelectorTestkit = editableSelectorTestkitFactory({wrapper, dataHook});\n      expect(editableSelectorTestkit.exists()).toBeTruthy();\n    });\n  });\n\n  describe('enzyme testkit', () => {\n    it('should exist', () => {\n      const dataHook = 'myDataHook';\n      const wrapper = mount(<EditableSelector {...props} dataHook={dataHook}/>);\n      const editableSelectorTestkit = enzymeEditableSelectorTestkitFactory({wrapper, dataHook});\n      expect(editableSelectorTestkit.exists()).toBeTruthy();\n    });\n  });\n});\n"}});