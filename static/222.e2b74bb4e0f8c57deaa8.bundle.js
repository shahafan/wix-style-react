webpackJsonp([222],{1735:function(module,exports){module.exports="import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactTestUtils from 'react-dom/test-utils';\nimport toArray from 'lodash/toArray';\nimport {isClassExists} from '../../test/utils';\n\nconst radioGroupDriverFactory = ({element, wrapper, component}) => {\n  const radios = toArray(element.children) || [];\n  const radioButtons = radios.map(radio => radio.childNodes[0]);\n  const labels = radios.map(radio => radio.childNodes[1]);\n  const selectedRadio = radios.find(radio => radio.childNodes[0].checked);\n  const getRadioByValue = value => radioButtons.find(radioButton => radioButton.value === value.toString());\n\n  return {\n    exists: () => !!element,\n    selectByValue: value => ReactTestUtils.Simulate.change(getRadioByValue(value)),\n    selectByIndex: index => ReactTestUtils.Simulate.change(radioButtons[index]),\n    getRadioValueAt: index => radioButtons[index].value,\n    getSelectedValue: () => selectedRadio ? selectedRadio.childNodes[0].value : null,\n    getClassOfLabelAt: index => labels[index].className,\n    isVerticalDisplay: () => isClassExists(element, 'vertical'),\n    isHorizontalDisplay: () => isClassExists(element, 'horizontal'),\n    isButtonType: () => isClassExists(element, 'buttonType'),\n    spacing: () => radios[0].style._values['margin-bottom'],\n    lineHeight: () => radios[0].style._values['line-height'],\n    getNumberOfRadios: () => radios.length,\n    setProps: props => {\n      const ClonedWithProps = React.cloneElement(component, Object.assign({}, component.props, props), ...(component.props.children || []));\n      ReactDOM.render(<div ref={r => element = r}>{ClonedWithProps}</div>, wrapper);\n    }\n  };\n};\n\nexport default radioGroupDriverFactory;\n"}});