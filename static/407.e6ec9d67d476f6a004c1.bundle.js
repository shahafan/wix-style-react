webpackJsonp([407],{1550:function(module,exports){module.exports="import React from 'react';\nimport IconWithOptions from '../IconWithOptions';\nimport IconWithOptionsDriverFactory from './IconWithOptions.driver';\nimport {createDriverFactory} from '../test-common';\nimport {iconWithOptionsTestkitFactory} from '../../testkit';\nimport {iconWithOptionsTestkitFactory as enzymeIconWithOptionsTestkitFactory} from '../../testkit/enzyme';\nimport {mount} from 'enzyme';\nimport ReactTestUtils from 'react-dom/test-utils';\n\ndescribe('IconWithOptions', () => {\n  const createDriver = createDriverFactory(IconWithOptionsDriverFactory);\n\n  const options = [\n    {id: 0, value: 'Option 1'},\n    {id: 1, value: 'Option 2'},\n    {id: 2, value: 'Option 3', disabled: true},\n    {id: 3, value: 'Option 4'},\n    {id: 'divider1', value: '-'},\n    {id: 'element1', value: <span style={{color: 'brown'}}>Option 4</span>}\n  ];\n\n  const optionsToArray = options => options.map(option => {\n    const {value, ...props} = option;\n    return <IconWithOptions.Option key={option.id} {...props}>{value}</IconWithOptions.Option>;\n  });\n\n  const iconWithOptions = props => (\n    <IconWithOptions {...props}>\n      <IconWithOptions.Icon/>\n      {optionsToArray(options)}\n    </IconWithOptions>\n  );\n\n  it('should have a Button and a hidden DropdownLayout by default', () => {\n    const {driver, dropdownLayoutDriver} = createDriver(iconWithOptions());\n    expect(driver.exists()).toBeTruthy();\n    expect(dropdownLayoutDriver.exists()).toBeTruthy();\n    expect(dropdownLayoutDriver.isShown()).toBeFalsy();\n  });\n\n  it('should display dropdown only on mouse hover', () => {\n    const {driver, dropdownLayoutDriver} = createDriver(iconWithOptions());\n    expect(dropdownLayoutDriver.isShown()).toBeFalsy();\n    driver.mouseEnter();\n    expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n    driver.mouseLeave();\n    expect(dropdownLayoutDriver.isShown()).toBeFalsy();\n  });\n\n  it('should hide the dropdown when an option gets selected', async () => {\n    const {driver, dropdownLayoutDriver} = createDriver(iconWithOptions());\n    driver.mouseEnter();\n    expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n    dropdownLayoutDriver.clickAtOption(0);\n    expect(dropdownLayoutDriver.isShown()).toBeFalsy();\n  });\n\n  it('should not hide the dropdown when selecting an option which is already selected', async () => {\n    const {driver, dropdownLayoutDriver} = createDriver(iconWithOptions({selectedId: 0}));\n    driver.mouseEnter();\n    expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n    dropdownLayoutDriver.clickAtOption(0);\n    expect(dropdownLayoutDriver.isShown()).toBeTruthy();\n  });\n\n  it('should call onSelect when an option is clicked', () => {\n    const onSelect = jest.fn();\n    const {driver, dropdownLayoutDriver} = createDriver(iconWithOptions({onSelect}));\n    driver.mouseEnter();\n    dropdownLayoutDriver.clickAtOption(0);\n    expect(onSelect).toBeCalledWith(options[0]);\n  });\n\n  it('should not call onSelect when a selected option is pressed', () => {\n    const onSelect = jest.fn();\n    const {driver, dropdownLayoutDriver} = createDriver(iconWithOptions({onSelect, selectedId: options[0].id}));\n    driver.mouseEnter();\n    dropdownLayoutDriver.clickAtOption(0);\n    expect(onSelect).not.toBeCalled();\n  });\n\n  it('should have arrow in the dropdown by default', () => {\n    const {driver, dropdownLayoutDriver} = createDriver(iconWithOptions());\n    driver.mouseEnter();\n    expect(dropdownLayoutDriver.hasTopArrow()).toBeTruthy();\n  });\n\n  it('should not have dropDirectin up by default', () => {\n    const {dropdownLayoutDriver} = createDriver(iconWithOptions());\n    expect(dropdownLayoutDriver.isDropDirectionUp()).toBe(false);\n  });\n\n  it('should have dropDirectin up', () => {\n    const {dropdownLayoutDriver} = createDriver(iconWithOptions({dropDirectionUp: true}));\n    expect(dropdownLayoutDriver.isDropDirectionUp()).toBe(true);\n  });\n\n  describe('icon', () => {\n    it('should not have blue hovered icon by default', () => {\n      const {driver} = createDriver(iconWithOptions());\n      expect(driver.isIconBlue()).toBe(false);\n    });\n\n    it('should not have blue hovered icon when hovering the outer wrapper', () => {\n      const {driver} = createDriver(iconWithOptions());\n\n      ReactTestUtils.Simulate.mouseEnter(driver.element());\n      expect(driver.isIconBlue()).toBe(false);\n    });\n\n    it('should have blue hovered icon when hovering over the icon', () => {\n      const {driver} = createDriver(iconWithOptions());\n\n      driver.mouseEnter();\n      expect(driver.isIconBlue()).toBe(true);\n    });\n\n    it('should have blue hovered icon when hovering over the icon, then moving the mouse to the outer wrapper', () => {\n      const {driver} = createDriver(iconWithOptions());\n\n      driver.mouseEnter();\n\n      ReactTestUtils.Simulate.mouseLeave(driver.iconWrapper());\n      expect(driver.isIconBlue()).toBe(true);\n\n      ReactTestUtils.Simulate.mouseEnter(driver.element());\n      expect(driver.isIconBlue()).toBe(true);\n    });\n\n    it('should not have blue hovered icon when hovering over the icon, then performing mouseLeave from the outer wrapper', () => {\n      const {driver} = createDriver(iconWithOptions());\n\n      driver.mouseEnter();\n      expect(driver.isIconBlue()).toBe(true);\n\n      driver.mouseLeave();\n      expect(driver.isIconBlue()).toBe(false);\n    });\n  });\n\n  describe('testkit', () => {\n    it('should exist', () => {\n      const div = document.createElement('div');\n      const dataHook = 'myDataHook';\n      const wrapper = div.appendChild(ReactTestUtils.renderIntoDocument(\n        <div>\n          <IconWithOptions dataHook={dataHook}>\n            <IconWithOptions.Icon/>\n            {optionsToArray(options)}\n          </IconWithOptions>\n        </div>\n      ));\n      const iconWithOptionsTestkit = iconWithOptionsTestkitFactory({wrapper, dataHook});\n      expect(iconWithOptionsTestkit.driver.exists()).toBeTruthy();\n      expect(iconWithOptionsTestkit.dropdownLayoutDriver.exists()).toBeTruthy();\n    });\n  });\n\n  describe('enzyme testkit', () => {\n    it('should exist', () => {\n      const dataHook = 'myDataHook';\n      const wrapper = mount(\n        <IconWithOptions dataHook={dataHook}>\n          <IconWithOptions.Icon/>\n          {optionsToArray(options)}\n        </IconWithOptions>\n      );\n      const iconWithOptionsTestkit = enzymeIconWithOptionsTestkitFactory({wrapper, dataHook});\n      expect(iconWithOptionsTestkit.driver.exists()).toBeTruthy();\n      expect(iconWithOptionsTestkit.dropdownLayoutDriver.exists()).toBeTruthy();\n    });\n  });\n});\n"}});