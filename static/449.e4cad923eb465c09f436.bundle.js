webpackJsonp([449],{1508:function(module,exports){module.exports="import React from 'react';\nimport ReactTestUtils from 'react-dom/test-utils';\nimport {mount} from 'enzyme';\nimport {createDriverFactory} from '../test-common';\nimport moment from 'moment';\nimport applyPolyfills from './Polyfills';\nimport {datePickerTestkitFactory} from '../../testkit/index';\nimport {datePickerTestkitFactory as enzymeDatePickerTestkitFactory} from '../../testkit/enzyme';\nimport datePickerDriverFactory from './DatePicker.driver';\nimport Input from '../Input';\nimport DatePicker from './DatePicker';\n\ndescribe('DatePicker', () => {\n  const createDriver = createDriverFactory(datePickerDriverFactory);\n  let onChange;\n\n  applyPolyfills(window, global);\n\n  beforeEach(() => {\n    onChange = jest.fn();\n  });\n\n  describe('date picker input', () => {\n    it('should exist', () => {\n      const {inputDriver} = createDriver(<DatePicker onChange={onChange}/>);\n\n      expect(inputDriver.exists()).toBe(true);\n    });\n\n    it('should set inputDataHook from props', () => {\n      const {inputDriver} = createDriver(<DatePicker onChange={onChange} inputDataHook={'inputDataHook'}/>);\n\n      expect(inputDriver.getDataHook()).toBe('inputDataHook');\n    });\n\n    it('should set datePicker disabled from props', () => {\n      const {inputDriver} = createDriver(<DatePicker onChange={onChange} disabled/>);\n\n      expect(inputDriver.isDisabled()).toBeTruthy();\n    });\n\n    it('should not open calendar when disabled', () => {\n      const {inputDriver, calendarDriver} = createDriver(<DatePicker onChange={onChange} disabled/>);\n\n      inputDriver.trigger('click');\n      expect(calendarDriver.isVisible()).toBe(false);\n    });\n\n    it('should show correct value from props', () => {\n      const date = new Date(2017, 9, 2);\n      const {inputDriver} = createDriver(<DatePicker onChange={onChange} value={moment(date)}/>);\n\n      expect(inputDriver.getValue()).toBe('10/02/2017');\n    });\n\n    it('should show correct value from props depends on date format', () => {\n      const date = new Date(2017, 9, 2);\n      const {inputDriver} = createDriver(<DatePicker\n        onChange={onChange} value={moment(date)}\n        dateFormat={'DD/MM/YYYY'}\n        />);\n\n      expect(inputDriver.getValue()).toBe('02/10/2017');\n    });\n\n    it('should set placeholder from placeholderText property', () => {\n      const {inputDriver} = createDriver(<DatePicker\n        onChange={onChange}\n        placeholderText={'Datepicker test placeholder'}\n        />);\n\n      expect(inputDriver.getPlaceholder()).toBe('Datepicker test placeholder');\n    });\n\n    it('should set placeholder from placeholder property for customInput', () => {\n      const {inputDriver} = createDriver(<DatePicker\n        onChange={onChange}\n        customInput={<Input placeholder={'Input test placeholder'}/>}\n        />);\n\n      expect(inputDriver.getPlaceholder()).toBe('Input test placeholder');\n    });\n\n    it('should set placeholder from placeholder property for customInput even if placeholderText property was specified', () => {\n      const {inputDriver} = createDriver(<DatePicker\n        onChange={onChange}\n        customInput={<Input placeholder={'customInputPlaceholder'}/>}\n        placeholderText={'textPlaceholder'}\n        />);\n\n      expect(inputDriver.getPlaceholder()).toBe('customInputPlaceholder');\n    });\n\n    it('should be readonly', () => {\n      const {inputDriver} = createDriver(<DatePicker\n        onChange={onChange}\n        readOnly\n        />);\n\n      expect(inputDriver.getReadOnly()).toBeTruthy();\n    });\n\n    it('should not be readonly', () => {\n      const {inputDriver} = createDriver(<DatePicker\n        onChange={onChange}\n        />);\n\n      expect(inputDriver.getReadOnly()).toBeFalsy();\n    });\n\n    it('has prefix by default', () => {\n      const {inputDriver} = createDriver(<DatePicker\n        onChange={onChange}\n        />);\n\n      expect(inputDriver.hasPrefix()).toBe(true);\n    });\n\n    it('has custom prefix', () => {\n      const {inputDriver} = createDriver(<DatePicker\n        onChange={onChange}\n        prefix={<span>#</span>}\n        />);\n\n      expect(inputDriver.hasPrefix()).toBe(true);\n    });\n  });\n\n  describe('calendar', () => {\n    it('should not show calendar on start', () => {\n      const {calendarDriver} = createDriver(<DatePicker onChange={onChange}/>);\n\n      expect(calendarDriver.isVisible()).toBe(false);\n    });\n\n    it('should not call onChange when select selected date with enter', () => {\n      const value = moment(new Date(2017, 5, 2));\n      const {inputDriver} = createDriver(<DatePicker value={value} onChange={onChange}/>);\n\n      inputDriver.trigger('click');\n      inputDriver.trigger('keyDown', {key: 'Enter'});\n\n      expect(onChange).not.toHaveBeenCalled();\n    });\n\n    it('should not call onChange when select selected date with click', () => {\n      const value = moment(new Date(2017, 5, 1));\n      const {calendarDriver, inputDriver} = createDriver(<DatePicker value={value} onChange={onChange}/>);\n\n      inputDriver.trigger('click');\n      calendarDriver.clickOnNthDay();\n\n      expect(onChange).not.toHaveBeenCalled();\n    });\n\n    describe('should be opened', () => {\n      it('on click on datePickerInput', () => {\n        const {calendarDriver, inputDriver} = createDriver(<DatePicker onChange={onChange}/>);\n\n        inputDriver.trigger('click');\n        expect(calendarDriver.isVisible()).toBe(true);\n      });\n\n      it('on select with ArrowUp key', () => {\n        const value = moment(new Date(2017, 5, 2));\n        const {inputDriver, calendarDriver} = createDriver(<DatePicker value={value} onChange={onChange}/>);\n\n        inputDriver.trigger('keyDown', {key: 'ArrowUp'});\n        expect(calendarDriver.isVisible()).toBe(true);\n      });\n    });\n\n    describe('should be closed', () => {\n      it('on select date with Enter key', () => {\n        const value = moment(new Date(2017, 5, 2));\n        const {inputDriver, calendarDriver} = createDriver(<DatePicker value={value} onChange={onChange}/>);\n\n        inputDriver.trigger('click');\n        inputDriver.trigger('keyDown', {key: 'ArrowRight'});\n        inputDriver.trigger('keyDown', {key: 'Enter'});\n\n        expect(calendarDriver.isVisible()).toBe(false);\n      });\n\n      it('on select date with click', () => {\n        const {inputDriver, calendarDriver} = createDriver(<DatePicker onChange={onChange}/>);\n\n        inputDriver.trigger('click');\n        calendarDriver.clickOnNthDay();\n\n        expect(calendarDriver.isVisible()).toBe(false);\n      });\n\n      it('on press \"Escape\" key', () => {\n        const {inputDriver, calendarDriver} = createDriver(<DatePicker onChange={onChange}/>);\n\n        inputDriver.trigger('click');\n        inputDriver.trigger('keyDown', {key: 'Escape'});\n\n        expect(calendarDriver.isVisible()).toBe(false);\n      });\n\n      it('on press \"Tab\" key', () => {\n        const {inputDriver, calendarDriver} = createDriver(<DatePicker onChange={onChange}/>);\n\n        inputDriver.trigger('click');\n        inputDriver.trigger('keyDown', {key: 'Tab'});\n\n        expect(calendarDriver.isVisible()).toBe(false);\n      });\n    });\n\n    it('should not close calendar on select when \"shouldCloseOnSelect\" property is false', () => {\n      const {inputDriver, calendarDriver} = createDriver(\n        <DatePicker\n          onChange={onChange}\n          shouldCloseOnSelect={false}\n          />\n      );\n\n      inputDriver.trigger('click');\n      calendarDriver.clickOnNthDay();\n\n      expect(calendarDriver.isVisible()).toBe(true);\n    });\n\n    it('should call onChange when click on available day', () => {\n      const value = moment(new Date(2017, 7, 1));\n      const expectedValue = moment(new Date(2017, 7, 2));\n      const {calendarDriver, inputDriver} = createDriver(\n        <DatePicker\n          value={value}\n          onChange={onChange}\n          />\n      );\n      inputDriver.trigger('click');\n      calendarDriver.clickOnNthDay(1);\n\n      const newValue = onChange.mock.calls[0][0];\n\n      expect(onChange).toHaveBeenCalled();\n      expect(newValue.diff(expectedValue)).toBe(0);\n    });\n\n    it('should not give an ability to select past dates if it is specified in props', () => {\n      const date = moment(new Date(2015, 9, 2));\n      const {calendarDriver, inputDriver} = createDriver(\n        <DatePicker\n          onChange={onChange}\n          value={date}\n          excludePastDates\n          />\n      );\n\n      inputDriver.trigger('click');\n      calendarDriver.clickOnNthDay();\n\n      expect(onChange).not.toHaveBeenCalled();\n      expect(calendarDriver.isVisible()).toBe(true);\n    });\n\n    it('should select previous month on previous month button click', () => {\n      const date = moment(new Date(2015, 9, 2));\n      const {calendarDriver, inputDriver} = createDriver(\n        <DatePicker\n          onChange={onChange}\n          value={date}\n          />\n      );\n\n      inputDriver.trigger('click');\n      calendarDriver.clickOnPrevMonthButton();\n      calendarDriver.clickOnNthDay();\n\n      const newDate = onChange.mock.calls[0][0];\n      expect(newDate.month()).toEqual(8);\n    });\n\n    it('should show calendar in provided locale', () => {\n      const date = moment(new Date(2015, 9, 2));\n      const {calendarDriver, inputDriver} = createDriver(\n        <DatePicker\n          onChange={onChange}\n          locale=\"fr\"\n          value={date}\n          />\n      );\n\n      inputDriver.trigger('click');\n      calendarDriver.clickOnPrevMonthButton();\n\n      expect(calendarDriver.getNthWeekDayName(0)).toEqual('Lu');\n      expect(calendarDriver.getNthWeekDayName(6)).toEqual('Di');\n      expect(calendarDriver.getCurrentMonthWithYear()).toEqual('septembre 2015');\n      expect(inputDriver.getValue()).toBe('02/10/2015');\n    });\n\n    it('should show date in provided format instead of locale format', () => {\n      const date = new Date(2017, 9, 2);\n      const {inputDriver} = createDriver(\n        <DatePicker\n          onChange={onChange}\n          locale=\"fr\"\n          dateFormat=\"YYYY/MM/DD\"\n          value={moment(date)}\n          />\n      );\n\n      expect(inputDriver.getValue()).toBe('2017/10/02');\n    });\n\n    it('should select previous month on next month button click', () => {\n      const date = moment(new Date(2015, 9, 2));\n      const {calendarDriver, inputDriver} = createDriver(\n        <DatePicker\n          onChange={onChange}\n          value={date}\n          />\n      );\n\n      inputDriver.trigger('click');\n      calendarDriver.clickOnNextMonthButton();\n      calendarDriver.clickOnNthDay();\n\n      const newDate = onChange.mock.calls[0][0];\n      expect(newDate.month()).toEqual(10);\n    });\n\n    it('should show header by default', () => {\n      const date = moment(new Date(2015, 9, 2));\n      const {calendarDriver, inputDriver} = createDriver(\n        <DatePicker onChange={onChange} value={date}/>\n      );\n\n      inputDriver.trigger('click');\n      expect(calendarDriver.isHeaderVisible()).toEqual(true);\n    });\n\n    it('should hide header if year dropdown is visible', () => {\n      const date = moment(new Date(2015, 9, 2));\n      const {calendarDriver, inputDriver} = createDriver(\n        <DatePicker\n          onChange={onChange}\n          showYearDropdown\n          value={date}\n          />\n      );\n\n      inputDriver.trigger('click');\n      expect(calendarDriver.isHeaderVisible()).toEqual(false);\n    });\n\n    it('should hide header if month dropdown is visible', () => {\n      const date = moment(new Date(2015, 9, 2));\n      const {calendarDriver, inputDriver} = createDriver(\n        <DatePicker\n          onChange={onChange}\n          showMonthDropdown\n          value={date}\n          />\n      );\n\n      inputDriver.trigger('click');\n      expect(calendarDriver.isHeaderVisible()).toEqual(false);\n    });\n\n    describe('with year dropdown', () => {\n      it('should give a possibility to choose date from another year', () => {\n        const date = moment(new Date(2015, 9, 2));\n        const {calendarDriver, inputDriver} = createDriver(\n          <DatePicker\n            onChange={onChange}\n            showYearDropdown\n            value={date}\n            />\n        );\n\n        inputDriver.trigger('click');\n        calendarDriver.clickOnYearDropdown();\n        calendarDriver.clickOnNthYear();\n        calendarDriver.clickOnNthDay();\n\n        const newDate = onChange.mock.calls[0][0];\n        expect(newDate.year()).not.toEqual(date.year());\n      });\n    });\n  });\n\n  describe('testkit', () => {\n    it('should exist', () => {\n      const div = document.createElement('div');\n      const dataHook = 'dataHook';\n      const wrapper = div.appendChild(ReactTestUtils.renderIntoDocument(\n        <div>\n          <DatePicker\n            onChange={() => {\n            }}\n            dataHook={dataHook}\n            />\n        </div>\n      ));\n      const {driver, calendarDriver, inputDriver} = datePickerTestkitFactory({wrapper, dataHook});\n\n      expect(driver.exists()).toBe(true);\n      expect(inputDriver.exists()).toBe(true);\n      expect(calendarDriver.isVisible()).toBe(false);\n    });\n  });\n\n  describe('enzyme testkit', () => {\n    it('should exist', () => {\n      const dataHook = 'dataHook';\n      const wrapper = mount(<DatePicker\n        onChange={() => {\n        }}\n        dataHook={dataHook}\n        />);\n      const {driver, calendarDriver, inputDriver} = enzymeDatePickerTestkitFactory({wrapper, dataHook});\n\n      expect(driver.exists()).toBe(true);\n      expect(inputDriver.exists()).toBe(true);\n      expect(calendarDriver.isVisible()).toBe(false);\n    });\n  });\n});\n"}});