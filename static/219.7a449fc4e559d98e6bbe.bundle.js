webpackJsonp([219],{1738:function(module,exports){module.exports="import React from 'react';\nimport RadioGroup from './RadioGroup';\nimport radioGroupDriverFactory from './RadioGroup.driver';\nimport {createDriverFactory} from '../test-common';\nimport {radioGroupTestkitFactory} from '../../testkit';\nimport {isTestkitExists, isEnzymeTestkitExists} from '../../testkit/test-common';\nimport {radioGroupTestkitFactory as enzymeRadioGroupTestkitFactory} from '../../testkit/enzyme';\n\ndescribe('RadioGroup', () => {\n  const createDriver = createDriverFactory(radioGroupDriverFactory);\n\n  const elementToRender = props => (\n    <RadioGroup {...props}>\n      <RadioGroup.Radio value={1}>Option 1</RadioGroup.Radio>\n      <RadioGroup.Radio value={2}>Option 2</RadioGroup.Radio>\n      <RadioGroup.Radio value={3}>Option 3</RadioGroup.Radio>\n      <RadioGroup.Radio value={4}>Option 4</RadioGroup.Radio>\n    </RadioGroup>\n  );\n\n  it('should have the correct radio buttons', () => {\n    const driver = createDriver(elementToRender());\n    expect(driver.getNumberOfRadios()).toBe(4);\n    expect(driver.getRadioValueAt(0)).toBe('1');\n  });\n\n  it('should check the option that matches the initial value', () => {\n    const value = 2;\n    const driver = createDriver(elementToRender({value}));\n    expect(driver.getSelectedValue()).toBe(value.toString());\n  });\n\n  it('should not check any options if value was not matched', () => {\n    const value = 10;\n    const driver = createDriver(elementToRender({value}));\n    expect(driver.getSelectedValue()).toBe(null);\n  });\n\n  describe('onChange attribute', () => {\n    it('should be called with the correct option value', () => {\n      const onChange = jest.fn();\n      const driver = createDriver(elementToRender({onChange}));\n      driver.selectByValue(1);\n      expect(onChange).toBeCalledWith(1);\n    });\n\n    it('should not be called upon checked option', () => {\n      const value = 1;\n      const onChange = jest.fn();\n      const driver = createDriver(elementToRender({onChange, value}));\n\n      driver.selectByValue(1);\n      expect(onChange.mock.calls.length).toBe(0);\n    });\n\n    it('should not be called upon disabled option', () => {\n      const disabledRadios = [1];\n      const onChange = jest.fn();\n      const driver = createDriver(elementToRender({onChange, disabledRadios}));\n\n      driver.selectByValue(1);\n      expect(onChange.mock.calls.length).toBe(0);\n    });\n  });\n\n  describe('vAlign attribute', () => {\n    const elementToRender = props => (\n      <RadioGroup {...props}>\n        <RadioGroup.Radio value={1}>Option 1</RadioGroup.Radio>\n        <RadioGroup.Radio value={2}>Option 2</RadioGroup.Radio>\n      </RadioGroup>\n    );\n\n    it('should have a default vcenter class', () => {\n      const driver = createDriver(elementToRender());\n      expect(driver.getClassOfLabelAt(0)).toBe('vcenter t1_1');\n      expect(driver.getClassOfLabelAt(1)).toBe('vcenter t1_1');\n    });\n\n    it('should have a vtop class', () => {\n      const driver = createDriver(elementToRender({vAlign: 'top'}));\n      expect(driver.getClassOfLabelAt(0)).toBe('vtop t1_1');\n      expect(driver.getClassOfLabelAt(1)).toBe('vtop t1_1');\n    });\n  });\n\n  describe('display attribute', () => {\n    it('should be vertical by default', () => {\n      const driver = createDriver(elementToRender());\n      expect(driver.isVerticalDisplay()).toBe(true);\n    });\n\n    it('should be horizontal', () => {\n      const driver = createDriver(elementToRender({display: 'horizontal'}));\n      expect(driver.isHorizontalDisplay()).toBe(true);\n    });\n  });\n\n  describe('spacing attribute', () => {\n    it('should be 12px by default', () => {\n      const driver = createDriver(elementToRender());\n      expect(driver.spacing()).toBe('12px');\n    });\n\n    it('should be spaced', () => {\n      const driver = createDriver(elementToRender({spacing: '30px'}));\n      expect(driver.spacing()).toBe('30px');\n    });\n  });\n\n  describe('line-height attribute', () => {\n    it('should be 24px', () => {\n      const driver = createDriver(elementToRender());\n      expect(driver.lineHeight()).toBe('24px');\n    });\n  });\n\n  describe('testkit', () => {\n    it('should exist', () => {\n      expect(isTestkitExists(<RadioGroup/>, radioGroupTestkitFactory)).toBe(true);\n    });\n  });\n\n  describe('enzyme testkit', () => {\n    it('should exist', () => {\n      expect(isEnzymeTestkitExists(<RadioGroup/>, enzymeRadioGroupTestkitFactory)).toBe(true);\n    });\n  });\n});\n"}});