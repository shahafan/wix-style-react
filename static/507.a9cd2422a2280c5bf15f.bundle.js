webpackJsonp([507],{1450:function(module,exports){module.exports="import React from 'react';\nimport buttonSelectionDriverFactory from './ButtonSelection.driver';\nimport {createDriverFactory} from '../test-common';\nimport {buttonSelectionTestkitFactory} from '../../testkit';\nimport {buttonSelectionTestkitFactory as enzymeButtonSelectionTestkitFactory} from '../../testkit/enzyme';\nimport ButtonSelection from './ButtonSelection';\nimport ReactTestUtils from 'react-dom/test-utils';\nimport {mount} from 'enzyme';\n\ndescribe('ButtonSelection', () => {\n  const createDriver = createDriverFactory(buttonSelectionDriverFactory);\n\n  const buttonsNames = ['A', 'B', 'C'];\n  const onChange = jest.fn();\n\n  it('should create three buttons with given names', () => {\n    const props = {\n      buttonsNames,\n      onChange\n    };\n\n    const driver = createDriver(<ButtonSelection {...props}/>);\n    expect(driver.getButtonsNames()).toEqual(props.buttonsNames);\n    expect(driver.getButtonsClasses()).toEqual(Array(3).fill('unselected'));\n  });\n\n  it('should select initial value', () => {\n    const props = {\n      buttonsNames,\n      onChange,\n      value: 'A'\n    };\n\n    const driver = createDriver(<ButtonSelection {...props}/>);\n    expect(driver.getSelectedButton()).toBe(props.value);\n  });\n\n  it('should select value', () => {\n    const props = {\n      buttonsNames,\n      onChange\n    };\n\n    const driver = createDriver(<ButtonSelection {...props}/>);\n    driver.selectByValue('B');\n\n    expect(props.onChange).toBeCalledWith('B');\n  });\n\n  it('should call onChange when selecting a value that is different from the selected value', () => {\n    const props = {\n      buttonsNames,\n      onChange,\n      value: 'A'\n    };\n\n    const driver = createDriver(<ButtonSelection {...props}/>);\n    driver.selectByValue('B');\n\n    expect(onChange.mock.calls.length).toBeGreaterThan(0);\n  });\n\n  it('should not call onChange when reselecting the selected value', () => {\n    const onChange = jest.fn();\n    const props = {\n      buttonsNames,\n      onChange,\n      value: 'A'\n    };\n\n    const driver = createDriver(<ButtonSelection {...props}/>);\n    driver.selectByValue('A');\n\n    expect(onChange.mock.calls.length).toBe(0);\n  });\n\n  it('should throw exception for unkown value', () => {\n    const props = {\n      buttonsNames,\n      onChange,\n      value: 'unknown value'\n    };\n\n    expect(() => createDriver(<ButtonSelection {...props}/>)).toThrowError();\n  });\n\n  it('should update buttons names', () => {\n    const props = {\n      buttonsNames,\n      onChange\n    };\n\n    const driver = createDriver(<ButtonSelection {...props}/>);\n    props.buttonsNames = ['DD', 'EE'];\n    driver.setProps(props);\n\n    expect(driver.getButtonsNames()).toEqual(props.buttonsNames);\n  });\n\n  describe('testkit', () => {\n    it('should exist', () => {\n      const div = document.createElement('div');\n      const dataHook = 'myDataHook';\n      const wrapper = div.appendChild(ReactTestUtils.renderIntoDocument(<div><ButtonSelection buttonsNames={buttonsNames} onChange={onChange} dataHook={dataHook}/></div>));\n      const buttonSelectionTestkit = buttonSelectionTestkitFactory({wrapper, dataHook});\n      expect(buttonSelectionTestkit.exists()).toBeTruthy();\n      expect(buttonSelectionTestkit.getButtonsNames()).toEqual(buttonsNames);\n    });\n  });\n\n  describe('enzyme testkit', () => {\n    it('should exist', () => {\n      const dataHook = 'myDataHook';\n      const wrapper = mount(<ButtonSelection buttonsNames={buttonsNames} dataHook={dataHook} onChange={onChange}/>);\n      const buttonSelectionTestkit = enzymeButtonSelectionTestkitFactory({wrapper, dataHook});\n      expect(buttonSelectionTestkit.exists()).toBeTruthy();\n      expect(buttonSelectionTestkit.getButtonsNames()).toEqual(buttonsNames);\n    });\n  });\n});\n"}});