webpackJsonp([187],{1770:function(module,exports){module.exports="import React, {Children} from 'react';\nimport WixComponent from '../../BaseComponents/WixComponent';\nimport {string, node, bool} from 'prop-types';\nimport SideMenu from '../core/SideMenu';\nimport SlideAnimation, {SlideDirection} from '../../Animations/SlideAnimation';\nimport styles from './DrillView.scss';\n\nclass SideMenuDrill extends WixComponent {\n  constructor(props) {\n    super(props);\n\n    const state = {\n      menus: {},\n      currentMenuId: this.props.menuKey,\n      previousMenuId: null,\n      showMenuA: true,\n      slideDirection: SlideDirection.in\n    };\n\n    this.processChildren({props: this.props}, state);\n    this.state = state;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const state = {\n      menus: {}\n    };\n\n    this.processChildren({props: nextProps}, state);\n    this.setState(state);\n  }\n\n  setSelectedItemMenu(selectedItemMenuId, state) {\n    // initial selected menu\n    if (!this.state) {\n      Object.assign(state, {currentMenuId: selectedItemMenuId, selectedItemMenuId});\n      return;\n    }\n\n    // returning to an already selected menu item (force nav)\n    if (this.lastClickedMenuKey === selectedItemMenuId) {\n      this.navigateToMenu(selectedItemMenuId, SlideDirection.in);\n      this.lastClickedMenuKey = null;\n    }\n\n    if (this.state.selectedItemMenuId === selectedItemMenuId) {\n      return;\n    }\n\n    this.setState({selectedItemMenuId});\n    if (this.state.currentMenuId !== selectedItemMenuId) {\n      this.navigateToMenu(selectedItemMenuId, this.getSlideDirectionTo(selectedItemMenuId));\n    }\n  }\n\n  getSlideDirectionTo(selectedItemMenuId) {\n    const {currentMenuId, menus} = this.state;\n    return menus[currentMenuId].level < menus[selectedItemMenuId].level ? SlideDirection.in : SlideDirection.out;\n  }\n\n  navigateToMenu(nextMenuId, slideDirection) {\n    const previousMenuId = this.state.currentMenuId;\n    const showMenuA = !this.state.showMenuA;\n\n    if (nextMenuId === previousMenuId) {\n      return;\n    }\n\n    this.setState({currentMenuId: nextMenuId, previousMenuId, showMenuA, slideDirection});\n  }\n\n  clickFirstClickableChild(item, event) {\n    let found = false;\n    if (item.props.onClick) {\n      item.props.onClick(event);\n      return true;\n    }\n\n    Children.forEach(item.props.children, child => {\n      if (!found && child.props) {\n        found = this.clickFirstClickableChild(child, event);\n      }\n    });\n    return found;\n  }\n\n  selectFirstLinkChild(menu, event) {\n    let found = false;\n    Children.forEach(menu.props.children, child => {\n      if (!found && child.type === SideMenuDrill.Link) {\n        this.clickFirstClickableChild(child, event);\n        found = true;\n      }\n\n      if (!found && child.props && child.props.children) {\n        this.selectFirstLinkChild(child, event);\n      }\n    });\n  }\n\n  alterMenu(menu, childrenClone, parentMenuKey, isActive) {\n    const defaultSubMenProps = {\n      isOpen: false,\n      onSelectHandler: event => {\n        this.lastClickedMenuKey = menu.props.menuKey;\n        this.selectFirstLinkChild(menu, event);\n\n        if (menu.props.onSelectHandler) {\n          menu.props.onSelectHandler.apply(menu, [event]);\n        }\n      },\n      onBackHandler: event => {\n        this.navigateToMenu(parentMenuKey, SlideDirection.out);\n\n        if (menu.props.onBackHandler) {\n          menu.props.onBackHandler.apply(menu, [event]);\n        }\n      },\n      isActive\n    };\n\n    return React.cloneElement(menu, defaultSubMenProps, childrenClone);\n  }\n\n  cloneSubMenu(menu, state, parentMenuKey, childrenClone) {\n    const isMenuActive = state.menus[menu.props.menuKey].isActive;\n    if (isMenuActive && state.menus[parentMenuKey]) {\n      state.menus[parentMenuKey].isActive = true;\n    }\n\n    const menuClone = this.alterMenu(menu, childrenClone, parentMenuKey, isMenuActive);\n    state.menus[menuClone.props.menuKey].component = menuClone;\n    return menuClone;\n  }\n\n  cloneChild(menu, state, parentMenuKey, childrenClone) {\n    if (menu.type === SideMenuDrill.Link && menu.props.isActive) {\n      this.setSelectedItemMenu(parentMenuKey, state);\n      state.menus[parentMenuKey].isActive = true;\n    }\n\n    if (menu.props.menuKey) {\n      return this.cloneSubMenu(menu, state, parentMenuKey, childrenClone);\n    }\n\n    return React.cloneElement(menu, {}, childrenClone);\n  }\n\n  processChildren(menu, state, parentMenuKey, level = 0) {\n    const childrenClone = Children.map(menu.props.children, child => {\n      if (child && child.props && child.props.children) {\n        const menuKey = menu.props.menuKey || parentMenuKey;\n\n        if (!state.menus[menuKey]) {\n          state.menus[menuKey] = {isActive: false, component: null, level};\n        }\n\n        return this.processChildren(child, state, menuKey, level + 1);\n      }\n\n      return child;\n    });\n\n    return this.cloneChild(menu, state, parentMenuKey, childrenClone, level);\n  }\n\n  renderNavigation(menu) {\n    if (!menu) {\n      return null;\n    }\n\n    if (menu.props.menuKey === this.props.menuKey) {\n      // Render root items\n      return menu.props.children;\n    }\n\n    // Render open SubMenu\n    return React.cloneElement(menu, {isOpen: true});\n  }\n\n  renderMenu(menu) {\n    const navigationMenu = this.renderNavigation(menu);\n\n    return navigationMenu && (\n      <div className={styles.drillViewPanel}>\n        {navigationMenu}\n      </div>\n    );\n  }\n\n  render() {\n    const {menus, currentMenuId, previousMenuId, showMenuA, slideDirection} = this.state;\n    const menuAId = showMenuA ? currentMenuId : previousMenuId;\n    const menuBId = showMenuA ? previousMenuId : currentMenuId;\n\n    const menuA = menuAId && menus[menuAId].component;\n    const menuB = menuBId && menus[menuBId].component;\n\n    return (\n      <SideMenu dataHook=\"drill-view\" inFlex={this.props.inFlex}>\n        <div className={styles.drillViewContainer}>\n          <SlideAnimation direction={slideDirection} animateAppear={false} isVisible={showMenuA}>\n            {this.renderMenu(menuA)}\n          </SlideAnimation>\n          <SlideAnimation direction={slideDirection} animateAppear={false} isVisible={!showMenuA}>\n            {this.renderMenu(menuB)}\n          </SlideAnimation>\n        </div>\n        {this.props.stickyFooter}\n      </SideMenu>\n    );\n  }\n}\n\nSideMenuDrill.defaultProps = {\n  inFlex: false,\n  menuKey: 'root'\n};\n\nSideMenuDrill.propTypes = {\n  inFlex: bool,\n  menuKey: string,\n  children: node\n};\n\nexport default SideMenuDrill;\n"}});