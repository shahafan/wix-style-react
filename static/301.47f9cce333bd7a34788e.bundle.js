webpackJsonp([301],{1656:function(module,exports){module.exports="import React from 'react';\nimport ReactTestUtils from 'react-dom/test-utils';\nimport ReactDOM from 'react-dom';\nimport styles from './Input.scss';\n\nconst inputDriverFactory = ({element, wrapper, component}) => {\n  const input = element && element.querySelector('input');\n  const clearButton = element && element.querySelector(`.${styles.clearButton}`);\n  const suffixNode = element && element.querySelector(`.${styles.suffix}`);\n\n  const driver = {\n    trigger: (trigger, event) => ReactTestUtils.Simulate[trigger](input, event),\n    focus: () => {\n      input.focus();\n      ReactTestUtils.Simulate.focus(input);\n    },\n    blur: () => {\n      input.blur();\n      ReactTestUtils.Simulate.blur(input);\n    },\n    keyDown: key => ReactTestUtils.Simulate.keyDown(input, {key}),\n    clickSuffix: () => ReactTestUtils.Simulate.click(suffixNode),\n    clickClear: () => ReactTestUtils.Simulate.click(clearButton),\n    clearText: () => driver.enterText(''),\n    enterText: text => ReactTestUtils.Simulate.change(input, {target: {value: text}}),\n    getValue: () => input.value,\n    getPlaceholder: () => input.placeholder,\n    getDefaultValue: () => input.defaultValue,\n    getTabIndex: () => input.tabIndex,\n    getReadOnly: () => input.readOnly,\n    getTextOverflow: () => input.style['text-overflow'],\n    getAriaLabel: () => input.getAttribute('aria-label'),\n    getAriaControls: () => input.getAttribute('aria-controls'),\n    getAriaDescribedby: () => input.getAttribute('aria-describedby'),\n    getAutocomplete: () => input.getAttribute('autocomplete'),\n    getType: () => input.type,\n    hasPrefix: () => element.querySelectorAll(`.${styles.prefix}`).length === 1,\n    hasPrefixClass: () => element.querySelectorAll(`.${styles.input}.${styles.withPrefix}`).length === 1,\n    hasSuffix: () => !!suffixNode,\n    hasSuffixClass: () => element.querySelectorAll(`.${styles.input}.${styles.withSuffix}`).length === 1,\n    hasSuffixesClass: () => element.querySelectorAll(`.${styles.input}.${styles.withSuffixes}`).length === 1,\n    prefixComponentExists: style => !!element.querySelector(`.${styles.prefix} ${style}`),\n    suffixComponentExists: style => !!element.querySelector(`.${styles.suffix} ${style}`),\n    isMenuArrowLast: () => element.querySelectorAll(`.${styles.suffixes} .${styles.suffix}:last-child > .${styles.menuArrow}`).length === 1,\n    hasExclamation: () => !!element.querySelector(`.${styles.exclamation}`),\n    hasHelp: () => !!element.querySelector(`.${styles.help}`),\n    hasError: () => element.classList.contains(styles.hasError),\n    getTooltipElement: () => element,\n    getTooltipDataHook: () => 'input-tooltip',\n    getDataHook: () => element.getAttribute('data-hook'),\n    getUnit: () => element.querySelector(`.${styles.unit}`).textContent,\n    hasMagnifyingGlass: () => !!element.querySelector(`.${styles.magnifyingGlass}`),\n    hasMenuArrow: () => !!element.querySelector(`.${styles.menuArrow}`),\n    hasClearButton: () => !!clearButton,\n    isRTL: () => element.className.indexOf(styles.rtl) >= 0,\n    isFocusedStyle: () => element.classList.contains(styles.hasFocus),\n    isHoveredStyle: () => element.classList.contains(styles.hasHover),\n    isDisabled: () => element.classList.contains(styles.disabled),\n    isOfStyle: style => element.classList.contains(styles[`theme-${style}`]),\n    isOfSize: size => element.classList.contains(styles[`size-${size}`]),\n    isFocus: () => document.activeElement === input,\n    exists: () => !!(element && element.querySelector('input')),\n    startComposing: () => ReactTestUtils.Simulate.compositionStart(input),\n    endComposing: () => ReactTestUtils.Simulate.compositionEnd(input),\n    setProps: props => {\n      const ClonedWithProps = React.cloneElement(component, Object.assign({}, component.props, props), ...(component.props.children || []));\n      ReactDOM.render(<div ref={r => element = r}>{ClonedWithProps}</div>, wrapper);\n    }\n  };\n\n  return driver;\n};\n\nexport default inputDriverFactory;\n"}});