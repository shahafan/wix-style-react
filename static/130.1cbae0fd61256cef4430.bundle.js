webpackJsonp([130],{1827:function(module,exports){module.exports="import React from 'react';\nimport ReactTestUtils from 'react-dom/test-utils';\nimport textDriverFactory from './Text.driver';\nimport {createDriverFactory} from '../test-common';\nimport {textTestkitFactory} from '../../testkit';\nimport {textTestkitFactory as enzymeTextTestkitFactory} from '../../testkit/enzyme';\nimport {mount} from 'enzyme';\n\nimport Text from './Text';\nimport styles from './styles.scss';\nimport typography from '../Typography';\n\ndescribe('Component: Text', () => {\n  const createDriver = createDriverFactory(textDriverFactory);\n\n  it('should render content in `span` tag', () => {\n    const driver = createDriver(<Text>zombo</Text>);\n    expect(driver.getType()).toBe('span');\n    expect(driver.getText()).toBe('zombo');\n  });\n\n  describe('when `appearance` prop is a heading', () => {\n    it('should render correct H tag', () => {\n      const appearancesAndTypes = [\n        ['H0', 'h1'],\n        ['H1', 'h2'],\n        ['H2', 'h3'],\n        ['H2.1', 'h3'],\n        ['H3', 'h4'],\n        ['H4', 'h5']\n      ];\n\n      appearancesAndTypes.map(([appearance, type]) => {\n        const driver = createDriver(<Text appearance={appearance}/>);\n        return expect(driver.getType()).toBe(type);\n      });\n    });\n\n    it('should have correct className', () => {\n      const appearancesAndClassNames = [\n        ['H0', typography.h0],\n        ['H1', typography.h1],\n        ['H2', typography.h2],\n        ['H2.1', typography.h2_1],\n        ['H3', typography.h3],\n        ['H4', typography.h4]\n      ];\n\n      appearancesAndClassNames.map(([appearance, className]) => {\n        const driver = createDriver(<Text appearance={appearance}/>);\n        return expect(driver.getClassName()).toEqual(`${className} ${styles.headingDefaults}`);\n      });\n    });\n  });\n\n  describe('when `appearance` prop is a T', () => {\n    it('should render span', () => {\n      [\n        'T1', 'T1.1', 'T1.2', 'T1.3', 'T1.4',\n        'T2', 'T2.1', 'T2.2', 'T2.3',\n        'T3', 'T3.1', 'T3.2', 'T3.3', 'T3.4',\n        'T4', 'T4.1', 'T4.2', 'T4.3',\n        'T5', 'T5.1'\n      ].map(appearance => {\n        const driver = createDriver(<Text appearance={appearance}/>);\n        return expect(driver.getType()).toBe('span');\n      });\n    });\n  });\n\n  describe('ellipsis prop', () => {\n    it('should not have ellipsis by default', () => {\n      const driver = createDriver(<Text>zombo</Text>);\n      expect(driver.hasEllipsis()).toBe(false);\n    });\n\n    it('should have ellipsis', () => {\n      const driver = createDriver(<Text ellipsis>zombo</Text>);\n      expect(driver.hasEllipsis()).toBe(true);\n    });\n\n    it('should not have title attribute when not given ellipsis prop', () => {\n      const driver = createDriver(<Text>zombo</Text>);\n      expect(driver.getTitle()).toBe('');\n    });\n\n    it('should not have title attribute when given ellipsis and forceHideTitle props', () => {\n      const driver = createDriver(<Text ellipsis forceHideTitle>zombo</Text>);\n      expect(driver.getTitle()).toBe('');\n    });\n\n    it('should not have title attribute when given ellipsis prop but none string children', () => {\n      const driver = createDriver(<Text ellipsis><span>zombo</span></Text>);\n      expect(driver.getTitle()).toBe('');\n    });\n\n    it('should have title attribute when given ellipsis prop', () => {\n      const driver = createDriver(<Text ellipsis>zombo</Text>);\n      expect(driver.getTitle()).toBe('zombo');\n    });\n  });\n});\n\ndescribe('testkit', () => {\n  it('should create new driver', () => {\n    const div = document.createElement('div');\n    const dataHook = 'myDataHook';\n    const wrapper = div.appendChild(ReactTestUtils.renderIntoDocument(<div><Text dataHook={dataHook} appearance=\"H0\"/></div>));\n    const textTestkit = textTestkitFactory({wrapper, dataHook});\n    expect(textTestkit.getType()).toBe('h1');\n  });\n});\n\ndescribe('enzyme testkit', () => {\n  it('should create new driver', () => {\n    const dataHook = 'myDataHook';\n    const wrapper = mount(<Text dataHook={dataHook} appearance=\"T1\">zombo</Text>);\n    const textTestkit = enzymeTextTestkitFactory({wrapper, dataHook});\n    expect(textTestkit.getText()).toBe('zombo');\n  });\n});\n"}});