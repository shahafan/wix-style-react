webpackJsonp([199],{1758:function(module,exports){module.exports="import React from 'react';\n\nimport searchDriverFactory from './Search.driver';\nimport Search from './Search';\nimport {createDriverFactory} from '../test-common';\nimport {\n  isTestkitExists,\n  isEnzymeTestkitExists\n} from '../../testkit/test-common';\nimport {searchTestkitFactory} from '../../testkit';\nimport {searchTestkitFactory as enzymeSearchTestkitFactory} from '../../testkit/enzyme';\nimport {runInputWithOptionsTest} from '../InputWithOptions/InputWithOptions.spec';\nimport {makeControlled} from '../../test/utils/utils';\n\nrunInputWithOptionsTest(searchDriverFactory);\n\nconst options = [\n  'The quick',\n  'brown',\n  'fox',\n  'jumps over',\n  'the lazy',\n  'dog'\n].map((value, index) => ({id: index, value}));\n\ndescribe('Search', () => {\n  const createDriver = createDriverFactory(searchDriverFactory);\n\n  describe('Controlled', () => {\n    const ControlledSearch = makeControlled(Search);\n\n    it('should show search options if initial value passed and input focused', () => {\n      const driver = createDriver(\n        <ControlledSearch\n          value=\"the\"\n          options={options}\n          />\n      );\n\n      expect(driver.dropdownLayoutDriver.isShown()).toBe(false);\n      driver.inputDriver.focus();\n      expect(driver.dropdownLayoutDriver.isShown()).toBe(true);\n    });\n\n    it('should not show search options when focusing empty input', () => {\n      const driver = createDriver(\n        <ControlledSearch\n          options={options}\n          />\n      );\n\n      expect(driver.dropdownLayoutDriver.isShown()).toBe(false);\n      driver.inputDriver.focus();\n      expect(driver.dropdownLayoutDriver.isShown()).toBe(false);\n    });\n\n    it('should filter search options if initial input value passed and input focused', () => {\n      const driver = createDriver(\n        <ControlledSearch\n          options={options}\n          value=\"fox\"\n          />\n      );\n\n      driver.inputDriver.focus();\n      expect(driver.dropdownLayoutDriver.optionsLength()).toBe(1);\n    });\n\n    it('should not treat spaces around search text as part of query', () => {\n      const driver = createDriver(\n        <ControlledSearch\n          options={options}\n          value=\"  fox  \"\n          />\n      );\n\n      driver.inputDriver.focus();\n      expect(driver.dropdownLayoutDriver.optionsLength()).toBe(1);\n    });\n\n    it('should render required elements of Search box', () => {\n      const driver = createDriver(\n        <ControlledSearch\n          options={options}\n          />\n      );\n\n      expect(driver.inputDriver.hasPrefix()).toBe(true);\n      expect(driver.inputDriver.getPlaceholder()).toBe('Search');\n      expect(driver.inputDriver.hasMenuArrow()).toBe(false);\n    });\n\n    it('should render clear text button if input is not empty', () => {\n      const driver = createDriver(\n        <ControlledSearch\n          options={options}\n          value=\"fox\"\n          />\n      );\n\n      expect(driver.inputDriver.hasClearButton()).toBe(true);\n    });\n\n    it('should unfocus Search after clear button click', () => {\n      const driver = createDriver(\n        <ControlledSearch\n          options={options}\n          value=\"fox\"\n          />\n      );\n\n      driver.inputDriver.clickClear();\n      expect(driver.inputDriver.isFocus()).toBe(false);\n    });\n\n    it('should collapse search options after clear button click', () => {\n      const driver = createDriver(\n        <ControlledSearch\n          options={options}\n          value=\"fox\"\n          />\n      );\n\n      driver.inputDriver.clickClear();\n      expect(driver.dropdownLayoutDriver.isShown()).toBe(false);\n    });\n\n    it('should do search when text was entered', () => {\n      const driver = createDriver(\n        <ControlledSearch\n          options={options}\n          />\n      );\n\n      driver.inputDriver.focus();\n      driver.inputDriver.enterText('fox');\n      expect(driver.dropdownLayoutDriver.optionsLength()).toBe(1);\n      driver.inputDriver.clearText();\n      driver.inputDriver.enterText('the');\n      expect(driver.dropdownLayoutDriver.optionsLength()).toBe(2);\n      driver.inputDriver.clearText();\n      driver.inputDriver.enterText('');\n      expect(driver.dropdownLayoutDriver.optionsLength()).toBe(options.length);\n    });\n\n    it('should show no results if nothing was found in options', () => {\n      const driver = createDriver(\n        <ControlledSearch\n          options={options}\n          />\n      );\n\n      driver.inputDriver.focus();\n      driver.inputDriver.enterText('option nowhere to be found');\n      expect(driver.dropdownLayoutDriver.optionsLength()).toBe(0);\n    });\n\n    // TODO: enhance Input component\n    it.skip('should focus search input if click on magnifying glass', () => {\n      const driver = createDriver(\n        <ControlledSearch\n          options={options}\n          value=\"fox\"\n          />\n      );\n\n      driver.inputDriver.clickSuffix();\n      expect(driver.inputDriver.isFocus()).toBe(true);\n    });\n  });\n\n  describe('Uncontrolled', () => {\n    it('should filter search options if initial defaultValue value passed and input focused', () => {\n      const driver = createDriver(\n        <Search\n          options={options}\n          defaultValue=\"fox\"\n          />\n      );\n\n      driver.inputDriver.focus();\n      expect(driver.dropdownLayoutDriver.optionsLength()).toBe(1);\n    });\n  });\n});\n\ndescribe('Testkits', () => {\n  it('Using ReactTestUtils testkit', () => {\n    expect(isTestkitExists(<Search options={options}/>, searchTestkitFactory)).toBe(true);\n  });\n\n  it('Using Enzyme testkit', () => {\n    expect(isEnzymeTestkitExists(<Search options={options}/>, enzymeSearchTestkitFactory)).toBe(true);\n  });\n});\n"}});