webpackJsonp([110],{1847:function(module,exports){module.exports="const DEFAULT_RULE = () =>\n  ({top: 0, left: 0});\n\nconst RULES = {\n  'top-left': (anchor, element, margin) => ({\n    top: anchor.top - element.height - margin,\n    left: anchor.left\n  }),\n  'top-center': (anchor, element, margin) => ({\n    top: anchor.top - element.height - margin,\n    left: (anchor.left + (anchor.width / 2)) - (element.width / 2)\n  }),\n  'top-right': (anchor, element, margin) => ({\n    top: anchor.top - element.height - margin,\n    left: anchor.left + anchor.width - element.width\n  }),\n  'bottom-left': (anchor, element, margin) => ({\n    top: anchor.top + anchor.height + margin,\n    left: anchor.left\n  }),\n  'bottom-center': (anchor, element, margin) => ({\n    top: anchor.top + anchor.height + margin,\n    left: (anchor.left + (anchor.width / 2)) - (element.width / 2)\n  }),\n  'bottom-right': (anchor, element, margin) => ({\n    top: anchor.top + anchor.height + margin,\n    left: anchor.left + anchor.width - element.width\n  }),\n  'left-top': (anchor, element, margin) => ({\n    top: anchor.top,\n    left: anchor.left - element.width - margin\n  }),\n  'left-center': (anchor, element, margin) => ({\n    top: anchor.top + (anchor.height / 2) - (element.height / 2),\n    left: anchor.left - element.width - margin\n  }),\n  'left-bottom': (anchor, element, margin) => ({\n    top: anchor.top + anchor.height - element.height,\n    left: anchor.left - element.width - margin\n  }),\n  'right-top': (anchor, element, margin) => ({\n    top: anchor.top,\n    left: anchor.left + anchor.width + margin\n  }),\n  'right-center': (anchor, element, margin) => ({\n    top: anchor.top + (anchor.height / 2) - (element.height / 2),\n    left: anchor.left + anchor.width + margin\n  }),\n  'right-bottom': (anchor, element, margin) => ({\n    top: anchor.top + anchor.height - element.height,\n    left: anchor.left + anchor.width + margin\n  })\n};\n\nconst RELATIVE_RULES = {\n  'top-left': (anchor, element, margin) => ({\n    top: -anchor.height - element.height - margin,\n    left: 0\n  }),\n  'top-center': (anchor, element, margin) => ({\n    top: -anchor.height - element.height - margin,\n    left: (anchor.width / 2) - (element.width / 2)\n  }),\n  'top-right': (anchor, element, margin) => ({\n    top: -anchor.height - element.height - margin,\n    left: anchor.width - element.width\n  }),\n  'bottom-left': (anchor, element, margin) => ({\n    top: margin,\n    left: 0\n  }),\n  'bottom-center': (anchor, element, margin) => ({\n    top: margin,\n    left: (anchor.width / 2) - (element.width / 2)\n  }),\n  'bottom-right': (anchor, element, margin) => ({\n    top: margin,\n    left: anchor.width - element.width\n  }),\n  'left-top': (anchor, element, margin) => ({\n    top: -anchor.height + margin,\n    left: -element.width - margin\n  }),\n  'left-center': (anchor, element, margin) => ({\n    top: (element.height / 2) - (anchor.height / 2),\n    left: -element.width - margin\n  }),\n  'left-bottom': (anchor, element, margin) => ({\n    top: -element.height - margin,\n    left: -element.width - margin\n  }),\n  'right-top': (anchor, element, margin) => ({\n    top: -anchor.height + margin,\n    left: anchor.width + margin\n  }),\n  'right-center': (anchor, element, margin) => ({\n    top: (element.height / 2) - (anchor.height / 2),\n    left: anchor.width + margin\n  }),\n  'right-bottom': (anchor, element, margin) => ({\n    top: -element.height - margin,\n    left: anchor.width + margin\n  })\n};\n\nexport default function position(anchor, element, params, relative = false) {\n  const {placement = 'top', alignment = 'center', margin = 20} = params;\n  const rules = relative ? RELATIVE_RULES : RULES;\n  return (rules[`${placement}-${alignment}`] || DEFAULT_RULE)(anchor, element, margin);\n}\n"}});