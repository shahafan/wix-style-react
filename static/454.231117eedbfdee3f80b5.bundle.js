webpackJsonp([454],{1503:function(module,exports){module.exports="import dataTableDriverFactory from './DataTable.driver';\nimport React from 'react';\nimport DataTable from './DataTable';\nimport ReactTestUtils from 'react-dom/test-utils';\nimport {createDriverFactory} from '../test-common';\nimport {dataTableTestkitFactory} from '../../testkit';\nimport {dataTableTestkitFactory as enzymeDataTableTestkitFactory} from '../../testkit/enzyme';\nimport {mount} from 'enzyme';\n\ndescribe('Table', () => {\n  const createDriver = createDriverFactory(dataTableDriverFactory);\n\n  const defaultProps = {\n    id: 'id',\n    data: [{a: 'value 1', b: 'value 2'}, {a: 'value 3', b: 'value 4'}],\n    columns: [\n      {title: 'Row Num', render: (row, rowNum) => rowNum},\n      {title: 'A', render: row => row.a},\n      {title: 'B', render: row => row.b}\n    ],\n    rowClass: 'class-name'\n  };\n\n  it('should pass id prop to child', () => {\n    const driver = createDriver(<DataTable {...defaultProps}/>);\n    expect(driver.hasChildWithId(defaultProps.id)).toBeTruthy();\n  });\n\n  it('should display nothing when data is empty', () => {\n    const props = {\n      ...defaultProps,\n      data: []\n    };\n\n    const driver = createDriver(<DataTable {...props}/>);\n    expect(driver.isDisplayingNothing()).toBeTruthy();\n  });\n\n  it('should display header only when data is empty and showHeaderWhenEmpty is true', () => {\n    const props = {\n      ...defaultProps,\n      data: [],\n      showHeaderWhenEmpty: true\n    };\n\n    const driver = createDriver(<DataTable {...props}/>);\n    expect(driver.isDisplayingHeaderOnly()).toBeTruthy();\n  });\n\n  it('should render column titles', () => {\n    const driver = createDriver(<DataTable {...defaultProps}/>);\n    expect(driver.getTitles()).toEqual(defaultProps.columns.map(col => col.title));\n  });\n\n  it('should display correct amount of rows', () => {\n    const driver = createDriver(<DataTable {...defaultProps}/>);\n    expect(driver.getRowsCount()).toBe(defaultProps.data.length);\n  });\n\n  it('should render rows', () => {\n    const driver = createDriver(<DataTable {...defaultProps}/>);\n    expect(driver.getRowText(0)).toEqual(['0', 'value 1', 'value 2']);\n    expect(driver.getRowText(1)).toEqual(['1', 'value 3', 'value 4']);\n  });\n\n  it('should assign class to rows', () => {\n    const driver = createDriver(<DataTable {...defaultProps}/>);\n    expect(driver.getRowsWithClassCount(defaultProps.rowClass)).toBe(defaultProps.data.length);\n  });\n\n  it('should assign a dynamic class to rows', () => {\n    const getClass = rowData => rowData.a.replace(/[\\s]+/g, '-');\n    const driver = createDriver(<DataTable {...defaultProps} dynamicRowClass={getClass}/>);\n    expect(driver.getRowsWithClassCount('value-1')).toBe(1);\n    expect(driver.getRowsWithClassCount('value-3')).toBe(1);\n    expect(driver.getRowsWithClassCount(defaultProps.rowClass)).toBe(defaultProps.data.length);\n  });\n\n  it('should assign dataHook to rows', () => {\n    const rowDataHook = 'row-data-hook';\n    const props = Object.assign({}, defaultProps, {rowDataHook});\n    const driver = createDriver(<DataTable {...props}/>);\n    expect(driver.getRowsWithDataHook(rowDataHook)[0].textContent).toBe('0value 1value 2');\n    expect(driver.getRowsWithDataHook(rowDataHook)[1].textContent).toBe('1value 3value 4');\n    expect(driver.getRowsWithDataHook(rowDataHook).length).toBe(defaultProps.data.length);\n  });\n\n  it('should assign a dynamic dataHook to rows', () => {\n    const calcDataHook = (rowData, rowIndex) => `row-index-${rowIndex}-a-${rowData.a.replace(' ', '_')}`;\n    const props = Object.assign({}, defaultProps, {rowDataHook: calcDataHook});\n    const driver = createDriver(<DataTable {...props}/>);\n    expect(driver.getRowWithDataHook(`row-index-0-a-value_1`).textContent).toBe('0value 1value 2');\n    expect(driver.getRowWithDataHook(`row-index-1-a-value_3`).textContent).toBe('1value 3value 4');\n  });\n\n  it('should get a row classes', () => {\n    const getDynamicClass = (rowData, rowNum) => rowNum === 1 ? 'rowNum1' : '';\n    const driver = createDriver(<DataTable {...defaultProps} dynamicRowClass={getDynamicClass}/>);\n    expect(driver.getRowClasses(1).sort()).toEqual(['class-name', 'rowNum1']);\n  });\n\n  it('should hide table header', () => {\n    const driver = createDriver(<DataTable {...defaultProps} hideHeader/>);\n    expect(driver.isDisplayingHeader()).toBe(false);\n  });\n\n  it('should override default table header styles', () => {\n    const inlineThStyle = {\n      thPadding: '1px',\n      thHeight: '2px',\n      thFontSize: '3px',\n      thBorder: '4px',\n      thColor: 'rgb(18, 52, 86)',\n      thOpacity: '0.8',\n      thLetterSpacing: '1.5px'\n    };\n    const driver = createDriver(<DataTable {...defaultProps} {...inlineThStyle}/>);\n    expect(driver.getHeaderCellStyle(0)).toEqual(jasmine.objectContaining({\n      padding: '1px',\n      height: '2px',\n      'font-size': '3px',\n      border: '4px',\n      color: 'rgb(18, 52, 86)',\n      opacity: '0.8',\n      'letter-spacing': '1.5px'\n    }));\n  });\n\n  it('should override default cell styles', () => {\n    const clonedProps = Object.assign({}, defaultProps);\n    clonedProps.columns.push({\n      title: 'c',\n      render: () => 'c',\n      style: {\n        padding: '1px',\n        height: '2px'\n      }\n    });\n    const driver = createDriver(<DataTable {...clonedProps}/>);\n    expect(driver.getCellStyle(0, 3)).toEqual(jasmine.objectContaining({\n      padding: '1px',\n      height: '2px'\n    }));\n  });\n\n  describe('clickableDataRow class', () => {\n    it('should not assign the class to rows by default', () => {\n      const props = {...defaultProps};\n\n      const driver = createDriver(<DataTable {...props}/>);\n\n      expect(driver.isRowClickable(0)).toBe(false);\n    });\n\n    it('should assign the class to rows when onRowClick prop is provided', () => {\n      const props = {\n        ...defaultProps,\n        onRowClick: jest.fn()\n      };\n\n      const driver = createDriver(<DataTable {...props}/>);\n      expect(driver.isRowClickable(0)).toBe(true);\n    });\n  });\n\n  describe('Row event handlers', () => {\n    const tests = [\n      {handler: 'onRowClick', driverMethod: 'clickRow'},\n      {handler: 'onMouseEnterRow', driverMethod: 'mouseEnterRow'},\n      {handler: 'onMouseLeaveRow', driverMethod: 'mouseLeaveRow'}\n    ];\n\n    tests.forEach(({handler, driverMethod}) => {\n      it(`should call ${handler} with row data and index`, () => {\n        const props = {\n          ...defaultProps,\n          [handler]: jest.fn()\n        };\n\n        const driver = createDriver(<DataTable {...props}/>);\n\n        driver[driverMethod](0);\n        expect(props[handler]).toBeCalledWith(props.data[0], 0);\n\n        driver[driverMethod](1);\n        expect(props[handler]).toHaveBeenLastCalledWith(props.data[1], 1);\n      });\n    });\n\n    it('should expand with correct content and collapse', () => {\n      const animationSpeed = 500;\n\n      const props = {\n        ...defaultProps,\n        rowDetails: row => <span>{row.a}</span>\n      };\n\n      const driver = createDriver(<DataTable {...props}/>);\n      expect(driver.hasRowDetails(0)).toBe(true);\n      expect(driver.getRowDetailsText(0)).toBe('');\n      driver.clickRow(0);\n\n      // After clicking content will appear at once\n      expect(driver.getRowDetailsText(0)).toBe(defaultProps.data[0].a);\n      driver.clickRow(0);\n      expect(driver.hasRowDetails(0)).toBe(true);\n\n      // When we clicking second time to collapse content will disappear after a while (based on animation speed)\n      expect(driver.getRowDetailsText(0)).not.toBe('');\n\n      return new Promise(resolve => {\n        setTimeout(() => {\n          expect(driver.getRowDetailsText(0)).toBe('');\n        }, animationSpeed);\n        resolve();\n      });\n    });\n\n    it('should assign the class to rows when rowDetails prop is provided', () => {\n      const props = {\n        ...defaultProps,\n        rowDetails: jest.fn()\n      };\n\n      const driver = createDriver(<DataTable {...props}/>);\n      expect(driver.isRowClickable(0)).toBe(true);\n    });\n\n    it('should have correct row count when row details enabled', () => {\n      const props = {\n        ...defaultProps,\n        rowDetails: jest.fn()\n      };\n\n      const driver = createDriver(<DataTable {...props}/>);\n      expect(driver.getRowsCount()).toBe(2);\n      driver.clickRow(0);\n      expect(driver.getRowsCount()).toBe(2);\n    });\n  });\n\n  describe('Sortable column titles', () => {\n    const props = {\n      ...defaultProps,\n      columns: [\n        {title: 'Row Num', render: (row, rowNum) => rowNum},\n        {title: 'A', sortable: true, sortDescending: false, render: row => row.a},\n        {title: 'B', render: row => row.b},\n        {title: 'C', sortable: true, sortDescending: true, render: row => row.a}\n      ]\n    };\n    it('should display sortable title', () => {\n      const _props = Object.assign({}, props, {onSortClick: jest.fn()});\n      const driver = createDriver(<DataTable {..._props}/>);\n      expect(driver.hasSortableTitle(0)).toBe(false);\n      expect(driver.hasSortableTitle(1)).toBe(true);\n    });\n\n    it('should display sort asc/desc style', () => {\n      const _props = Object.assign({}, props, {onSortClick: jest.fn()});\n      const driver = createDriver(<DataTable {..._props}/>);\n      expect(driver.hasSortDescending(1)).toBe(false);\n      expect(driver.hasSortDescending(3)).toBe(true);\n    });\n\n    it('should call on sort callback', () => {\n      const _props = Object.assign({}, props, {onSortClick: jest.fn()});\n      const driver = createDriver(<DataTable {..._props}/>);\n      driver.clickSort(1);\n      expect(_props.onSortClick).toBeCalledWith(props.columns[1], 1);\n    });\n\n    it('should call on sort callback', () => {\n      const _props = Object.assign({}, props, {onSortClick: jest.fn()});\n      const driver = createDriver(<DataTable {..._props}/>);\n      driver.clickSort(2);\n      expect(_props.onSortClick).not.toHaveBeenCalled();\n    });\n  });\n  describe('testkit', () => {\n    it('should exist', () => {\n      const div = document.createElement('div');\n      const dataHook = 'myDataHook';\n      const wrapper = div.appendChild(ReactTestUtils.renderIntoDocument(<div>\n        <DataTable\n          dataHook={dataHook}\n          {...defaultProps}\n          />\n      </div>));\n      const dataTableTestkit = dataTableTestkitFactory({wrapper, dataHook});\n      expect(dataTableTestkit.hasChildWithId(defaultProps.id)).toBeTruthy();\n    });\n  });\n\n  describe('enzyme testkit', () => {\n    it('should exist', () => {\n      const dataHook = 'myDataHook';\n      const wrapper = mount(<DataTable {...defaultProps} dataHook={dataHook}/>);\n      const dataTableTestkit = enzymeDataTableTestkitFactory({wrapper, dataHook});\n      expect(dataTableTestkit.hasChildWithId(defaultProps.id)).toBeTruthy();\n    });\n  });\n});\n"}});