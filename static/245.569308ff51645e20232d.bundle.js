webpackJsonp([245],{1712:function(module,exports){module.exports="import React from 'react';\nimport ModalSelector from './ModalSelector';\nimport ModalSelectorFactory from './ModalSelector.driver';\nimport {createDriverFactory} from '../test-common';\nimport sinon from 'sinon';\nimport {isTestkitExists, isEnzymeTestkitExists} from '../../testkit/test-common';\nimport {modalSelectorTestkitFactory} from '../../testkit';\nimport {modalSelectorTestkitFactory as enzymeModalSelectorTestkitFactory} from '../../testkit/enzyme';\n\nfdescribe('ModalSelector', () => {\n  const createDriver = createDriverFactory(ModalSelectorFactory);\n\n  let props = {};\n\n  beforeEach(() => {\n    document.body.innerHTML = ''; //remove previous modals from body\n    props = {};\n    props.isOpen = true;\n    props.contentLabel = 'modal_' + Math.random();\n  });\n\n  describe('content', () => {\n    it(`should not render the modal content if not open by default`, () => {\n      props.isOpen = false;\n\n      const driver = createDriver(<ModalSelector {...props}>\n        <div data-hook=\"inner-div\"/>\n      </ModalSelector>);\n      expect(driver.getChildBySelector('[data-hook=\"inner-div\"]')).toBeNull();\n    });\n\n    it(`should render the passed children in the markup`, () => {\n      props.isOpen = true;\n      const driver = createDriver(<ModalSelector {...props}>\n        <div data-hook=\"inner-div\"/>\n      </ModalSelector>);\n      expect(driver.getChildBySelector('[data-hook=\"inner-div\"]')).not.toBeNull();\n    });\n\n    it(`should render the content prefix`, () => {\n      props.isOpen = true;\n      props.prefixContent = (<div data-hook=\"prefix-content-test\"/>);\n\n      const driver = createDriver(<ModalSelector {...props}/>);\n      expect(driver.getChildBySelector('[data-hook=\"prefix-content-test\"]')).not.toBeNull();\n    });\n\n    it(`should render the footer status`, () => {\n      props.isOpen = true;\n      props.footerStatus = (<div data-hook=\"footer-status-test\"/>);\n\n      const driver = createDriver(<ModalSelector {...props}/>);\n      expect(driver.getChildBySelector('[data-hook=\"footer-status-test\"]')).not.toBeNull();\n    });\n  });\n\n  describe('controls', () => {\n    it(`should disable the ok button by default`, () => {\n      props.isOpen = true;\n\n      const driver = createDriver(<ModalSelector {...props}/>);\n      expect(driver.isOkEnabled()).toBe(false);\n    });\n\n    it(`should enable the ok button`, () => {\n      props.isOpen = true;\n      props.enableOk = true;\n\n      const driver = createDriver(<ModalSelector {...props}/>);\n      expect(driver.isOkEnabled()).toBe(true);\n    });\n  });\n\n  describe('callbacks', () => {\n    it(`should trigger the onClose function when clicking the close button`, () => {\n      props.onClose = sinon.spy();\n\n      const driver = createDriver(<ModalSelector {...props}/>);\n      driver.clickOnClose();\n\n      expect(props.onClose.calledOnce).toBeTruthy();\n    });\n\n    it(`should trigger the onOk function when clicking the ok button`, () => {\n      props.onOk = sinon.spy();\n      props.enableOk = true;\n\n      const driver = createDriver(<ModalSelector {...props}/>);\n      driver.clickOnOk();\n\n      expect(props.onOk.calledOnce).toBeTruthy();\n    });\n\n    it(`should trigger the onCancel function when clicking the cancel button`, () => {\n      props.onCancel = sinon.spy();\n\n      const driver = createDriver(<ModalSelector {...props}/>);\n      driver.clickOnCancel();\n\n      expect(props.onCancel.calledOnce).toBeTruthy();\n    });\n\n    it(`should trigger the onCancel function when clicking the cancel button`, () => {\n      props.onCancel = sinon.spy();\n\n      const driver = createDriver(<ModalSelector {...props}/>);\n      driver.clickOnCancel();\n\n      expect(props.onCancel.calledOnce).toBeTruthy();\n    });\n  });\n\n  describe('testkit', () => {\n    it('should exist', () => {\n      expect(isTestkitExists(<ModalSelector {...props}/>, modalSelectorTestkitFactory)).toBe(true);\n    });\n  });\n\n  describe('enzyme testkit', () => {\n    it('should exist', () => {\n      expect(isEnzymeTestkitExists(<ModalSelector {...props}/>, enzymeModalSelectorTestkitFactory)).toBe(true);\n    });\n  });\n});\n"}});