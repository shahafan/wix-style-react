webpackJsonp([453],{1504:function(module,exports){module.exports="import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n// This is a copy of https://github.com/CassetteRocks/react-infinite-scroller with https://github.com/CassetteRocks/react-infinite-scroller/pull/38/files merged\nexport default class InfiniteScroll extends Component {\n  static propTypes = {\n    hasMore: PropTypes.bool,\n    initialLoad: PropTypes.bool,\n    loadMore: PropTypes.func.isRequired,\n    pageStart: PropTypes.number,\n    threshold: PropTypes.number,\n    useWindow: PropTypes.bool,\n    isReverse: PropTypes.bool,\n    scrollElement: PropTypes.object,\n    children: PropTypes.node,\n    loader: PropTypes.node\n  };\n\n  static defaultProps = {\n    hasMore: false,\n    initialLoad: true,\n    pageStart: 0,\n    threshold: 250,\n    useWindow: true,\n    isReverse: false,\n    scrollElement: null\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.scrollListener = this.scrollListener.bind(this);\n  }\n\n  componentDidMount() {\n    this.pageLoaded = this.props.pageStart;\n    this.attachScrollListener();\n    if (this.props.initialLoad) {\n      this.scrollListener();\n    }\n  }\n\n  componentDidUpdate() {\n    this.attachScrollListener();\n  }\n\n  render() {\n    const {\n      children,\n      hasMore,\n      loader,\n      scrollElement\n    } = this.props;\n    let ref;\n\n    if (scrollElement) {\n      ref = () => this.scrollComponent = scrollElement;\n    } else {\n      ref = node => this.scrollComponent = node;\n    }\n\n    return React.createElement('div', {ref}, children, hasMore && (loader || this._defaultLoader));\n  }\n\n  calculateTopPosition(el) {\n    if (!el) {\n      return 0;\n    }\n    return el.offsetTop + this.calculateTopPosition(el.offsetParent);\n  }\n\n  scrollListener() {\n    const el = this.scrollComponent;\n    const scrollEl = window;\n\n    let offset;\n    if (this.props.scrollElement) {\n      if (this.props.isReverse) {\n        offset = el.scrollTop;\n      } else {\n        offset = el.scrollHeight - el.scrollTop - el.clientHeight;\n      }\n    } else if (this.props.useWindow) {\n      const scrollTop = (scrollEl.pageYOffset !== undefined) ? scrollEl.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n      if (this.props.isReverse) {\n        offset = scrollTop;\n      } else {\n        offset = this.calculateTopPosition(el) + el.offsetHeight - scrollTop - window.innerHeight;\n      }\n    } else if (this.props.isReverse) {\n      offset = el.parentNode.scrollTop;\n    } else {\n      offset = el.scrollHeight - el.parentNode.scrollTop - el.parentNode.clientHeight;\n    }\n\n    if (offset < Number(this.props.threshold)) {\n      this.detachScrollListener();\n      // Call loadMore after detachScrollListener to allow for non-async loadMore functions\n      if (typeof this.props.loadMore === 'function') {\n        this.props.loadMore(this.pageLoaded += 1);\n      }\n    }\n  }\n\n  attachScrollListener() {\n    this.detachScrollListener();\n\n    if (!this.props.hasMore) {\n      return;\n    }\n\n    let scrollEl = window;\n    if (this.props.scrollElement) {\n      scrollEl = this.scrollComponent;\n    } else if (this.props.useWindow === false) {\n      scrollEl = this.scrollComponent.parentNode;\n    }\n\n    scrollEl.addEventListener('scroll', this.scrollListener);\n    scrollEl.addEventListener('resize', this.scrollListener);\n\n    this.detachScrollListener = () => {\n      scrollEl.removeEventListener('scroll', this.scrollListener);\n      scrollEl.removeEventListener('resize', this.scrollListener);\n      this.detachScrollListener = () => {};\n    };\n  }\n\n  detachScrollListener = () => {};\n\n  componentWillUnmount() {\n    this.detachScrollListener();\n  }\n\n  // Set a defaut loader for all your `InfiniteScroll` components\n  setDefaultLoader(loader) {\n    this._defaultLoader = loader;\n  }\n}\n"}});