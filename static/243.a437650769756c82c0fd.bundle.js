webpackJsonp([243],{1714:function(module,exports){module.exports="import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tag from '../Tag/Tag';\nimport Input from '../Input';\nimport styles from './InputWithTags.scss';\nimport omit from 'omit';\nimport classNames from 'classnames';\nimport isUndefined from 'lodash/isUndefined';\n\nclass InputWithTags extends React.Component {\n  constructor(props) {\n    super(props);\n    this.focus = this.focus.bind(this);\n    this.blur = this.blur.bind(this);\n    this.select = this.select.bind(this);\n\n    this.state = {inputValue: '', inputHasFocus: false};\n  }\n\n  componentDidMount() {\n    this.props.autoFocus && this.props.onFocus();\n  }\n\n  handleInputFocus() {\n    this.input.focus();\n    this.setState({inputHasFocus: true});\n  }\n\n  handleInputBlur() {\n    this.setState({inputHasFocus: false});\n  }\n\n  render() {\n    const {tags, onRemoveTag, placeholder, error, disabled, delimiters, ...inputProps} = this.props;\n    const hasFocus = this.state.inputHasFocus;\n\n    const className = classNames({\n      [styles.tagsContainer]: true,\n      [styles.disabled]: disabled,\n      [styles.error]: error,\n      [styles.hasFocus]: hasFocus,\n      [styles.hasMaxHeight]: !isUndefined(this.props.maxHeight) || !isUndefined(this.props.maxNumRows)\n    });\n\n    const desiredProps = omit(['onManuallyInput', 'inputElement', 'closeOnSelect', 'predicate', 'menuArrow', 'onClickOutside', 'fixedHeader', 'fixedFooter', 'dataHook'], inputProps);\n    const fontSize = (desiredProps.size && desiredProps.size === 'small') ? '14px' : '16px';\n\n    let rowMultiplier;\n    if (tags.length && tags[0].size === 'large') {\n      rowMultiplier = 48;\n    } else {\n      rowMultiplier = 36;\n    }\n    const maxHeight = this.props.maxHeight || this.props.maxNumRows * rowMultiplier || 'initial';\n\n    return (\n      <div\n        className={className}\n        style={{maxHeight}}\n        onClick={() => this.handleInputFocus()}\n        data-hook={this.props.dataHook}\n        >\n        {tags.map(({label, ...rest}) => <Tag key={rest.id} disabled={disabled} onRemove={onRemoveTag} {...rest}>{label}</Tag>)}\n        <span className={styles.input} data-hook=\"inner-input-with-tags\">\n          <div className={styles.hiddenDiv} style={{fontSize}}>\n            {this.state.inputValue}\n          </div>\n\n          <Input\n            width={this.props.width}\n            ref={input => this.input = input}\n            onBlur={() => this.handleInputBlur()}\n            placeholder={tags.length === 0 ? placeholder : ''}\n            {...desiredProps}\n            disabled={disabled}\n            onChange={e => {\n              if (!delimiters.includes(e.target.value)) {\n                this.setState({inputValue: e.target.value});\n                desiredProps.onChange && desiredProps.onChange(e);\n              }\n            }}\n            />\n        </span>\n      </div>\n    );\n  }\n\n  focus() {\n    this.input.focus();\n  }\n\n  blur() {\n    this.input.blur();\n  }\n\n  select() {\n    this.input.select();\n  }\n\n  clear() {\n    this.setState({\n      inputValue: ''\n    });\n  }\n}\n\nInputWithTags.propTypes = {\n  onRemoveTag: PropTypes.func,\n  tags: PropTypes.array,\n  maxHeight: PropTypes.string,\n  maxNumRows: PropTypes.number,\n  onKeyDown: PropTypes.func,\n  dataHook: PropTypes.string,\n  placeholder: PropTypes.string,\n  onFocus: PropTypes.func,\n  autoFocus: PropTypes.bool,\n  disabled: PropTypes.bool,\n  error: PropTypes.bool,\n  delimiters: PropTypes.array,\n  width: PropTypes.string\n};\n\nInputWithTags.defaultProps = {\n  onRemoveTag: () => {},\n  tags: [],\n  placeholder: '',\n  delimiters: []\n};\n\nexport default InputWithTags;\n"}});