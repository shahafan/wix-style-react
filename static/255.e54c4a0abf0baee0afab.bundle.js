webpackJsonp([255],{1702:function(module,exports){module.exports="import React from 'react';\nimport MessageBoxMarketerialLayout from './MessageBoxMarketerialLayout';\nimport MessageBoxMarketerialLayoutFactory from './MessageBoxMarketerialLayout.driver';\nimport {createDriverFactory} from '../test-common';\nimport sinon from 'sinon';\nimport {isTestkitExists, isEnzymeTestkitExists} from '../../testkit/test-common';\nimport {messageBoxMarketerialLayoutTestkitFactory} from '../../testkit';\nimport {messageBoxMarketerialLayoutTestkitFactory as enzymeMessageBoxTestkitFactory} from '../../testkit/enzyme';\n\ndescribe('MessageBoxMarketerialLayout', () => {\n  const createDriver = createDriverFactory(MessageBoxMarketerialLayoutFactory);\n  const requiredProps = {\n    title: 'title',\n    content: <div/>,\n    onClose: () => {}\n  };\n\n  describe('action buttons', () => {\n    it('should display the primary button label text on top the primary button', () => {\n      const props = Object.assign({}, requiredProps, {\n        primaryButtonLabel: 'primaryButtonLabel'\n      });\n      const driver = createDriver(<MessageBoxMarketerialLayout {...props}/>);\n      expect(driver.getPrimaryButtonText()).toBe(props.primaryButtonLabel);\n    });\n\n    it('should not display the primary button if primary button label was not passed', () => {\n      const props = Object.assign({}, requiredProps, {\n      });\n      const driver = createDriver(<MessageBoxMarketerialLayout {...props}/>);\n      expect(driver.getPrimaryButton()).toBeNull();\n    });\n\n    it('should display the secondary button label text on top the secondary button', () => {\n      const props = Object.assign({}, requiredProps, {\n        secondaryButtonLabel: 'secondaryButtonLabel'\n      });\n      const driver = createDriver(<MessageBoxMarketerialLayout {...props}/>);\n      expect(driver.getSecondaryButtonText()).toBe(props.secondaryButtonLabel);\n    });\n\n    it('should not display the secondary button if secondary button label was not passed', () => {\n      const props = Object.assign({}, requiredProps, {\n      });\n      const driver = createDriver(<MessageBoxMarketerialLayout {...props}/>);\n      expect(driver.getSecondaryButton()).toBeNull();\n    });\n\n    it(`should trigger the primary button action upon clicking the primary button`, () => {\n      const props = Object.assign({}, requiredProps, {\n        onPrimaryButtonClick: sinon.spy(),\n        primaryButtonLabel: 'primaryButtonLabel'\n      });\n      const driver = createDriver(<MessageBoxMarketerialLayout {...props}/>);\n      driver.clickOnPrimaryButton();\n      expect(props.onPrimaryButtonClick.calledOnce).toBeTruthy();\n    });\n\n    it(`should trigger the secondary button action upon clicking the secondary button`, () => {\n      const props = Object.assign({}, requiredProps, {\n        onSecondaryButtonClick: sinon.spy(),\n        secondaryButtonLabel: 'secondaryButtonLabel'\n      });\n      const driver = createDriver(<MessageBoxMarketerialLayout {...props}/>);\n      driver.clickOnSecondaryButton();\n      expect(props.onSecondaryButtonClick.calledOnce).toBeTruthy();\n    });\n\n    it(`should close the message dialog upon clicking the close button`, () => {\n      const props = Object.assign({}, requiredProps, {\n        onClose: sinon.spy()\n      });\n      const driver = createDriver(<MessageBoxMarketerialLayout {...props}/>);\n      driver.closeMessageBox();\n      expect(props.onClose.calledOnce).toBeTruthy();\n    });\n  });\n\n  describe('general', () => {\n    it(`should render title`, () => {\n      const props = Object.assign({}, requiredProps, {\n        title: 'title'\n      });\n      const driver = createDriver(<MessageBoxMarketerialLayout {...props}/>);\n      expect(driver.getTitle()).toBe(props.title);\n    });\n\n    it(`should render the passed content in the markup`, () => {\n      const props = Object.assign({}, requiredProps, {\n        content: <div data-hook=\"inner-div\"/>\n      });\n      const driver = createDriver(<MessageBoxMarketerialLayout {...props}/>);\n      expect(driver.getContentBySelector('[data-hook=\"inner-div\"]')).not.toBeNull();\n    });\n\n    it(`should render image from given imageUrl`, () => {\n      const props = Object.assign({}, requiredProps, {\n        imageUrl: 'http://www.domstechblog.com/wp-content/uploads/2015/09/wix.png'\n      });\n      const driver = createDriver(<MessageBoxMarketerialLayout {...props}/>);\n      expect(driver.getImageSrc()).toBe(props.imageUrl);\n    });\n\n    it(`should render image from given component`, () => {\n      const props = Object.assign({}, requiredProps, {\n        imageComponent: <div data-hook=\"image-component-test\"/>\n      });\n      const driver = createDriver(<MessageBoxMarketerialLayout {...props}/>);\n      expect(driver.getContentBySelector('[data-hook=\"image-component-test\"]')).not.toBeNull();\n    });\n\n    it(`should use default color theme (blue) if none was passed`, () => {\n      const props = Object.assign({}, requiredProps, {\n        primaryButtonLabel: 'primaryButtonLabel'\n      });\n      const driver = createDriver(<MessageBoxMarketerialLayout {...props}/>);\n      expect(driver.getPrimaryButton().className).toContain('fullblue');\n    });\n\n    it(`should use color theme`, () => {\n      const props = Object.assign({}, requiredProps, {\n        primaryButtonLabel: 'primaryButtonLabel',\n        theme: 'purple'\n      });\n      const driver = createDriver(<MessageBoxMarketerialLayout {...props}/>);\n      expect(driver.getPrimaryButton().className).toContain('fullpurple');\n    });\n\n  });\n\n  describe('testkit', () => {\n    it('should exist', () => {\n      expect(isTestkitExists(<MessageBoxMarketerialLayout {...requiredProps}/>, messageBoxMarketerialLayoutTestkitFactory)).toBe(true);\n    });\n  });\n\n  describe('enzyme testkit', () => {\n    it('should exist', () => {\n      expect(isEnzymeTestkitExists(<MessageBoxMarketerialLayout {...requiredProps}/>, enzymeMessageBoxTestkitFactory)).toBe(true);\n    });\n  });\n});\n"}});