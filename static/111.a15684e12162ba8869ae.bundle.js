webpackJsonp([111],{1846:function(module,exports){module.exports="import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport styles from './TooltipContent.scss';\n\nclass TooltipContent extends Component {\n\n  static propTypes = {\n    textAlign: PropTypes.string,\n\n    maxWidth: PropTypes.string,\n    /**\n     * Tooltip content to be rendered\n     */\n    children: PropTypes.node.isRequired,\n\n    /**\n     * Specifies tooltip theme\n     */\n    theme: PropTypes.oneOf(['light', 'dark', 'error']),\n\n    /**\n     * Specifies on which side the arrow should be shown\n     */\n    arrowPlacement: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\n\n    /**\n     * Custom CSS style object (used to allow setting arrow position)\n     */\n    arrowStyle: PropTypes.object,\n\n    /**\n     * Custom CSS style object (used to allow setting the position)\n     */\n    style: PropTypes.object,\n\n    /**\n     * Custom padding (not part of style since it is to the internal component)\n     */\n    padding: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n    /**\n     * Callback triggered when mouse enters the component\n     * Used for showing tooltip when mouse leaves the target element, but hovers the tooltip itself\n     */\n    onMouseEnter: PropTypes.func,\n\n    /**\n     * Callback triggered when mouse leaves the component\n     * Used for showing tooltip when mouse leaves the target element, but hovers the tooltip itself\n     */\n    onMouseLeave: PropTypes.func,\n\n    /**\n     * Specifies if tooltip content should use bouncing animation.\n     */\n    bounce: PropTypes.bool,\n    size: PropTypes.oneOf(['normal', 'large']),\n\n    /**\n     * Specifies the font color of the content of the tooltip\n     */\n    color: PropTypes.string,\n    lineHeight: PropTypes.string\n  };\n\n  static defaultProps = {\n    theme: 'light',\n    arrowPlacement: 'bottom',\n    maxWidth: '378px',\n    size: 'normal',\n    textAlign: 'center'\n  };\n\n  render() {\n\n    const {\n      children,\n      theme,\n      arrowPlacement,\n      arrowStyle,\n      style,\n      onMouseEnter,\n      onMouseLeave,\n      bounce,\n      size,\n      textAlign,\n      maxWidth,\n      padding,\n      color,\n      lineHeight\n    } = this.props;\n\n    return (\n      <div className={styles.root} style={style} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\n        <div className={styles.fadeIn}>\n          <div className={classnames({[styles[`bounce-on-${arrowPlacement}`]]: bounce})}>\n            <div ref={ref => this.tooltip = ref} className={classnames(styles.tooltip, styles[theme], styles[size])} style={{maxWidth, textAlign, padding, lineHeight, color}}>\n              <div>{children}</div>\n              <div className={classnames(styles.arrow, styles[arrowPlacement])} style={arrowStyle}/>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default TooltipContent;\n"}});