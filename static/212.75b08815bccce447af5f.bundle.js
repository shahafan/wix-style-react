webpackJsonp([212],{1745:function(module,exports){module.exports="import React from 'react';\nimport {createDriverFactory} from '../test-common';\nimport richTextAreaDriverFactory from './RichTextArea.driver';\nimport RichTextArea from './RichTextArea';\n\nconst mockGetSelection = () => {\n  const original = window.getSelection;\n  const fn = () => ({});\n  fn.restore = () => window.getSelection = original;\n  window.getSelection = fn;\n};\n\ndescribe('RichTextArea', () => {\n  let currentValue;\n\n  beforeEach(() => {\n    mockGetSelection();\n  });\n\n  afterEach(() => {\n    window.getSelection.restore();\n  });\n\n  it('should render value as text', () => {\n    const text = 'text content';\n    const driver = createComponent({\n      value: `<p>${text}</p>`\n    });\n    expect(driver.getContent()).toBe(text);\n  });\n\n  it('should call callback on change', () => {\n    const driver = createComponent();\n    const text = 'testing';\n    driver.enterText(text);\n    expect(currentValue).toBe(`<p>${text}</p>`);\n  });\n\n  it('should render buttons specified in props.buttons', () => {\n    const buttons = [\n      'bold',\n      'italic',\n      'underline',\n      'link',\n      'unordered-list',\n      'ordered-list'\n    ];\n    const driver = createComponent({buttons});\n    expect(driver.getButtonTypes()).toEqual(buttons);\n  });\n\n  it('should handle bold button click', () => {\n    const driver = createComponent({buttons: ['bold']});\n    driver.clickBoldButton();\n    driver.enterText('test');\n\n    expect(currentValue).toEqual('<p><strong>test</strong></p>');\n  });\n\n  it('should handle italic button click', () => {\n    const driver = createComponent({buttons: ['italic']});\n    driver.clickItalicButton();\n    driver.enterText('test');\n\n    expect(currentValue).toEqual('<p><em>test</em></p>');\n  });\n\n  it('should handle underline button click', () => {\n    const driver = createComponent({buttons: ['underline']});\n    driver.clickUnderlineButton();\n    driver.enterText('test');\n\n    expect(currentValue).toEqual('<p><u>test</u></p>');\n  });\n\n  it('should handle unordered-list button click', () => {\n    const driver = createComponent({buttons: ['unordered-list']});\n    driver.clickUnorderedListButton();\n    driver.enterText('test');\n\n    expect(currentValue).toEqual('<ul><li>test</li></ul>');\n  });\n\n  it('should handle ordered-list button click', () => {\n    const driver = createComponent({buttons: ['ordered-list']});\n    driver.clickOrderedListButton();\n    driver.enterText('test');\n\n    expect(currentValue).toEqual('<ol><li>test</li></ol>');\n  });\n\n  it('should show error indicator', () => {\n    const driver = createComponent({error: true});\n    expect(driver.isErrorIndicatorVisible()).toBeTruthy();\n  });\n\n  it('should render placeholder', () => {\n    const driver = createComponent({placeholder: 'HELLO'});\n    expect(driver.getContent()).toBe('HELLO');\n  });\n\n  it('should be disabled', () => {\n    const driver = createComponent({disabled: true});\n    expect(driver.isDisabled()).toBeTruthy();\n  });\n\n  describe('resizable attribute', () => {\n    it('should pass down to the wrapped input', () => {\n      const driver = createComponent({resizable: true});\n      expect(driver.isResizable()).toBeTruthy();\n    });\n\n    it('should pass down to the wrapped input with default false value', () => {\n      const driver = createComponent();\n      expect(driver.isResizable()).toBeFalsy();\n    });\n  });\n\n  describe('insert image', () => {\n    const onImageRequest = callback => {\n      callback('https://some-dom.com/ddec1e4d26f94cae963c8c54e9838749/600x600.jpg');\n    };\n\n    it('should not show insert image icon only when props does not contain \\'onImageRequest\\' callback', () => {\n      const driver = createComponent();\n      expect(driver.isAddImageButtonExist()).toBeFalsy();\n    });\n\n    it('should show insert image icon only when props does contain \\'onImageRequest\\' callback', () => {\n      const driver = createComponent({onImageRequest});\n      expect(driver.isAddImageButtonExist()).toBeTruthy();\n    });\n\n    it('should insert image to the editor', () => {\n      const driver = createComponent({onImageRequest});\n      expect(driver.isImageExist()).toBeFalsy();\n      driver.clickImageButton();\n      expect(driver.isImageExist()).toBeTruthy();\n    });\n\n    it('insert a default block after inserting an image, given an empty document', () => {\n      const driver = createComponent({onImageRequest});\n      driver.clickImageButton();\n      expect(driver.isDefaultBlockExist()).toBeTruthy();\n    });\n  });\n\n  const createDriver = createDriverFactory(richTextAreaDriverFactory);\n  function createComponent(props) {\n    const mergedProps = Object.assign({\n      onChange: newValue => currentValue = newValue\n    }, props);\n    return createDriver(<RichTextArea {...mergedProps}/>);\n  }\n});\n"}});