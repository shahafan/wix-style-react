webpackJsonp([252],{1705:function(module,exports){module.exports="import React from 'react';\nimport Modal from './Modal';\nimport ModalFactory from './Modal.driver';\nimport {createDriverFactory} from '../test-common';\nimport sinon from 'sinon';\nimport {isTestkitExists, isEnzymeTestkitExists} from '../../testkit/test-common';\nimport {modalTestkitFactory} from '../../testkit';\nimport {modalTestkitFactory as enzymeMessageBoxTestkitFactory} from '../../testkit/enzyme';\n\ndescribe('Modal', () => {\n  const createDriver = createDriverFactory(ModalFactory);\n\n  let props = {};\n\n  beforeEach(() => {\n    document.body.innerHTML = ''; //remove previous modals from body\n    props = {};\n    props.isOpen = true;\n    props.contentLabel = 'modal_' + Math.random();\n  });\n\n  describe('content', () => {\n\n    it(`should not render the modal content if not open by default`, () => {\n      props.isOpen = false;\n\n      const driver = createDriver(<Modal {...props}>\n        <div data-hook=\"inner-div\"/>\n      </Modal>);\n      expect(driver.getChildBySelector('[data-hook=\"inner-div\"]')).toBeNull();\n    });\n\n    it(`should render the passed children in the markup`, () => {\n      props.isOpen = true;\n      const driver = createDriver(<Modal {...props}>\n        <div data-hook=\"inner-div\"/>\n      </Modal>);\n      expect(driver.getChildBySelector('[data-hook=\"inner-div\"]')).not.toBeNull();\n    });\n\n  });\n\n  describe('callbacks', () => {\n    it(`should trigger the onAfterOpen function`, () => {\n      props.onAfterOpen = sinon.spy();\n\n      createDriver(<Modal {...props}/>);\n      expect(props.onAfterOpen.calledOnce).toBeTruthy();\n    });\n\n    it(`should trigger the onRequestClose function when clicking the overlay`, () => {\n\n      props.onRequestClose = sinon.spy();\n      props.shouldCloseOnOverlayClick = true;\n      props.closeTimeoutMS = 0;\n\n      const driver = createDriver(<Modal {...props}/>);\n      driver.clickOnOverlay();\n\n      expect(props.onRequestClose.calledOnce).toBeTruthy();\n    });\n\n    describe('timeout', () => {\n      let originalTimeout;\n\n      beforeEach(() => {\n        originalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;\n      });\n      afterEach(() => {\n        jasmine.DEFAULT_TIMEOUT_INTERVAL = originalTimeout;\n      });\n\n      it(`should wait closeTimeoutMS before removing the modal`, done => {\n        props.closeTimeoutMS = 400;\n        jasmine.DEFAULT_TIMEOUT_INTERVAL = props.closeTimeoutMS + 500;\n\n        const driver = createDriver(<Modal {...props}/>);\n        driver.setProps({\n          isOpen: false\n        });\n\n        setTimeout(() => {\n          expect(driver.isOpen()).toBeTruthy();\n        }, props.closeTimeoutMS - 50);\n\n        setTimeout(() => {\n          expect(driver.isOpen()).toBeFalsy();\n          done();\n        }, props.closeTimeoutMS + 50);\n      });\n    });\n  });\n\n  describe('theme', () => {\n    it('should set the theme by default to \"blue\"', () => {\n      const driver = createDriver(<Modal {...props}/>);\n      expect(driver.isThemeExist('blue')).toBeTruthy();\n    });\n\n    it('should allowing setting the theme', () => {\n      props.theme = 'green';\n      const driver = createDriver(<Modal {...props}/>);\n      expect(driver.isThemeExist('green')).toBeTruthy();\n      expect(driver.isThemeExist('blue')).toBeFalsy();\n    });\n  });\n\n  describe('scrollable', () => {\n    it('should be set to true by default', () => {\n      const driver = createDriver(<Modal {...props}/>);\n      expect(driver.isScrollable()).toBe(true);\n    });\n    it('should allow disabling the scrolling', () => {\n      const driver = createDriver(<Modal {...props} scrollable={false}/>);\n      expect(driver.isScrollable()).toBe(false);\n    });\n  });\n\n  describe('testkit', () => {\n    it('should exist', () => {\n      expect(isTestkitExists(<Modal {...props}/>, modalTestkitFactory)).toBe(true);\n    });\n  });\n\n  describe('enzyme testkit', () => {\n    it('should exist', () => {\n      expect(isEnzymeTestkitExists(<Modal {...props}/>, enzymeMessageBoxTestkitFactory)).toBe(true);\n    });\n  });\n\n\n});\n"}});