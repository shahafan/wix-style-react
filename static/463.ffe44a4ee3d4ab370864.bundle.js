webpackJsonp([463],{1494:function(module,exports){module.exports="import React from 'react';\nimport InputAreaWithLabelComposite from './InputAreaWithLabelComposite';\nimport Label from '../../Label';\nimport Input from '../../Input';\nimport InputArea from '../../InputArea';\nimport AutoComplete from '../../AutoComplete';\nimport textAreaDriverFactory from '../../TextArea/TextArea.driver';\nimport textFieldDriverFactory from '../../TextField/TextField.driver';\nimport autoCompleteCompositeDriverFactory from '../../AutoCompleteComposite/AutoCompleteComposite.driver';\nimport {createDriverFactory} from '../../test-common';\n\ndescribe('InputAreaWithLabelComposite', () => {\n  const createTextAreaDriver = createDriverFactory(textAreaDriverFactory);\n  const createTextFieldDriver = createDriverFactory(textFieldDriverFactory);\n  const createAutoCompleteDriver = createDriverFactory(autoCompleteCompositeDriverFactory);\n\n  it('should remove label wrapping when label not given', () => {\n    const driver = createTextFieldDriver(<InputAreaWithLabelComposite><Input/></InputAreaWithLabelComposite>);\n    expect(driver.hasLabel()).toBe(false);\n    expect(driver.getNumberOfChildren()).toBe(1);\n  });\n\n  it('should render Label with Input', () => {\n    const driver = createTextFieldDriver(<InputAreaWithLabelComposite><Label>myLabel</Label><Input/></InputAreaWithLabelComposite>);\n    expect(driver.hasLabel()).toBe(true);\n    expect(driver.getLabel()).toBe('myLabel');\n    expect(driver.hasInput()).toBe(true);\n  });\n\n  it('should render Label with InputArea', () => {\n    const driver = createTextAreaDriver(<InputAreaWithLabelComposite><Label/><InputArea/></InputAreaWithLabelComposite>);\n    expect(driver.hasLabel()).toBe(true);\n    expect(driver.hasInputArea()).toBe(true);\n  });\n\n  it('should render Label with AutoComplete', () => {\n    const driver = createAutoCompleteDriver(<InputAreaWithLabelComposite><Label/><AutoComplete/></InputAreaWithLabelComposite>);\n    expect(driver.hasLabel()).toBe(true);\n    expect(driver.hasAutoComplete()).toBe(true);\n  });\n\n  describe('label attributes', () => {\n    it('should FieldLabelAttributes not exists if all attributes empty or false', () => {\n      const driver = createAutoCompleteDriver(<InputAreaWithLabelComposite><Label>label</Label><InputArea/></InputAreaWithLabelComposite>);\n\n      expect(driver.hasFieldLabelAttributes()).toBe(false);\n    });\n\n    it('should FieldLabelAttributes exists if required', () => {\n      const driver = createAutoCompleteDriver(<InputAreaWithLabelComposite required><Label>label</Label><InputArea/></InputAreaWithLabelComposite>);\n\n      expect(driver.hasFieldLabelAttributes()).toBe(true);\n    });\n\n    it('should FieldLabelAttributes exists if required and with one child', () => {\n      const driver = createAutoCompleteDriver(<InputAreaWithLabelComposite required><InputArea/></InputAreaWithLabelComposite>);\n\n      expect(driver.hasFieldLabelAttributes()).toBe(true);\n    });\n\n    it('should FieldLabelAttributes exists if info', () => {\n      const driver = createAutoCompleteDriver(<InputAreaWithLabelComposite info=\"info\"><Label>label</Label><InputArea/></InputAreaWithLabelComposite>);\n\n      expect(driver.hasFieldLabelAttributes()).toBe(true);\n    });\n\n    it('should FieldLabelAttributes exists if info and with one child', () => {\n      const driver = createAutoCompleteDriver(<InputAreaWithLabelComposite info=\"info\"><InputArea/></InputAreaWithLabelComposite>);\n\n      expect(driver.hasFieldLabelAttributes()).toBe(true);\n    });\n  });\n});\n"}});