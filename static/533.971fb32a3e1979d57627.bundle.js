webpackJsonp([533],{1424:function(module,exports){module.exports="import React from 'react';\nimport ReactTestUtils from 'react-dom/test-utils';\nimport tooltipDriverFactory from './Tooltip.driver';\nimport Tooltip from './Tooltip';\nimport {createDriverFactory} from '../../test-common';\nimport {buttonTestkitFactory, backofficeTooltipTestkitFactory as tooltipTestkitFactory} from '../../../testkit';\nimport {backofficeTooltipTestkitFactory as enzymeTooltipTestkitFactory} from '../../../testkit/enzyme';\nimport {mount} from 'enzyme';\nimport {Button} from '../../../src/Backoffice';\nimport waitForCond from 'wait-for-cond';\n\ndescribe('Tooltip', () => {\n\n  const createDriver = createDriverFactory(tooltipDriverFactory);\n  const _props = {showDelay: 5, hideDelay: 5, content: <div>Some content</div>};\n  const children = <div>foo children</div>;\n\n  beforeEach(() => {\n    document.body.innerHTML = '';\n  });\n\n  it('should be hidden by default', () => {\n    const driver = createDriver(<Tooltip {..._props}>{children}</Tooltip>);\n    expect(driver.isShown()).toBeFalsy();\n  });\n\n  it('should show a tooltip once hovering', () => {\n    const driver = createDriver(<Tooltip {..._props}>{children}</Tooltip>);\n    driver.mouseEnter();\n    expect(driver.isShown()).toBeFalsy();\n    return waitFor.assert(() => expect(driver.isShown()).toBeTruthy());\n  });\n\n  it('should hide when mouse leaving', () => {\n    const driver = createDriver(<Tooltip {..._props}>{children}</Tooltip>);\n    driver.mouseEnter();\n    expect(driver.isShown()).toBeFalsy();\n\n    return waitFor\n      .assert(() => expect(driver.isShown()).toBeTruthy())\n      .then(() => driver.mouseLeave())\n      .then(() => waitFor.assert(() => expect(driver.isShown()).toBeFalsy()));\n  });\n\n  it('click triggers', () => {\n    const driver = createDriver(<Tooltip {...{..._props, showTrigger: 'click', hideTrigger: 'click'}}>{children}</Tooltip>);\n    driver.click();\n\n    return waitFor.assert(() => expect(driver.isShown()).toBeTruthy())\n      .then(() => {\n        driver.click();\n        return waitFor.assert(() => expect(driver.isShown()).toBeFalsy());\n      });\n  });\n\n  it('show on focus, hide on blur', () => {\n    const driver = createDriver(\n      <Tooltip {...{..._props, showTrigger: 'focus', hideTrigger: 'blur'}}>\n        <input/>\n      </Tooltip>\n    );\n\n    driver.focus();\n\n    return waitFor.assert(() => expect(driver.isShown()).toBeTruthy())\n      .then(() => {\n        driver.blur();\n        return waitFor.assert(() => expect(driver.isShown()).toBeFalsy());\n      });\n  });\n\n  it('hover trigger is disabled in click mode', () => {\n    const driver = createDriver(\n      <Tooltip {...{..._props, showTrigger: 'click', hideTrigger: 'click'}}>\n        {children}\n      </Tooltip>\n    );\n\n    driver.mouseEnter();\n\n    return waitFor.assertHold(() => expect(driver.isShown()).toBeFalsy(), 300);\n  });\n\n  it('custom mode - mouse enter does not hide', () => {\n    const driver = createDriver(\n      <Tooltip {...{..._props, showTrigger: 'custom', hideTrigger: 'custom'}} active>\n        <input/>\n      </Tooltip>\n    );\n\n    expect(driver.isShown()).toBeTruthy();\n\n    driver.mouseEnter();\n\n    return waitFor.assertHold(() => expect(driver.isShown()).toBeTruthy());\n  });\n\n  it('focus and blur triggers', () => {\n    const driver = createDriver(\n      <Tooltip {...{..._props, showTrigger: 'focus', hideTrigger: 'blur'}}>\n        <input/>\n      </Tooltip>\n    );\n\n    driver.focus();\n\n    return waitFor.assert(() => expect(driver.isShown()).toBeTruthy())\n      .then(() => {\n        driver.blur();\n        return waitFor.assert(() => expect(driver.isShown()).toBeFalsy());\n      });\n  });\n\n  it('should hide tooltip when using custom triggers', () => {\n    const props = {..._props, hideTrigger: 'custom', showTrigger: 'custom'};\n    const driver = createDriver(<Tooltip {...props}>{children}</Tooltip>);\n    driver.mouseEnter();\n\n    expect(driver.isShown()).toBeFalsy();\n    driver.setProps({...props, active: true});\n\n    return waitFor.assert(() => {\n      expect(driver.isShown()).toBeTruthy();\n    })\n    .then(() => {\n      driver.setProps({...props, active: false});\n\n      return waitFor.assert(() => {\n        expect(driver.isShown()).toBeFalsy();\n      });\n    });\n  });\n\n  it('should test inner component', () => {\n    const dataHook = 'button_data_hook';\n    const buttonContent = (\n      <div>\n        Custom Content...&nbsp;\n        <Button dataHook={dataHook} id=\"inner-button\" height=\"small\">Button content</Button>\n      </div>\n    );\n    const driver = createDriver(<Tooltip showDelay={5} hideDelay={5} content={buttonContent}>{children}</Tooltip>);\n    driver.mouseEnter();\n    expect(driver.isShown()).toBeFalsy();\n\n    return waitFor.assert(() => expect(driver.isShown()).toBeTruthy())\n    .then(() => {\n      const buttonTestkit = buttonTestkitFactory({wrapper: driver.getTooltipWrapper(), dataHook});\n      expect(buttonTestkit.getButtonTextContent()).toBe('Button content');\n    });\n  });\n\n  it('should not override focus event', () => {\n    const onFocus = jest.fn();\n    const onFocusedChild = <div onFocus={onFocus}>foo children</div>;\n    const driver = createDriver(<Tooltip {..._props}>{onFocusedChild}</Tooltip>);\n    driver.focus();\n    expect(onFocus).toBeCalled();\n  });\n\n  it('should not override blur event', () => {\n    const onBlur = jest.fn();\n    const onBluredChild = <div onBlur={onBlur}>foo children</div>;\n    const driver = createDriver(<Tooltip {..._props}>{onBluredChild}</Tooltip>);\n    driver.blur();\n    expect(onBlur).toBeCalled();\n  });\n\n  it('should not override click event', () => {\n    const onClick = jest.fn();\n    const onClickedChild = <div onClick={onClick}>foo children</div>;\n    const driver = createDriver(<Tooltip {..._props}>{onClickedChild}</Tooltip>);\n    driver.click();\n    expect(onClick).toBeCalled();\n  });\n\n  it('should not override mouse enter event', () => {\n    const onMouseEnter = jest.fn();\n    const onMouseEnteredChild = <div onMouseEnter={onMouseEnter}>foo children</div>;\n    const driver = createDriver(<Tooltip {..._props}>{onMouseEnteredChild}</Tooltip>);\n    driver.mouseEnter();\n    expect(onMouseEnter).toBeCalled();\n  });\n\n  it('should not override mouse leave event', () => {\n    const onMouseLeave = jest.fn();\n    const onMouseLeavedChild = <div onMouseLeave={onMouseLeave}>foo children</div>;\n    const driver = createDriver(<Tooltip {..._props}>{onMouseLeavedChild}</Tooltip>);\n    driver.mouseLeave();\n    expect(onMouseLeave).toBeCalled();\n  });\n\n  it('should support error theme', () => {\n    const driver = createDriver(<Tooltip theme={'error'} {..._props}>{children}</Tooltip>);\n    driver.mouseEnter();\n    return waitFor.assert(() => expect(driver.hasErrorTheme()).toBeTruthy());\n  });\n\n  it('should support dark theme', () => {\n    const driver = createDriver(<Tooltip theme={'dark'} {..._props}>{children}</Tooltip>);\n    driver.mouseEnter();\n    return waitFor.assert(() => expect(driver.hasDarkTheme()).toBeTruthy());\n  });\n\n  it('should support light theme', () => {\n    const driver = createDriver(<Tooltip theme={'light'} {..._props}>{children}</Tooltip>);\n    driver.mouseEnter();\n    return waitFor.assert(() => expect(driver.hasLightTheme()).toBeTruthy());\n  });\n\n  it('should have children', () => {\n    const driver = createDriver(<Tooltip {..._props}>{children}</Tooltip>);\n    expect(driver.getChildren()).toContain('foo children');\n  });\n\n  it('should have a content', () => {\n    const driver = createDriver(<Tooltip {..._props}>{children}</Tooltip>);\n    driver.mouseEnter();\n    return waitFor.assert(() => expect(driver.getContent()).toEqual('<div>Some content</div>'));\n  });\n\n  it('should cancel mouse leave, when followed by mouse enter immediately', () => {\n    const driver = createDriver(<Tooltip {..._props}>{children}</Tooltip>);\n    driver.mouseEnter();\n    driver.mouseLeave();\n    driver.mouseEnter();\n\n    return waitFor.assert(() => expect(driver.isShown()).toBe(true));\n  });\n\n  it('should call onShow when tooltip is shown', () => {\n    const onShow = jest.fn();\n    const driver = createDriver(<Tooltip {...{..._props, onShow}}>{children}</Tooltip>);\n\n    driver.mouseEnter();\n\n    expect(onShow).not.toHaveBeenCalled();\n    return waitFor.assert(() => expect(onShow).toHaveBeenCalled());\n  });\n\n  describe('placement attribute', () => {\n    it('should be top by default', () => {\n      const driver = createDriver(<Tooltip {...{..._props}}>{children}</Tooltip>);\n      driver.mouseEnter();\n\n      return waitFor.assert(() => expect(driver.getPlacement()).toEqual('top'));\n    });\n\n    ['top', 'bottom', 'left', 'right'].forEach(placement => {\n      it(`should be ${placement}`, () => {\n        const driver = createDriver(<Tooltip {...{..._props}} placement={placement}>{children}</Tooltip>);\n        driver.mouseEnter();\n\n        return waitFor.assert(() => expect(driver.getPlacement()).toBe(placement));\n      });\n    });\n\n    it('show with delay and immediately hide', () => {\n      const driver = createDriver(<Tooltip {...{..._props, hideDelay: 0, showDelay: 50}}>{children}</Tooltip>);\n      driver.mouseEnter();\n      driver.mouseLeave();\n\n      return waitFor.assertHold(() => expect(driver.isShown()).toBeFalsy());\n    });\n  });\n\n  describe('testkit', () => {\n    it('should exist', () => {\n      const div = document.createElement('div');\n      const dataHook = 'myDataHook';\n      const wrapper = div.appendChild(ReactTestUtils.renderIntoDocument(<div><Tooltip dataHook={dataHook} {..._props}>{children}</Tooltip></div>));\n      const driver = tooltipTestkitFactory({wrapper, dataHook});\n      driver.mouseEnter();\n      expect(driver.isShown()).toBeFalsy();\n      return waitFor.assert(() => expect(driver.isShown()).toBeTruthy());\n    });\n  });\n\n  describe('enzyme testkit', () => {\n    it('should exist', () => {\n      const dataHook = 'myDataHook';\n      const wrapper = mount(<Tooltip dataHook={dataHook} {..._props}>{children}</Tooltip>);\n      const driver = enzymeTooltipTestkitFactory({wrapper, dataHook});\n      driver.mouseEnter();\n      expect(driver.isShown()).toBeFalsy();\n      return waitFor.assert(() => expect(driver.isShown()).toBeTruthy());\n    });\n\n    it.skip('should remove a tooltip immediately once the component is destroyed', () => {\n      const dataHook = 'myDataHook';\n      const wrapper = mount(<Tooltip dataHook={dataHook} {..._props} hideDelay={1000}>{children}</Tooltip>);\n      const driver = enzymeTooltipTestkitFactory({wrapper, dataHook});\n      driver.mouseEnter();\n      return waitFor.assert(() => expect(driver.isShown()).toBeTruthy())\n      .then(() => {\n        wrapper.unmount();\n        expect(driver.isShown()).toBeFalsy();\n      });\n    });\n  });\n});\n\nfunction waitFor(predicate, msg) {\n  return waitForCond(predicate, 2000, msg);\n}\n\nwaitFor.assert = function (fn) {\n  return waitForCond.assert(fn, 2000);\n};\n\nwaitFor.assertHold = function (fn) {\n  return waitForCond.assertHold(fn, 500);\n};\n"}});