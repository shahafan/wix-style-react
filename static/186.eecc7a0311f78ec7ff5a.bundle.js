webpackJsonp([186],{1771:function(module,exports){module.exports="import React from 'react';\nimport SideMenu from '../index';\nimport SideMenuDrill from './index';\nimport {createDriverFactory} from '../../test-common';\nimport drillViewDriverFactory from './DrillView.driver';\n\ndescribe('DrillView', () => {\n  const linksPerLevel = 3;\n  const subMenusPerLevel = 2;\n  const createDriver = createDriverFactory(drillViewDriverFactory);\n  const getHeader = level => `Level ${level} - Start`;\n  const getFooter = level => `Level ${level} - End`;\n  let onClickSpy, onSubMenuClickSpy, onSubMenuBackSpy;\n\n  beforeEach(() => {\n    onClickSpy = jest.fn();\n    onSubMenuClickSpy = jest.fn();\n    onSubMenuBackSpy = jest.fn();\n  });\n\n  function createLinksForLevel(level, activeLink) {\n    const {activeLevel, activeIndex} = activeLink;\n    const isLevelActive = activeLevel === level;\n\n    return [...new Array(linksPerLevel)].map((_, i) => {\n      return (\n        <SideMenuDrill.Link key={`${level}_${i}`} isActive={isLevelActive && activeIndex === i}>\n          <a href=\"//wix.com\" onClick={onClickSpy}>Link {i}</a>\n        </SideMenuDrill.Link>\n      );\n    });\n  }\n\n  function createSubMenu(key, level, maxLevel, activeLink) {\n    const menuKey = `${key}_${level}`;\n    return (\n      <SideMenuDrill.SubMenu\n        key={menuKey}\n        menuKey={menuKey}\n        title={menuKey}\n        onSelectHandler={onSubMenuClickSpy}\n        onBackHandler={onSubMenuBackSpy}\n        >\n        <SideMenu.Header>\n          {getHeader(level)}\n        </SideMenu.Header>\n        <SideMenuDrill.Navigation>\n          {createLinksForLevel(level, activeLink)}\n          {createSubMenus(`${key}_${level}`, level + 1, maxLevel, activeLink)}\n        </SideMenuDrill.Navigation>\n        <SideMenu.Footer>\n          {getFooter(level)}\n        </SideMenu.Footer>\n      </SideMenuDrill.SubMenu>\n    );\n  }\n\n  function createSubMenus(key, level, maxLevel, activeLink) {\n    if (level > maxLevel) {\n      return <div/>;\n    }\n\n    return [...new Array(subMenusPerLevel)].map((_, i) => {\n      return createSubMenu(key + i, level, maxLevel, activeLink);\n    });\n  }\n\n  function createSideMenu(maxLevel, activeLink = {}) {\n    return createDriver(\n      <SideMenuDrill>\n        <SideMenu.Header>\n          {getHeader(0)}\n        </SideMenu.Header>\n        {createLinksForLevel(0, activeLink)}\n        {createSubMenus('SubMenu', 1, maxLevel, activeLink)}\n        <SideMenu.Footer>\n          {getFooter(0)}\n        </SideMenu.Footer>\n      </SideMenuDrill>\n    );\n  }\n\n  it('should have a sticky footer through props', () => {\n    const driver = createDriver(\n      <SideMenuDrill stickyFooter={<SideMenu.Footer>{getFooter(1)}</SideMenu.Footer>}>\n        {createLinksForLevel(0, {})}\n      </SideMenuDrill>\n    );\n\n    expect(!!driver.getStickyFooter()).toBe(true);\n  });\n\n  it('should render a one level drill view', () => {\n    const driver = createSideMenu(0);\n\n    expect(driver.getMenuDriver().headerContent()).toBe(getHeader(0));\n    expect(driver.getMenuDriver().footerContent()).toBe(getFooter(0));\n    expect(driver.getMenuDriver().navigationInnerLinks().length).toBe(linksPerLevel);\n  });\n\n  it('should render a one level drill view with an active item', () => {\n    const activeLevel = 0;\n    const activeIndex = 1;\n    const driver = createSideMenu(0, {activeLevel, activeIndex});\n\n    expect(driver.getMenuDriver().headerContent()).toBe(getHeader(0));\n    expect(driver.getMenuDriver().footerContent()).toBe(getFooter(0));\n    expect(driver.getMenuDriver().isLinkActiveByIndex(activeIndex)).toBe(true);\n  });\n\n  it('should initially render the sub menu of the active link', () => {\n    const activeLevel = 1;\n    const activeIndex = 1;\n    const driver = createSideMenu(1, {activeLevel, activeIndex});\n\n    expect(driver.getMenuDriver().headerContent()).toBe(getHeader(1));\n    expect(driver.getMenuDriver().footerContent()).toBe(getFooter(1));\n    expect(driver.getMenuDriver().hasBackLink()).toBe(true);\n    expect(driver.getMenuDriver().isLinkActiveByIndex(activeIndex)).toBe(true);\n  });\n\n  it('should initially render the sub menu of the active link', () => {\n    const activeLevel = 1;\n    const activeIndex = 1;\n    const driver = createSideMenu(1, {activeLevel, activeIndex});\n\n    expect(driver.getMenuDriver().headerContent()).toBe(getHeader(1));\n    expect(driver.getMenuDriver().footerContent()).toBe(getFooter(1));\n    expect(driver.getMenuDriver().hasBackLink()).toBe(true);\n    expect(driver.getMenuDriver().isLinkActiveByIndex(activeIndex)).toBe(true);\n    expect(driver.getMenuDriver().navigationCategoryContent(0)).toBe('SubMenu1_1');\n  });\n\n  it('should trigger first child link\\'s click when clicking a sub menu', () => {\n    const driver = createSideMenu(3);\n\n    expect(driver.getMenuDriver().headerContent()).toBe(getHeader(0));\n    expect(driver.getMenuDriver().footerContent()).toBe(getFooter(0));\n    expect(driver.getMenuDriver().hasBackLink()).toBe(false);\n\n    // click the first sub menu\n    expect(onClickSpy.mock.calls.length).toBe(0);\n    driver.getMenuDriver().clickInnerLinkByIndex(3);\n\n    expect(onClickSpy).toHaveBeenCalled();\n    expect(onSubMenuClickSpy).toHaveBeenCalled();\n    expect(onClickSpy.mock.calls.length).toBe(1);\n    expect(onSubMenuClickSpy.mock.calls.length).toBe(1);\n  });\n\n  it('should navigate to a parent menu and sub menu link should be active', done => {\n    const activeLevel = 1;\n    const activeIndex = 1;\n    const driver = createSideMenu(1, {activeLevel, activeIndex});\n\n    expect(driver.getMenuDriver().headerContent()).toBe(getHeader(1));\n    expect(driver.getMenuDriver().footerContent()).toBe(getFooter(1));\n    expect(driver.getMenuDriver().isLinkActiveByIndex(activeIndex)).toBe(true);\n    expect(driver.getMenuDriver().hasBackLink()).toBe(true);\n\n    driver.getMenuDriver().clickBackLink();\n\n    setTimeout(() => {\n      expect(driver.getMenuDriver().headerContent()).toBe(getHeader(0));\n      expect(driver.getMenuDriver().footerContent()).toBe(getFooter(0));\n      expect(driver.getMenuDriver().isLinkActiveByIndex(3)).toBe(true);\n      expect(onSubMenuBackSpy).toHaveBeenCalled();\n      expect(onSubMenuBackSpy.mock.calls.length).toBe(1);\n      done();\n    }, 600);\n  });\n});\n"}});