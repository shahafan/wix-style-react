webpackJsonp([413],{1544:function(module,exports){module.exports="import React, {Component} from 'react';\nimport styles from './Grid.scss';\nimport Card from '../Card';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass RawContainer extends Component {\n\n  static propTypes = {\n    children: PropTypes.node\n  };\n\n  render() {\n    return (\n      <div className={styles['raw-container']}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nclass Container extends Component {\n\n  static propTypes = {\n    children: PropTypes.node\n  };\n\n  render() {\n    return (\n      <div className={styles.wixContainer}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nclass Row extends Component {\n\n  static propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    rtl: PropTypes.bool,\n    stretchViewsVertically: PropTypes.bool,\n    dataHook: PropTypes.string\n  };\n\n  static defaultProps = {\n    stretchViewsVertically: false\n  };\n\n  render() {\n    const rowClasses = classNames(\n      styles.row,\n      this.props.className,\n      {\n        [styles.rtl]: this.props.rtl,\n        [styles.stretch_vertically_row]: this.props.stretchViewsVertically\n      });\n\n    return (\n      <div className={rowClasses} data-hook={this.props.dataHook}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nclass AutoAdjustedRow extends Component {\n\n  DEFAULT_MAX_SPAN = 12;\n  static propTypes = {\n    children: PropTypes.node\n  };\n\n  render() {\n    const cssClasses = classNames(styles.row, styles.flexContainer);\n    const children = this.props.children;\n    const cols = Array.isArray(children) ? children : [children];\n    const spanSize = Math.floor(this.DEFAULT_MAX_SPAN / cols.length);\n    return (\n      <div className={cssClasses}>\n        {cols.map((child, index) => <Col span={spanSize} key={index}>{child}</Col>)}\n      </div>\n    );\n  }\n}\n\nclass Col extends Component {\n\n  static propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    span: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    rtl: PropTypes.bool,\n    xs: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    sm: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    md: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    lg: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    xl: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    dataHook: PropTypes.string\n  };\n\n  isVisibleHidden(str) {\n    return str === 'hidden' || str === 'visible';\n  }\n\n  isLegalCol(numStr) {\n    if (numStr && !this.isVisibleHidden(numStr)) {\n      const num = Number(numStr);\n      return Number.isInteger(num) && num > 0 && num <= 12;\n    }\n    return false;\n  }\n\n  render() {\n    const columnClasses = classNames(\n      this.props.className,\n      styles.column,\n      {[styles.rtl]: this.props.rtl},\n      {[styles[`colXs${this.props.span}`]]: this.isLegalCol(this.props.span)},\n      {[styles[`colXs${this.props.xs}`]]: this.isLegalCol(this.props.xs)},\n      {[styles[`colSm${this.props.sm}`]]: this.isLegalCol(this.props.sm)},\n      {[styles[`colMd${this.props.md}`]]: this.isLegalCol(this.props.md)},\n      {[styles[`colLg${this.props.lg}`]]: this.isLegalCol(this.props.lg)},\n      {[styles[`colXl${this.props.xl}`]]: this.isLegalCol(this.props.xl)},\n      {[styles[`${this.props.xs}Xs`]]: this.isVisibleHidden(this.props.xs)},\n      {[styles[`${this.props.sm}Sm`]]: this.isVisibleHidden(this.props.sm)},\n      {[styles[`${this.props.md}Md`]]: this.isVisibleHidden(this.props.md)},\n      {[styles[`${this.props.lg}Lg`]]: this.isVisibleHidden(this.props.lg)},\n    );\n    return (\n      <div className={columnClasses} data-hook={this.props.dataHook}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport {Container, RawContainer, Row, AutoAdjustedRow, Col, Card};\n"}});