webpackJsonp([458],{1499:function(module,exports){module.exports="import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactTestUtils from 'react-dom/test-utils';\nimport values from 'lodash/values';\n\nconst dataTableDriverFactory = ({element, wrapper, component}) => {\n\n  const getHeader = () => element.querySelector('thead');\n  const hasHeader = () => !!getHeader();\n\n  const getRows = () => element.querySelectorAll('tbody tr[data-table-row=\"dataTableRow\"]');\n  const getRowsCount = () => getRows().length;\n  const getRow = rowIndex => getRows()[rowIndex];\n  const getCell = (rowIndex, cellIndex) => getRow(rowIndex).querySelectorAll('td')[cellIndex];\n  const getRowDetails = index => element.querySelector(`tbody tr td[data-hook=\"${index}_details\"]`);\n  const getHeaderTitleByIndex = index => getHeader().querySelectorAll('th')[index];\n  const getSortableTitle = index => element.querySelector(`th [data-hook=\"${index}_title\"]`);\n  return {\n    getRowsCount,\n    getRowsWithClassCount: className => values(getRows()).filter(elem => elem.classList.contains(className)).length,\n    getRowsWithDataHook: dataHookName => element.querySelectorAll(`[data-hook=\"${dataHookName}\"]`),\n    getRowWithDataHook: dataHookName => element.querySelector(`[data-hook=\"${dataHookName}\"]`),\n    getRowText: index => values(getRows()[index].querySelectorAll('td')).map(td => td.textContent),\n    getRowClasses: index => values(getRows()[index].classList),\n    getHeaderCellStyle: index => getHeaderTitleByIndex(index).style,\n    getCellStyle: (rowIndex, colIndex) => getCell(rowIndex, colIndex).style,\n    isRowClickable: index => getRows()[index].classList.contains('clickableDataRow'),\n    getTitles: () => values(getHeader().querySelectorAll('th')).map(th => th.textContent),\n    isDisplayingNothing: () => !!element,\n    isDisplayingHeaderOnly: () => hasHeader() && getRowsCount() === 0,\n    isDisplayingHeader: () => hasHeader(),\n    hasChildWithId: id => !!element.querySelector(`#${id}`),\n    clickRow: (index, eventData) => ReactTestUtils.Simulate.click(getRow(index), eventData),\n    mouseEnterRow: (index, eventData) => ReactTestUtils.Simulate.mouseEnter(getRow(index), eventData),\n    mouseLeaveRow: (index, eventData) => ReactTestUtils.Simulate.mouseLeave(getRow(index), eventData),\n    setProps: props => {\n      const ClonedWithProps = React.cloneElement(component, Object.assign({}, component.props, props), ...(component.props.children || []));\n      ReactDOM.render(<div ref={r => element = r}>{ClonedWithProps}</div>, wrapper);\n    },\n    hasRowDetails: index => !!getRowDetails(index),\n    getRowDetailsText: index => getRowDetails(index).textContent,\n    hasSortableTitle: index => !!getSortableTitle(index),\n    hasSortDescending: index => {\n      const sortableTitle = getSortableTitle(index);\n      return !!sortableTitle && sortableTitle.classList.contains('sortArrowAsc');\n    },\n    clickSort: (index, eventData) => ReactTestUtils.Simulate.click(getHeaderTitleByIndex(index), eventData),\n    getRowDetails: index => getRowDetails(index)\n  };\n};\n\nexport default dataTableDriverFactory;\n"}});