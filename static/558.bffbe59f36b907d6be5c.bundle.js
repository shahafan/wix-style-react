webpackJsonp([558],{1399:function(module,exports){module.exports="import React from 'react';\nimport ReactTestUtils from 'react-dom/test-utils';\nimport autoCompleteDriverFactory from './AutoComplete.driver';\nimport AutoComplete from './AutoComplete';\nimport {createDriverFactory} from '../test-common';\nimport {autoCompleteTestkitFactory} from '../../testkit';\nimport {autoCompleteTestkitFactory as enzymeAutoCompleteTestkitFactory} from '../../testkit/enzyme';\nimport {mount} from 'enzyme';\nimport {runInputWithOptionsTest} from '../InputWithOptions/InputWithOptions.spec';\n\nconst asciiA = '97';\nrunInputWithOptionsTest(autoCompleteDriverFactory);\n\ndescribe('Autocomplete', () => {\n  const createDriver = createDriverFactory(autoCompleteDriverFactory);\n\n  const options = [\n    {id: 0, value: 'aaa'},\n    {id: 1, value: 'abb'},\n    {id: 2, value: 'bbb', disabled: true},\n    {id: 3, value: 'bcc'},\n    {id: 'divider1', value: '-'},\n    {id: 'element1', value: <span style={{color: 'brown'}}>ccc</span>}\n  ];\n\n  const predicate = option => option.value.toString().toLowerCase().indexOf('a') !== -1;\n\n  it('should not filter anything without predicate function', () => {\n    const {dropdownLayoutDriver} = createDriver(<AutoComplete options={options}/>);\n    expect(dropdownLayoutDriver.optionsLength()).toBe(options.length);\n  });\n\n  ['ArrowUp', 'ArrowDown'].forEach(key => {\n    it(`should not filter items according to predicate function when pressing ${key}`, () => {\n      const {inputDriver, dropdownLayoutDriver} = createDriver(<AutoComplete options={options} predicate={predicate}/>);\n      inputDriver.trigger('keyDown', {key});\n      expect(dropdownLayoutDriver.optionsLength()).toBe(options.length);\n    });\n  });\n\n  it('should filter items according to predicate function when typing characters', () => {\n    const {inputDriver, dropdownLayoutDriver} = createDriver(<AutoComplete options={options} predicate={predicate}/>);\n    inputDriver.trigger('keyDown', {key: asciiA});\n    expect(dropdownLayoutDriver.optionsLength()).toBe(2);\n  });\n\n  it('should show all items when focusing even if some text exist', () => {\n    const {dropdownLayoutDriver, inputDriver} = createDriver(<AutoComplete options={options} predicate={predicate}/>);\n    inputDriver.enterText('aaa');\n    inputDriver.focus();\n    expect(dropdownLayoutDriver.optionsLength()).toBe(options.length);\n  });\n\n  describe('testkit', () => {\n    it('should exist', () => {\n      const div = document.createElement('div');\n      const dataHook = 'myDataHook';\n      const wrapper = div.appendChild(ReactTestUtils.renderIntoDocument(<div><AutoComplete dataHook={dataHook}/></div>));\n      const autoCompleteTestkit = autoCompleteTestkitFactory({wrapper, dataHook});\n      expect(autoCompleteTestkit.driver.exists()).toBeTruthy();\n      expect(autoCompleteTestkit.inputDriver.exists()).toBeTruthy();\n      expect(autoCompleteTestkit.dropdownLayoutDriver.exists()).toBeTruthy();\n    });\n  });\n\n  describe('enzyme testkit', () => {\n    it('should exist', () => {\n      const dataHook = 'myDataHook';\n      const wrapper = mount(<AutoComplete dataHook={dataHook}/>);\n      const autoCompleteTestkit = enzymeAutoCompleteTestkitFactory({wrapper, dataHook});\n      expect(autoCompleteTestkit.driver.exists()).toBeTruthy();\n      expect(autoCompleteTestkit.inputDriver.exists()).toBeTruthy();\n      expect(autoCompleteTestkit.dropdownLayoutDriver.exists()).toBeTruthy();\n    });\n  });\n});\n"}});