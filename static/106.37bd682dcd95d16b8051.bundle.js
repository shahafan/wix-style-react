webpackJsonp([106],{1851:function(module,exports){module.exports="import GoogleMapsClient from './GoogleMapsClient';\n\ndescribe('GoogleMapsClient', () => {\n\n  afterEach(() => delete window.google);\n\n  it('should handle null when autocompleting and getting ZERO_RESULTS', () => {\n    window.google = new GoogleMapsMock({\n      getPlacePredictions: (request, callback) => {\n        callback(null, window.google.maps.GeocoderStatus.ZERO_RESULTS);\n      }\n    });\n    const client = new GoogleMapsClient();\n    return client.autocomplete({request: {}}).then(result => {\n      expect(result).toEqual([]);\n    });\n  });\n\n  it('should handle null when geocoding and getting ZERO_RESULTS', () => {\n    window.google = new GoogleMapsMock(null, {\n      geocode: (request, callback) => {\n        callback(null, window.google.maps.GeocoderStatus.ZERO_RESULTS);\n      }\n    });\n    const client = new GoogleMapsClient();\n    return client.geocode({request: {}}).then(result => {\n      expect(result).toEqual([]);\n    });\n  });\n\n});\n\nfunction GoogleMapsMock(autocompleteInstance, geocoderInstance) {\n  return {\n    maps: {\n      places: {\n        AutocompleteService: () => autocompleteInstance\n      },\n      Geocoder: () => geocoderInstance,\n      GeocoderStatus: {\n        OK: 'OK',\n        ZERO_RESULTS: 'ZERO_RESULTS'\n      }\n    }\n  };\n}\n"}});