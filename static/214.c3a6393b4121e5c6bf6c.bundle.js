webpackJsonp([214],{1743:function(module,exports){module.exports="import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactTestUtils from 'react-dom/test-utils';\nimport styles from './RichTextArea.scss';\n\nconst richTextAreaDriverFactory = ({element, wrapper, component, componentInstance}) => {\n  const getButtons = () => [...element.querySelectorAll('[data-hook*=\"rich-text-area-button\"]')];\n  const getEditorWrapper = () => element.querySelector('[data-hook=editor-wrapper]');\n  const getButtonType = button => button.getAttribute('data-hook').replace(/^rich-text-area-button-/, '');\n  const getImage = () => element.querySelector('[data-hook=editor-image]');\n  const getButtonByType = type => getButtons().find(button => getButtonType(button) === type);\n  const clickButtonByType = type => () => ReactTestUtils.Simulate.mouseDown(getButtonByType(type));\n  const getDefaultBlock = () => element.querySelector('[data-key=\\'defaultBlock\\']');\n\n  return {\n    exists: () => !!element,\n    getButtonTypes: () => getButtons().map(getButtonType),\n    clickBoldButton: clickButtonByType('bold'),\n    clickItalicButton: clickButtonByType('italic'),\n    clickUnderlineButton: clickButtonByType('underline'),\n    clickImageButton: clickButtonByType('image'),\n    clickUnorderedListButton: clickButtonByType('unordered-list'),\n    clickOrderedListButton: clickButtonByType('ordered-list'),\n    getContent: () => element.childNodes[1].textContent,\n    enterText: text => {\n      const editorState = componentInstance.state.editorState;\n      const newEditorState = editorState\n        .transform()\n        .insertText(text)\n        .apply();\n\n      componentInstance.setEditorState(newEditorState);\n    },\n    isErrorIndicatorVisible: () => Boolean(element.classList.contains(styles.withError)),\n    isDisabled: () => (\n      getButtons().every(button => button.classList.contains(styles.disabled)) &&\n      element.childNodes[1].classList.contains(styles.disabled)\n    ),\n    isImageExist: () => !!getImage(),\n    isAddImageButtonExist: () => !!getButtonByType('image'),\n    isResizable: () => (getEditorWrapper().classList.contains(styles.resizable)),\n    isDefaultBlockExist: () => getDefaultBlock(),\n    setProps: props => {\n      const ClonedWithProps = React.cloneElement(component, Object.assign({}, component.props, props), ...(component.props.children || []));\n      ReactDOM.render(<div ref={r => element = r}>{ClonedWithProps}</div>, wrapper);\n    }\n  };\n};\n\nexport default richTextAreaDriverFactory;\n"}});